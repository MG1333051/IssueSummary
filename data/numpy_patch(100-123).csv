number,ncommit,hash,author,date,subject,nfiles,ninsertions,ndeletions,file,changes,insertions,deletions,locations,roots
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,doc/HOWTO_RELEASE.rst.txt,[u'3'],1,1," -113,8 +113,7 ;",needs to be installed;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/compat/setupscons.py,[u'11'],0,1," -1,11 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/core/SConscript,[u'531'],0,31," -1,531 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/core/SConstruct,[u'2'],0,1," -1,2 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/core/scons_support.py,[u'272'],0,16," -1,272 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/core/setup_common.py,[u'2'],1,1," -1,4 +1,4 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/core/setupscons.py,[u'111'],0,7," -1,111 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/distutils/command/build_ext.py,[u'5'],0,1," -231,11 +231,6 ;",def run(self);
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/distutils/command/scons.py,[u'589'],0,35," -1,589 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/distutils/core.py,[u'4'],1,1," -24,7 +24,7 ; -38,7 +38,6 ; -99,7 +98,6 ;",;;def get_distribution(always=False);
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/distutils/misc_util.py,[u'152'],1,8," -645,56 +645,13 ; -1651,65 +1608,6 ; -2084,11 +1982,6 ; -2239,49 +2132,6 ;","def get_frame(level=0);def add_npy_pkg_config(self, template, install_dir, subst_dict=None);def make_config_py(self,name='__config__');def is_bootstrapping();"
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/distutils/setupscons.py,[u'17'],0,1," -1,17 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/f2py/setupscons.py,[u'124'],0,8," -1,124 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/fft/SConscript,[u'8'],0,1," -1,8 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/fft/SConstruct,[u'2'],0,1," -1,2 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/fft/setupscons.py,[u'15'],0,1," -1,15 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/lib/SConscript,[u'7'],0,1," -1,7 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/lib/SConstruct,[u'2'],0,1," -1,2 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/lib/setupscons.py,[u'16'],0,1," -1,16 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/linalg/SConscript,[u'23'],0,2," -1,23 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/linalg/SConstruct,[u'2'],0,1," -1,2 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/linalg/setupscons.py,[u'19'],0,2," -1,19 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/ma/setupscons.py,[u'18'],0,2," -1,18 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/matrixlib/setupscons.py,[u'13'],0,1," -1,13 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/numarray/SConscript,[u'7'],0,1," -1,7 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/numarray/SConstruct,[u'2'],0,1," -1,2 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/numarray/setupscons.py,[u'14'],0,1," -1,14 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/oldnumeric/setupscons.py,[u'8'],0,1," -1,8 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/random/SConscript,[u'50'],0,3," -1,50 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/random/SConstruct,[u'2'],0,1," -1,2 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/random/setupscons.py,[u'40'],0,3," -1,40 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/setupscons.py,[u'42'],0,3," -1,42 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,numpy/testing/setupscons.py,[u'16'],0,1," -1,16 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,setupscons.py,[u'124'],0,8," -1,124 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,setupsconsegg.py,[u'7'],0,1," -1,7 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,tools/win32build/cpucaps/SConstruct,[u'8'],0,1," -1,8 +0,0 ;",;
2914,5,df259db, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 10:04:44 -0700",ct: [PATCH 1/5] DEP: Remove scons related files and code.This removes files and code supporting scons builds. After this changenumpy will only support builds using distutils or bento. The removal ofscons has been discussed on the list several times and a decision has beenmade that scons support is no longer needed. This was originally discussedfor numpy 1.7 and because the distutils and bento methods are stillavailable we are skipping the usual deprecation period.,37,4,2269,tools/win32build/cpuid/SConstruct,[u'5'],0,1," -1,5 +0,0 ;",;
2914,5,89c7d59, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 11:00:57 -0700",ct: [PATCH 2/5] DOC: Document removal of SCons support in doc/release/1.8-notes.rst.,1,8,3,doc/release/1.8.0-notes.rst,[u'11'],8,3," -2,14 +2,19 ;",;
2914,5,7c286a4, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 13:57:48 -0700",ct: [PATCH 3/5] BUG: Need to keep SCons support in cpucaps and cpuid.These tools are not directly related to numpy builds.,2,13,0,tools/win32build/cpucaps/SConstruct,[u'8'],8,0," -0,0 +1,8 ;",;
2914,5,7c286a4, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 13:57:48 -0700",ct: [PATCH 3/5] BUG: Need to keep SCons support in cpucaps and cpuid.These tools are not directly related to numpy builds.,2,13,0,tools/win32build/cpuid/SConstruct,[u'5'],5,0," -0,0 +1,5 ;",;
2914,5,8f37ecc, Charles Harris <charlesr.harris@gmail.com>," Sun, 13 Jan 2013 14:24:26 -0700",ct: [PATCH 4/5] BUG: Need to keep pointer to using scons in HOWTO_RELEASE.rst.txt.,1,2,0,doc/HOWTO_RELEASE.rst.txt,[u'3'],2,1," -113,7 +113,8 ;",needs to be installed;
2914,5,3af34a4, Charles Harris <charlesr.harris@gmail.com>," Mon, 14 Jan 2013 20:55:56 -0700","ct: [PATCH 5/5] DEP: Remove more references to scons related files.These references were in MANIFEST.in, doc/summarize.py, release.sh, andnumpy/testing/noseclasses.py and involved scons files that have beenremoved, mostly setupscons.py and setupsconsegg.py that were in the toplevel.",4,0,7,MANIFEST.in,[u'3'],0,3," -6,15 +6,12 ;",;
2914,5,3af34a4, Charles Harris <charlesr.harris@gmail.com>," Mon, 14 Jan 2013 20:55:56 -0700","ct: [PATCH 5/5] DEP: Remove more references to scons related files.These references were in MANIFEST.in, doc/summarize.py, release.sh, andnumpy/testing/noseclasses.py and involved scons files that have beenremoved, mostly setupscons.py and setupsconsegg.py that were in the toplevel.",4,0,7,doc/summarize.py,[u'2'],1,1," -31,7 +31,7 ;",;
2914,5,3af34a4, Charles Harris <charlesr.harris@gmail.com>," Mon, 14 Jan 2013 20:55:56 -0700","ct: [PATCH 5/5] DEP: Remove more references to scons related files.These references were in MANIFEST.in, doc/summarize.py, release.sh, andnumpy/testing/noseclasses.py and involved scons files that have beenremoved, mostly setupscons.py and setupsconsegg.py that were in the toplevel.",4,0,7,numpy/testing/noseclasses.py,[u'2'],0,2," -165,8 +165,6 ;",class NumpyDoctest(npd.Doctest);
2914,5,3af34a4, Charles Harris <charlesr.harris@gmail.com>," Mon, 14 Jan 2013 20:55:56 -0700","ct: [PATCH 5/5] DEP: Remove more references to scons related files.These references were in MANIFEST.in, doc/summarize.py, release.sh, andnumpy/testing/noseclasses.py and involved scons files that have beenremoved, mostly setupscons.py and setupsconsegg.py that were in the toplevel.",4,0,7,release.sh,[u'1'],0,1," -28,7 +28,6 ;",f;
2911,4,04bd5ac, Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>," Thu, 10 Jan 2013 21:49:01 +0100",ct: [PATCH 1/4] Added support for AArch64 architectureSigned-off-by: Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>,2,3,0,numpy/core/include/numpy/npy_cpu.h,[u'2'],2,0," -66,6 +66,8 ;",;
2911,4,04bd5ac, Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>," Thu, 10 Jan 2013 21:49:01 +0100",ct: [PATCH 1/4] Added support for AArch64 architectureSigned-off-by: Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>,2,3,0,numpy/core/include/numpy/npy_endian.h,[u'1'],1,0," -25,6 +25,7 ;",;
2911,4,c7b17b3, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 12 Jan 2013 14:22:17 -0800",ct: [PATCH 2/4] DOC: update release notes about AArch64,1,4,0,doc/release/1.7.0-notes.rst,[u'4'],4,0," -57,6 +57,10 ;","Because of the nature of floating-point arithmetic, this may subtly chang;"
2911,4,0be2faa, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 12 Jan 2013 16:05:19 -0800",ct: [PATCH 3/4] DOC: Move the news entry in release notes,1,5,4,doc/release/1.7.0-notes.rst,[u'9'],5,4," -57,10 +57,6 ; -158,6 +154,11 ;","Because of the nature of floating-point arithmetic, this may subtly chang;New argument to searchsorte;"
2911,4,3fe7bf0, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 12 Jan 2013 19:00:39 -0800","ct: [PATCH 4/4] DOC: remove parentheses around ""experimental""",1,0,0,doc/release/1.7.0-notes.rst,[u'2'],1,1," -157,7 +157,7 ;",permutation array that sorts the array to search;
2910,1,75bef12, Vladimir Rutsky <altsysrq@gmail.com>," Sat, 12 Jan 2013 23:06:24 +0400",ct: [PATCH] Fix typo in SVD usage example,1,0,0,numpy/linalg/linalg.py,[u'2'],1,1," -1253,7 +1253,7 ;","def svd(a, full_matrices=1, compute_uv=1);"
2909,1,d4286f8, argriffing <argriffing@gmail.com>," Fri, 11 Jan 2013 20:02:19 -0500","ct: [PATCH] remove a confusing docstring lineones_like:""With default parameters, is equivalent to a.copy().fill(1).""This is not technically true, because 'fill' returns None.",1,0,4,numpy/core/numeric.py,[u'4'],0,4," -67,8 +67,6 ; -155,8 +153,6 ;","def zeros_like(a, dtype=None, order='K', subok=True);def ones_like(a, dtype=None, order='K', subok=True);"
2908,1,c1059f2, argriffing <argriffing@gmail.com>," Fri, 11 Jan 2013 18:59:15 -0500",ct: [PATCH] Update numpy/core/code_generators/ufunc_docstrings.py,1,0,0,numpy/core/code_generators/ufunc_docstrings.py,[u'2'],1,1," -1099,7 +1099,7 ;","def add_newdoc(place, name, doc);"
2907,2,8362e08, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 13 Jan 2013 01:19:13 +0100","ct: [PATCH 1/2] BUG: Convert non-array rhs for boolean assignment with correct dtypeEnforcing the left hand side datatype for a non-array right hand sideargument in index assignments was the behavior before 1.7. and is thegeneral behaviour here. (note this means a non-array right hand sidechecks for NaN, etc. if the left hand side is integer, but an arrayright hand side does not)",2,21,3,numpy/core/src/multiarray/mapping.c,[u'14'],11,3," -1306,9 +1306,17 ;","array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;"
2907,2,8362e08, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 13 Jan 2013 01:19:13 +0100","ct: [PATCH 1/2] BUG: Convert non-array rhs for boolean assignment with correct dtypeEnforcing the left hand side datatype for a non-array right hand sideargument in index assignments was the behavior before 1.7. and is thegeneral behaviour here. (note this means a non-array right hand sidechecks for NaN, etc. if the left hand side is integer, but an arrayright hand side does not)",2,21,3,numpy/core/tests/test_regression.py,[u'10'],10,0," -304,6 +304,16 ;","def bfb(): x[:] = np.arange(3,dtype=float;"
2907,2,24615f4, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 13 Jan 2013 01:20:39 +0100",ct: [PATCH 2/2] BUG: Make 1d fancy indexing special case use unsafe_castingAlso make sure right hand side is converted safely to the righttype if it is not an array though.,2,5,0,numpy/core/src/multiarray/iterators.c,[u'3'],2,1," -1082,7 +1082,8 ;","iter_ass_subscript(PyArrayIterObject *self, PyObject *ind, PyObject *val;"
2907,2,24615f4, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 13 Jan 2013 01:20:39 +0100",ct: [PATCH 2/2] BUG: Make 1d fancy indexing special case use unsafe_castingAlso make sure right hand side is converted safely to the righttype if it is not an array though.,2,5,0,numpy/core/tests/test_regression.py,[u'3'],3,0," -309,10 +309,13 ;",def test_nonarray_assignment(self);
2904,2,5b8e9a1, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 11 Jan 2013 22:50:51 +0100","ct: [PATCH 1/2] BUG: Convert non-array rhs for boolean assignment with correct dtypeEnforcing the left hand side datatype for a non-array right hand sideargument in index assignments was the behavior before 1.7. and is thegeneral behaviour here. (note this means a non-array right hand sidechecks for NaN, etc. if the left hand side is integer, but an arrayright hand side does not)",2,22,3,numpy/core/src/multiarray/mapping.c,[u'15'],12,3," -1282,9 +1282,18 ;","array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;"
2904,2,5b8e9a1, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 11 Jan 2013 22:50:51 +0100","ct: [PATCH 1/2] BUG: Convert non-array rhs for boolean assignment with correct dtypeEnforcing the left hand side datatype for a non-array right hand sideargument in index assignments was the behavior before 1.7. and is thegeneral behaviour here. (note this means a non-array right hand sidechecks for NaN, etc. if the left hand side is integer, but an arrayright hand side does not)",2,22,3,numpy/core/tests/test_regression.py,[u'10'],10,0," -288,6 +288,16 ;","def bfb(): x[:] = np.arange(3,dtype=float;"
2904,2,dcd076e, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 11 Jan 2013 22:51:47 +0100",ct: [PATCH 2/2] BUG: Make 1d fancy indexing special case use unsafe_castingAlso make sure right hand side is converted safely to the righttype if it is not an array though.,2,5,0,numpy/core/src/multiarray/iterators.c,[u'3'],2,1," -1043,7 +1043,8 ;","iter_ass_subscript(PyArrayIterObject *self, PyObject *ind, PyObject *val;"
2904,2,dcd076e, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 11 Jan 2013 22:51:47 +0100",ct: [PATCH 2/2] BUG: Make 1d fancy indexing special case use unsafe_castingAlso make sure right hand side is converted safely to the righttype if it is not an array though.,2,5,0,numpy/core/tests/test_regression.py,[u'3'],3,0," -293,10 +293,13 ;",def test_nonarray_assignment(self);
2903,1,e0c51db, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 11 Jan 2013 13:59:24 +0100",ct: [PATCH] BUG: raise ValueError for nanarg(min|max) for all nan along axisThe assignment of nan to the non-floating result of these functionalways caused a ValueError. This adds a more specific error and removesrelying on the assignment failing.,2,19,4,numpy/lib/function_base.py,[u'3'],3,0," -1397,6 +1397,9 ;","def _nanop(op, fill, a, axis=None);"
2903,1,e0c51db, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 11 Jan 2013 13:59:24 +0100",ct: [PATCH] BUG: raise ValueError for nanarg(min|max) for all nan along axisThe assignment of nan to the non-floating result of these functionalways caused a ValueError. This adds a more specific error and removesrelying on the assignment failing.,2,19,4,numpy/lib/tests/test_function_base.py,[u'20'],16,4," -1062,10 +1062,6 ; -1074,6 +1070,22 ;",def test_nanmax(self);def test_nanmin_masked(self);
2901,1,7d7a593, Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>," Thu, 10 Jan 2013 21:49:01 +0100",ct: [PATCH] Added support for AArch64 architectureSigned-off-by: Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>,2,3,0,numpy/core/include/numpy/npy_cpu.h,[u'2'],2,0," -66,6 +66,8 ;",;
2901,1,7d7a593, Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>," Thu, 10 Jan 2013 21:49:01 +0100",ct: [PATCH] Added support for AArch64 architectureSigned-off-by: Marcin Juszkiewicz <marcin.juszkiewicz@linaro.org>,2,3,0,numpy/core/include/numpy/npy_endian.h,[u'1'],1,0," -25,6 +25,7 ;",;
2900,2,19953ba, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 5 Jan 2013 11:50:50 +0100","ct: [PATCH 1/2] BUG: Fix byteswapping for complex scalarsDuring a cleanup, the fast paths were invalidated because SIZEOF_LONGDOUBLEwas not defined anymore and needs to be replaced with NPY_SIZEOF_LONGDOUBLE.The other SIZEOF macros still existed however so only complex long doublebroke because it switched to the already broken fast path.This commit fixes the fast path, and replaces all SIZEOF_ macros withinarraytypes.c.src with their corresponding NPY_SIZEOF_ macros.",2,28,25,numpy/core/src/multiarray/arraytypes.c.src,[u'29'],14,15," -946,9 +946,9 ; -1612,27 +1612,27 ; -1640,7 +1640,7 ; -1744,7 +1744,7 ; -1752,7 +1752,7 ; -1764,7 +1764,7 ; -1778,7 +1778,7 ; -1794,7 +1794,7 ; -1825,9 +1825,8 ;","HALF_to_@TYPE@(npy_half *ip, @type@ *op, npy_intp n;static voi;static voi;static voi;static voi;static voi;static voi;static voi;static voi;"
2900,2,19953ba, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 5 Jan 2013 11:50:50 +0100","ct: [PATCH 1/2] BUG: Fix byteswapping for complex scalarsDuring a cleanup, the fast paths were invalidated because SIZEOF_LONGDOUBLEwas not defined anymore and needs to be replaced with NPY_SIZEOF_LONGDOUBLE.The other SIZEOF macros still existed however so only complex long doublebroke because it switched to the already broken fast path.This commit fixes the fast path, and replaces all SIZEOF_ macros withinarraytypes.c.src with their corresponding NPY_SIZEOF_ macros.",2,28,25,numpy/core/tests/test_regression.py,[u'24'],14,10," -1262,16 +1262,20 ;",def test_misaligned_dot_product_objects(self);
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/arraytypes.c.src,[u'6'],2,4," -4088,8 +4088,6 ; -4219,7 +4217,7 ; -4232,7 +4230,7 ;",set_typeinfo(PyObject *dict;set_typeinfo(PyObject *dict;set_typeinfo(PyObject *dict;
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/conversion_utils.c,[u'14'],7,7," -742,7 +742,7 ; -774,9 +774,9 ; -869,7 +869,7 ; -879,7 +879,7 ; -908,7 +908,7 ; -1153,7 +1153,7 ;","PyArray_PyIntAsInt(PyObject *o;PyArray_PyIntAsIntp(PyObject *o;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntTupleFromIntp(int len, npy_intp *vals;"
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/getset.c,[u'4'],2,2," -383,7 +383,7 ; -399,7 +399,7 ;",static PyObject ;static PyObject ;
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/iterators.c,[u'4'],2,2," -1677,7 +1677,7 ; -1692,7 +1692,7 ;",arraymultiter_dealloc(PyArrayMultiIterObject *multi;arraymultiter_size_get(PyArrayMultiIterObject *self;
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/mapping.h,[u'3'],2,1," -23,10 +23,11 ;",NPY_NO_EXPORT in;
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/multiarraymodule.c,[u'4'],2,2," -3784,7 +3784,7 ; -3794,7 +3794,7 ;",setup_scalartypes(PyObject *NPY_UNUSED(dict);setup_scalartypes(PyObject *NPY_UNUSED(dict);
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/scalartypes.c.src,[u'2'],1,1," -2939,7 +2939,7 ;",int_arrtype_hash(PyObject *obj;
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/npymath/_signbit.c,[u'6'],3,3," -12,7 +12,7 ; -20,7 +20,7 ; -28,5 +28,5 ;",_npy_signbit_d(double x;_npy_signbit_d(double x;_npy_signbit_d(double x;
2900,2,d4a3937, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH 2/2] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/scalarmathmodule.c.src,[u'8'],4,4," -24,7 +24,7 ; -72,7 +72,7 ; -203,8 +203,8 ;",";slonglong_overflow(npy_longlong a0, npy_longlong b0;static voi;"
2897,9,fda92e2, Jay Bourque <jay.bourque@continuum.io>," Tue, 8 Jan 2013 18:12:58 -0600","ct: [PATCH 1/9] Fix ndindex issueCall to ndindex() with no arguments results in a ValueError exception, whereas before commit ca27396b, a call with no arguments was allowed.Issue is due to unneeded check for shape tuple size.",1,0,5,numpy/core/src/multiarray/ctors.c,[u'5'],0,5," -2075,11 +2075,6 ;",PyArray_FromInterface(PyObject *origin;
2897,9,ffb8c41, Jay Bourque <jay.bourque@continuum.io>," Wed, 9 Jan 2013 09:29:54 -0600",ct: [PATCH 2/9] Add test for optional size argument for ndindex,1,4,0,numpy/lib/tests/test_index_tricks.py,[u'4'],4,0," -242,6 +242,10 ;",def test_ndindex();
2897,9,4716137, Jay Bourque <jay.bourque@continuum.io>," Wed, 9 Jan 2013 12:59:56 -0600",ct: [PATCH 3/9] Add test for __array_interface__,1,7,0,numpy/core/tests/test_multiarray.py,[u'7'],7,0," -2873,6 +2873,13 ;",def __array_interface__(self);
2897,9,dd146b6," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 10 Jan 2013 00:26:34 -0600",ct: [PATCH 4/9] Fix the test for numpy.ndindex(),1,0,0,numpy/lib/tests/test_index_tricks.py,[u'2'],1,1," -244,7 +244,7 ;",def test_ndindex();
2897,9,6d980e7," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 10 Jan 2013 12:07:06 -0600",ct: [PATCH 5/9] Fix ndindex for 0-d arrays.,1,10,0,numpy/lib/index_tricks.py,[u'11'],10,1," -502,7 +502,6 ; -535,6 +534,9 ; -558,6 +560,13 ;",def next(self);class ndindex(object);def next(self);
2897,9,ae0a504," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 10 Jan 2013 15:09:45 -0600",ct: [PATCH 6/9] Fix the 0-d patch so it doesn't change the non 0-d iterator,1,11,11,numpy/lib/index_tricks.py,[u'22'],11,11," -531,16 +531,23 ; -560,13 +567,6 ;",class ndindex(object);def next(self);
2897,9,853eae4," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 10 Jan 2013 18:13:45 -0600",ct: [PATCH 7/9] Use super instead of direct access to inheritance.,1,0,0,numpy/lib/index_tricks.py,[u'2'],1,1," -539,7 +539,7 ;",def zerodim_gen();
2897,9,aef2cf7," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 10 Jan 2013 00:26:34 -0600",ct: [PATCH 8/9] Fix the test for numpy.ndindex() Fix ndindex for 0-d arrays. Add tests for tuple arguments to ndindex,2,24,5,numpy/lib/index_tricks.py,[u'23'],18,5," -532,16 +532,29 ;",class ndindex(object);
2897,9,aef2cf7," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 10 Jan 2013 00:26:34 -0600",ct: [PATCH 8/9] Fix the test for numpy.ndindex() Fix ndindex for 0-d arrays. Add tests for tuple arguments to ndindex,2,24,5,numpy/lib/tests/test_index_tricks.py,[u'6'],6,0," -242,10 +242,16 ;",def test_ndindex();
2897,9,d1a055b," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Fri, 11 Jan 2013 01:10:26 -0600",ct: [PATCH 9/9] Fix 0-d ndincr to have correct return value.,1,0,0,numpy/lib/index_tricks.py,[u'2'],1,1," -542,7 +542,7 ;",def __init__(self);
2893,5,2fe0783, Mark Wiebe <mwwiebe@gmail.com>," Mon, 7 Jan 2013 09:04:18 -0800",ct: [PATCH 1/5] TST: Add test for reduceat ufunc regression on zero-sized array,1,7,0,numpy/core/tests/test_umath.py,[u'7'],7,0," -1263,6 +1263,13 ;",def test_reduceat();
2893,5,e083cea, Mark Wiebe <mwwiebe@gmail.com>," Mon, 7 Jan 2013 10:57:46 -0800",ct: [PATCH 2/5] BUG: Fix ufunc.reduceat regression with empty index (gh-2892),1,15,2,numpy/core/src/umath/ufunc_object.c,[u'17'],15,2," -3337,12 +3337,24 ; -3350,7 +3362,8 ;","PyUFunc_Reduceat(PyUFuncObject *ufunc, PyArrayObject *arr, PyArrayObject *ind;PyUFunc_Reduceat(PyUFuncObject *ufunc, PyArrayObject *arr, PyArrayObject *ind;"
2893,5,3bd8e31, Mark Wiebe <mwwiebe@gmail.com>," Thu, 17 Jan 2013 15:12:26 -0800","ct: [PATCH 3/5] TST: Change reduceat empty test to use i4 indicesOn 32-bit platforms, was failing in casting the testi8 index to i4. It may be desirable to allow thisin reduceat, but that change is independent of this pullrequest.",1,0,0,numpy/core/tests/test_umath.py,[u'2'],1,1," -1265,7 +1265,7 ;",def test_reduceat();
2893,5,9b56a1d, Mark Wiebe <mwwiebe@gmail.com>," Mon, 12 Aug 2013 16:56:38 -0700",ct: [PATCH 4/5] TST: Add test for additional ufunc.reduceat empty parameter case,1,8,0,numpy/core/tests/test_umath.py,[u'8'],8,0," -1270,6 +1270,14 ;",def test_reduceat_empty();
2893,5,b2bfdae, Mark Wiebe <mwwiebe@gmail.com>," Mon, 12 Aug 2013 17:56:43 -0700",ct: [PATCH 5/5] BUG: Fix additional zero-sized index case for ufunc.reduceat,1,27,11,numpy/core/src/umath/ufunc_object.c,[u'38'],26,11," -753,7 +753,7 ; -1236,10 +1236,10 ; -1541,10 +1541,10 ; -2037,10 +2037,10 ; -3344,15 +3344,31 ; -4501,7 +4517,7 ;","static int get_ufunc_arguments(PyUFuncObject *ufunc;iterator_loop(PyUFuncObject *ufunc;execute_fancy_ufunc_loop(PyUFuncObject *ufunc;PyUFunc_GeneralizedFunction(PyUFuncObject *ufunc;PyUFunc_Reduceat(PyUFuncObject *ufunc, PyArrayObject *arr, PyArrayObject *ind;PyUFunc_RegisterLoopForDescr(PyUFuncObject *ufunc;"
2891,6,9e42e83, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:41:22 +0200",ct: [PATCH 1/6] MAINT: adept divisions for truedivideFollowing deprecations would cause problems otherwise.,4,5,5,numpy/core/defchararray.py,[u'4'],2,2," -89,7 +89,7 ; -2696,7 +2696,7 ;",def _get_num_chars(a);class adds the following functionality;
2891,6,9e42e83, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:41:22 +0200",ct: [PATCH 1/6] MAINT: adept divisions for truedivideFollowing deprecations would cause problems otherwise.,4,5,5,numpy/lib/index_tricks.py,[u'2'],1,1," -155,7 +155,7 ;","def __getitem__(self,key);"
2891,6,9e42e83, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:41:22 +0200",ct: [PATCH 1/6] MAINT: adept divisions for truedivideFollowing deprecations would cause problems otherwise.,4,5,5,numpy/lib/shape_base.py,[u'2'],1,1," -835,5 +835,5 ;","def tile(A, reps);"
2891,6,9e42e83, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:41:22 +0200",ct: [PATCH 1/6] MAINT: adept divisions for truedivideFollowing deprecations would cause problems otherwise.,4,5,5,numpy/random/tests/test_regression.py,[u'2'],1,1," -71,7 +71,7 ;",def test_call_within_randomstate(self);
2891,6,1c3fd27, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:51:45 +0200","ct: [PATCH 2/6] API: Deprecating the use of non-integers for indices argumentsThis changes the conversion utils to give deprecations for a allnon-integers (this currently includes python bools). The biggestchange is PyArray_PyIntAsIntp in which the deprecation is done.Some other conversions are then also pointed to it.Uses the Index machinery even for numpy types, which is fasterthen the current code.",1,132,185,numpy/core/src/multiarray/conversion_utils.c,[u'317'],11,16," -84,7 +84,7 ; -94,14 +94,15 ; -117,7 +118,7 ; -187,7 +188,7 ; -223,9 +224,9 ; -233,7 +234,7 ; -249,14 +250,14 ; -272,7 +273,7 ; -529,8 +530,8 ; -664,61 +665,104 ; -728,126 +772,54 ; -867,29 +839,11 ; -901,6 +855,7 ; -908,18 +863,10 ;","PyArray_OutputConverter(PyObject *object, PyArrayObject **address;PyArray_IntpConverter(PyObject *obj, PyArray_Dims *seq;PyArray_IntpConverter(PyObject *obj, PyArray_Dims *seq;PyArray_AxisConverter(PyObject *obj, int *axis;PyArray_ConvertMultiAxis(PyObject *axis_in, int ndim, npy_bool *out_axis_flags;PyArray_ConvertMultiAxis(PyObject *axis_in, int ndim, npy_bool *out_axis_flags;PyArray_ConvertMultiAxis(PyObject *axis_in, int ndim, npy_bool *out_axis_flags;PyArray_ConvertMultiAxis(PyObject *axis_in, int ndim, npy_bool *out_axis_flags;PyArray_ClipmodeConverter(PyObject *object, NPY_CLIPMODE *val;PyArray_CastingConverter(PyObject *obj, NPY_CASTING *casting;PyArray_PyIntAsInt(PyObject *o;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;"
2891,6,b7f523f, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:53:59 +0200","ct: [PATCH 3/6] API: Deprecate __index__ for ndim > 0For example NumPy indexing treats np.ones(()) very differently fromnp.ones((1,)). It seems a bad idea to allow __index__ for arrays thatare not 0-d, as they cannot always be safely interpreted as integers.",1,6,0,numpy/core/src/multiarray/number.c,[u'6'],6,0," -840,6 +840,12 ;",array_index(PyArrayObject *v;
2891,6,66088d8, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:57:11 +0200","ct: [PATCH 4/6] MAINT: Remove non-integer deprecations which are no in PyIntAsIntpAlso removed old (commented) macro, the use of PyNumber_Index isnow actually implemented in PyIntAsIntp and not necessary here.",1,0,52,numpy/core/src/multiarray/iterators.c,[u'53'],1,34," -70,12 +70,6 ; -202,26 +196,8 ; -229,24 +205,6 ; -266,9 +224,6 ; -284,9 +239,6 ; -305,9 +257,6 ;","parse_index_entry(PyObject *op, npy_intp *step_size;parse_index(PyArrayObject *self, PyObject *op;slice_coerce_index(PyObject *o, npy_intp *v;slice_GetIndices(PySliceObject *r, npy_intp length;slice_GetIndices(PySliceObject *r, npy_intp length;slice_GetIndices(PySliceObject *r, npy_intp length;"
2891,6,1c32353, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:57:34 +0200",ct: [PATCH 5/6] MAINT: Remove deprecations from mapping.c...,1,7,42,numpy/core/src/multiarray/mapping.c,[u'49'],6,31," -554,26 +554,8 ; -1153,6 +1135,7 ; -1161,12 +1144,6 ; -1276,11 +1253,8 ; -1394,11 +1368,8 ; -1414,13 +1385,7 ;","array_subscript_simple(PyArrayObject *self, PyObject *op;_tuple_of_integers(PyObject *seq, npy_intp *vals, int maxvals;_tuple_of_integers(PyObject *seq, npy_intp *vals, int maxvals;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;array_subscript_nice(PyArrayObject *self, PyObject *op;array_subscript_nice(PyArrayObject *self, PyObject *op;"
2891,6,6af10f9, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 13 Apr 2013 09:58:00 +0200",ct: [PATCH 6/6] TST: Rework test_deprecations.py and add new tests.,1,187,107,numpy/core/tests/test_deprecations.py,[u'294'],21,13," -3,65 +3,127 ; -69,32 +131,26 ; -104,18 +160,21 ; -124,41 +183,10 ; -179,18 +207,19 ; -202,5 +231,56 ;",;class TestFloatScalarIndexDeprecation(object);def test_deprecations(self);def test_valid_not_deprecated(self);def test_deprecations(self);def test_valid_not_deprecated(self);
2888,7,699c697, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 14:42:12 -0700",ct: [PATCH 1/7] MAINT: Remove unneeded comment form arrayobject.h,1,0,11,numpy/core/include/numpy/arrayobject.h,[u'11'],0,11," -1,14 +1,3 ;",;
2888,7,cba2994, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 14:43:36 -0700",ct: [PATCH 2/7] MAINT: Remove unneeded include from ndarraytypes.h.,1,0,3,numpy/core/include/numpy/ndarraytypes.h,[u'3'],0,3," -1,9 +1,6 ;",;
2888,7,229979b, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 14:50:46 -0700","ct: [PATCH 3/7] MAINT: Add some macros to noprefix.hSome of these are probably new unprefixed macros, but adding themmakes for a bit more safety. The unprefixed macros will be deprecatedat some point, so this probably has no side effects.",1,22,7,numpy/core/include/numpy/noprefix.h,[u'29'],22,7," -64,10 +64,28 ; -113,9 +131,6 ;",;;
2888,7,d0a54c4, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 14:54:15 -0700",ct: [PATCH 4/7] MAINT: Gather NPY_SIZEOF* macros into one spot.,1,9,6,numpy/core/include/numpy/npy_common.h,[u'15'],9,6," -33,15 +33,22 ; -305,10 +312,6 ;","enum ;typedef struct { npy_longdouble real, imag; } npy_clongdouble;"
2888,7,e6d6042, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 14:57:30 -0700",ct: [PATCH 5/7] MAINT: Remove tabs from numpyconfig.h.,1,9,9,numpy/core/include/numpy/numpyconfig.h,[u'18'],9,9," -9,16 +9,16 ;",;
2888,7,d2122ea, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:01:45 -0700","ct: [PATCH 6/7] BUG: Fixup use of undefined macros and remove redundant code.The npy_config.h file used SIZEOF_DOUBLE and SIZEOF_LONG_DOUBLE, neitherof which was defined in the included config.h file. That was fixed byincluding numpyconfig.h. Doing so made the code dealing with Apple typesizes redundant as it is already present in numpyconfig.h, so it wasremoved.",1,2,18,numpy/core/src/private/npy_config.h,[u'20'],2,18," -2,6 +2,7 ; -10,7 +11,7 ; -24,21 +25,4 ;",;;;
2888,7,fbda719, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 18:01:03 -0700",ct: [PATCH 7/7] MAINT: Remove newly defined non-prefixed macros from noprefix.h.There was a chance that they could conflict with user defined macros.,1,0,15,numpy/core/include/numpy/noprefix.h,[u'15'],0,15," -64,26 +64,11 ;",;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/arraytypes.c.src,[u'6'],2,4," -4088,8 +4088,6 ; -4219,7 +4217,7 ; -4232,7 +4230,7 ;",set_typeinfo(PyObject *dict;set_typeinfo(PyObject *dict;set_typeinfo(PyObject *dict;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/conversion_utils.c,[u'14'],7,7," -742,7 +742,7 ; -774,9 +774,9 ; -869,7 +869,7 ; -879,7 +879,7 ; -908,7 +908,7 ; -1153,7 +1153,7 ;","PyArray_PyIntAsInt(PyObject *o;PyArray_PyIntAsIntp(PyObject *o;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntpFromSequence(PyObject *seq, npy_intp *vals, int maxvals;PyArray_IntTupleFromIntp(int len, npy_intp *vals;"
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/getset.c,[u'4'],2,2," -384,7 +384,7 ; -400,7 +400,7 ;",static PyObject ;static PyObject ;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/iterators.c,[u'4'],2,2," -1716,7 +1716,7 ; -1731,7 +1731,7 ;",arraymultiter_dealloc(PyArrayMultiIterObject *multi;arraymultiter_size_get(PyArrayMultiIterObject *self;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/mapping.h,[u'3'],2,1," -23,10 +23,11 ;",NPY_NO_EXPORT in;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/multiarraymodule.c,[u'4'],2,2," -3778,7 +3778,7 ; -3788,7 +3788,7 ;",setup_scalartypes(PyObject *NPY_UNUSED(dict);setup_scalartypes(PyObject *NPY_UNUSED(dict);
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/multiarray/scalartypes.c.src,[u'2'],1,1," -2939,7 +2939,7 ;",int_arrtype_hash(PyObject *obj;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/npymath/_signbit.c,[u'6'],3,3," -12,7 +12,7 ; -20,7 +20,7 ; -28,5 +28,5 ;",_npy_signbit_d(double x;_npy_signbit_d(double x;_npy_signbit_d(double x;
2887,1,1d6f543, Charles Harris <charlesr.harris@gmail.com>," Sat, 5 Jan 2013 15:15:44 -0700",ct: [PATCH] BUG: Replace unprefixed SIZEOF_* macros with prefixed versions.The sources don't define NPY_NO_PREFIX and consequently none of theunprefixed macros are defined. Using them can lead to some unexpectedresults.,9,25,26,numpy/core/src/scalarmathmodule.c.src,[u'8'],4,4," -24,7 +24,7 ; -72,7 +72,7 ; -203,8 +203,8 ;",";slonglong_overflow(npy_longlong a0, npy_longlong b0;static voi;"
2886,1,d2ca917, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 5 Jan 2013 11:50:50 +0100","ct: [PATCH] BUG: Fix byteswapping for complex scalarsDuring a cleanup, the fast paths were invalidated because SIZEOF_LONGDOUBLEwas not defined anymore and needs to be replaced with NPY_SIZEOF_LONGDOUBLE.The other SIZEOF macros still existed however so only complex long doublebroke because it switched to the already broken fast path.This commit fixes the fast path, and replaces all SIZEOF_ macros withinarraytypes.c.src with their corresponding NPY_SIZEOF_ macros.",2,28,25,numpy/core/src/multiarray/arraytypes.c.src,[u'29'],14,15," -946,9 +946,9 ; -1612,27 +1612,27 ; -1640,7 +1640,7 ; -1744,7 +1744,7 ; -1752,7 +1752,7 ; -1764,7 +1764,7 ; -1778,7 +1778,7 ; -1794,7 +1794,7 ; -1825,9 +1825,8 ;","HALF_to_@TYPE@(npy_half *ip, @type@ *op, npy_intp n;static voi;static voi;static voi;static voi;static voi;static voi;static voi;static voi;"
2886,1,d2ca917, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 5 Jan 2013 11:50:50 +0100","ct: [PATCH] BUG: Fix byteswapping for complex scalarsDuring a cleanup, the fast paths were invalidated because SIZEOF_LONGDOUBLEwas not defined anymore and needs to be replaced with NPY_SIZEOF_LONGDOUBLE.The other SIZEOF macros still existed however so only complex long doublebroke because it switched to the already broken fast path.This commit fixes the fast path, and replaces all SIZEOF_ macros withinarraytypes.c.src with their corresponding NPY_SIZEOF_ macros.",2,28,25,numpy/core/tests/test_regression.py,[u'24'],14,10," -1296,16 +1296,20 ;",def test_misaligned_dot_product_objects(self);
2884,1,1899991, =?UTF-8?q?Juan=20Luis=20Cano=20Rodr=C3=ADguez?= <juanlu001@gmail.com>," Fri, 4 Jan 2013 12:31:51 +0100","ct: [PATCH] Fixed choice docstring, wrong default sizeCommit acf7421128b9d974d5153759650b7aaee3c2efec introduced a change in the handling of the `size` argument but the docstring wasn't updated accordingly. This commit fixes the issue.",1,0,0,numpy/random/mtrand/mtrand.pyx,[u'2'],1,1," -918,7 +918,7 ;",cdef class RandomState;
2883,1,dcc5c79, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_errstate.py,[u'4'],2,0," -8,11 +8,15 ;",;
2883,1,dcc5c79, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_half.py,[u'8'],1,2," -1,7 +1,9 ; -357,8 +359,8 ;",;def test_half_coercion(self);
2883,1,dcc5c79, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_numeric.py,[u'89'],17,17," -1,13 +1,13 ; -246,6 +246,7 ; -345,7 +346,7 ; -740,7 +741,7 ; -749,7 +750,7 ; -759,7 +760,7 ; -768,8 +769,8 ; -777,7 +778,7 ; -787,9 +788,8 ; -797,7 +797,7 ; -806,7 +806,7 ; -816,7 +816,7 ; -827,7 +827,7 ; -838,7 +838,7 ; -849,7 +849,7 ; -860,7 +860,7 ; -871,7 +871,7 ; -881,7 +881,7 ; -891,7 +891,7 ; -904,7 +904,7 ; -913,7 +913,7 ; -923,7 +923,7 ; -932,7 +932,7 ; -941,7 +941,7 ; -950,7 +950,7 ; -960,7 +960,7 ; -971,7 +971,7 ; -982,7 +982,7 ; -993,7 +993,7 ; -1003,7 +1003,7 ; -1015,7 +1015,7 ; -1025,7 +1025,7 ; -1036,7 +1036,7 ; -1047,7 +1047,7 ; -1058,7 +1058,7 ; -1069,7 +1069,7 ; -1080,7 +1080,7 ; -1090,7 +1090,7 ; -1100,8 +1100,7 ; -1129,7 +1128,7 ; -1149,7 +1148,7 ;",";def test_set(self);def test_floating_exceptions(self);def _generate_int32_data(self, n, m);def test_simple_double(self);def test_simple_int(self);def test_array_double(self);def test_simple_nonnative(self);def test_simple_nonnative(self);def test_simple_complex(self);def test_simple_complex(self);def test_clip_non_contig(self);def test_simple_out(self);def test_simple_int32_inout(self);def test_simple_int64_out(self);def test_simple_int64_inout(self);def test_simple_int32_out(self);def test_simple_inplace_01(self);def test_simple_inplace_02(self);def test_noncontig_inplace(self);def test_type_cast_01(self);def test_type_cast_02(self);def test_type_cast_03(self);def test_type_cast_04(self);def test_type_cast_05(self);def test_type_cast_06(self);def test_type_cast_07(self);def test_type_cast_08(self);def test_type_cast_09(self);def test_type_cast_10(self);def test_type_cast_11(self);def test_type_cast_12(self);def test_clip_with_out_simple(self);def test_clip_with_out_simple2(self);def test_clip_with_out_simple_int32(self);def test_clip_with_out_array_int32(self);def test_clip_with_out_array_outint32(self);def test_clip_inplace_array(self);def test_clip_inplace_simple(self);def tst_not_allclose(self,x,y);def test_ip_allclose(self);"
2883,1,dcc5c79, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_umath_complex.py,[u'2'],1,1," -151,6 +151,7 ; -477,7 +478,6 ;","def test_simple(self);def g(a, b);"
2882,3,2be873f, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 16:42:48 +0100","ct: [PATCH 1/3] BUG: Fix CheckStrides and strides setter checks for available memoryThis changes the logic of PyArray_CheckStrides to really check thefull extent the new array will have. It also changes the stridesetting to calculate the full real extent of the underlying arraywithout assuming (usually correctly) that the strides of the basearray are regular.Add some tests for cases that previously failed.This ""closes Issue gh-2503""",3,55,15,numpy/core/src/multiarray/arrayobject.c,[u'26'],20,6," -1464,20 +1464,34 ;","PyArray_CheckStrides(int elsize, int nd, npy_intp numbytes, npy_intp offset;"
2882,3,2be873f, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 16:42:48 +0100","ct: [PATCH 1/3] BUG: Fix CheckStrides and strides setter checks for available memoryThis changes the logic of PyArray_CheckStrides to really check thefull extent the new array will have. It also changes the stridesetting to calculate the full real extent of the underlying arraywithout assuming (usually correctly) that the strides of the basearray are regular.Add some tests for cases that previously failed.This ""closes Issue gh-2503""",3,55,15,numpy/core/src/multiarray/getset.c,[u'28'],24,4," -102,7 +102,11 ; -136,12 +140,28 ;","array_strides_set(PyArrayObject *self, PyObject *obj;array_strides_set(PyArrayObject *self, PyObject *obj;"
2882,3,2be873f, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 16:42:48 +0100","ct: [PATCH 1/3] BUG: Fix CheckStrides and strides setter checks for available memoryThis changes the logic of PyArray_CheckStrides to really check thefull extent the new array will have. It also changes the stridesetting to calculate the full real extent of the underlying arraywithout assuming (usually correctly) that the strides of the basearray are regular.Add some tests for cases that previously failed.This ""closes Issue gh-2503""",3,55,15,numpy/core/tests/test_multiarray.py,[u'16'],11,5," -97,16 +97,17 ; -122,7 +123,12 ;","def test_dtypeattr(self);def make_array(size, offset, strides);"
2882,3,0aaf70b, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 23:49:55 +0100",ct: [PATCH 2/3] MAINT: Move offset calculations into special functionAlso adds a test to check offset calculation is correct whensetting strides for a base array with negative strides.,5,61,42,numpy/core/src/multiarray/arrayobject.c,[u'27'],8,19," -1466,31 +1466,20 ;","PyArray_CheckStrides(int elsize, int nd, npy_intp numbytes, npy_intp offset;"
2882,3,0aaf70b, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 23:49:55 +0100",ct: [PATCH 2/3] MAINT: Move offset calculations into special functionAlso adds a test to check offset calculation is correct whensetting strides for a base array with negative strides.,5,61,42,numpy/core/src/multiarray/common.c,[u'30'],30,0," -674,3 +674,33 ;",_IsWriteable(PyArrayObject *ap;
2882,3,0aaf70b, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 23:49:55 +0100",ct: [PATCH 2/3] MAINT: Move offset calculations into special functionAlso adds a test to check offset calculation is correct whensetting strides for a base array with negative strides.,5,61,42,numpy/core/src/multiarray/common.h,[u'5'],5,0," -57,6 +57,11 ;",_IsAligned(PyArrayObject *ap);
2882,3,0aaf70b, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 23:49:55 +0100",ct: [PATCH 2/3] MAINT: Move offset calculations into special functionAlso adds a test to check offset calculation is correct whensetting strides for a base array with negative strides.,5,61,42,numpy/core/src/multiarray/getset.c,[u'33'],10,23," -102,11 +102,9 ; -141,28 +139,17 ;","array_strides_set(PyArrayObject *self, PyObject *obj;array_strides_set(PyArrayObject *self, PyObject *obj;"
2882,3,0aaf70b, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 3 Jan 2013 23:49:55 +0100",ct: [PATCH 2/3] MAINT: Move offset calculations into special functionAlso adds a test to check offset calculation is correct whensetting strides for a base array with negative strides.,5,61,42,numpy/core/tests/test_multiarray.py,[u'8'],8,0," -130,6 +130,14 ;","def set_strides(arr, strides);"
2882,3,1981d06, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 4 Jan 2013 23:13:30 +0100",ct: [PATCH 3/3] MAINT: Minor cleanupAdding const and removing old comment.,3,6,7,numpy/core/src/multiarray/common.c,[u'6'],3,3," -677,9 +677,9 ;",_IsWriteable(PyArrayObject *ap;
2882,3,1981d06, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 4 Jan 2013 23:13:30 +0100",ct: [PATCH 3/3] MAINT: Minor cleanupAdding const and removing old comment.,3,6,7,numpy/core/src/multiarray/common.h,[u'6'],3,3," -58,9 +58,9 ;",NPY_NO_EXPORT npy_boo;
2882,3,1981d06, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 4 Jan 2013 23:13:30 +0100",ct: [PATCH 3/3] MAINT: Minor cleanupAdding const and removing old comment.,3,6,7,numpy/core/src/multiarray/getset.c,[u'1'],0,1," -138,7 +138,6 ;","array_strides_set(PyArrayObject *self, PyObject *obj;"
2879,3,9ff6aed, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH 1/3] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_errstate.py,[u'4'],2,0," -8,11 +8,15 ;",;
2879,3,9ff6aed, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH 1/3] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_half.py,[u'8'],1,2," -1,7 +1,9 ; -357,8 +359,8 ;",;def test_half_coercion(self);
2879,3,9ff6aed, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH 1/3] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_numeric.py,[u'89'],17,17," -1,13 +1,13 ; -246,6 +246,7 ; -345,7 +346,7 ; -740,7 +741,7 ; -749,7 +750,7 ; -759,7 +760,7 ; -768,8 +769,8 ; -777,7 +778,7 ; -787,9 +788,8 ; -797,7 +797,7 ; -806,7 +806,7 ; -816,7 +816,7 ; -827,7 +827,7 ; -838,7 +838,7 ; -849,7 +849,7 ; -860,7 +860,7 ; -871,7 +871,7 ; -881,7 +881,7 ; -891,7 +891,7 ; -904,7 +904,7 ; -913,7 +913,7 ; -923,7 +923,7 ; -932,7 +932,7 ; -941,7 +941,7 ; -950,7 +950,7 ; -960,7 +960,7 ; -971,7 +971,7 ; -982,7 +982,7 ; -993,7 +993,7 ; -1003,7 +1003,7 ; -1015,7 +1015,7 ; -1025,7 +1025,7 ; -1036,7 +1036,7 ; -1047,7 +1047,7 ; -1058,7 +1058,7 ; -1069,7 +1069,7 ; -1080,7 +1080,7 ; -1090,7 +1090,7 ; -1100,8 +1100,7 ; -1129,7 +1128,7 ; -1149,7 +1148,7 ;",";def test_set(self);def test_floating_exceptions(self);def _generate_int32_data(self, n, m);def test_simple_double(self);def test_simple_int(self);def test_array_double(self);def test_simple_nonnative(self);def test_simple_nonnative(self);def test_simple_complex(self);def test_simple_complex(self);def test_clip_non_contig(self);def test_simple_out(self);def test_simple_int32_inout(self);def test_simple_int64_out(self);def test_simple_int64_inout(self);def test_simple_int32_out(self);def test_simple_inplace_01(self);def test_simple_inplace_02(self);def test_noncontig_inplace(self);def test_type_cast_01(self);def test_type_cast_02(self);def test_type_cast_03(self);def test_type_cast_04(self);def test_type_cast_05(self);def test_type_cast_06(self);def test_type_cast_07(self);def test_type_cast_08(self);def test_type_cast_09(self);def test_type_cast_10(self);def test_type_cast_11(self);def test_type_cast_12(self);def test_clip_with_out_simple(self);def test_clip_with_out_simple2(self);def test_clip_with_out_simple_int32(self);def test_clip_with_out_array_int32(self);def test_clip_with_out_array_outint32(self);def test_clip_inplace_array(self);def test_clip_inplace_simple(self);def tst_not_allclose(self,x,y);def test_ip_allclose(self);"
2879,3,9ff6aed, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:36:31 +0100",ct: [PATCH 1/3] TST: skip floating point warning test failures on ARM.  Closes gh-413.,4,54,49,numpy/core/tests/test_umath_complex.py,[u'2'],1,1," -151,6 +151,7 ; -477,7 +478,6 ;","def test_simple(self);def g(a, b);"
2879,3,bcbfea4, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 2 Jan 2013 20:41:00 +0100",ct: [PATCH 2/3] MAINT: remove painful to look at exec statement from np.errstate test.,1,16,28,numpy/core/tests/test_errstate.py,[u'44'],14,25," -1,41 +1,30 ; -48,14 +37,13 ;",;def test_divide(self);
2879,3,8c05bdb, Ralf Gommers <ralf.gommers@googlemail.com>," Thu, 3 Jan 2013 16:48:55 +0100","ct: [PATCH 3/3] TST: remove Python 2.4 and 2.5 testing from Travis config.Done because for 1.8 we're not supporting these Python versions anymore,and this PR break 2.4 compatibility.",2,0,50,.travis-make-py24-virtualenv.sh,[u'25'],0,25," -1,25 +0,0 ;",;
2879,3,8c05bdb, Ralf Gommers <ralf.gommers@googlemail.com>," Thu, 3 Jan 2013 16:48:55 +0100","ct: [PATCH 3/3] TST: remove Python 2.4 and 2.5 testing from Travis config.Done because for 1.8 we're not supporting these Python versions anymore,and this PR break 2.4 compatibility.",2,0,50,.travis.yml,[u'25'],0,25," -2,27 +2,12 ; -30,16 +15,6 ;",;matrix;
2876,1,95199bc, Christoph Gohlke <cgohlke@uci.edu>," Tue, 1 Jan 2013 03:23:11 -0800",ct: [PATCH] Allow long integers for axes and window length arguments. Fixes issue #2855,1,15,14,numpy/fft/helper.py,[u'29'],15,14," -5,10 +5,11 ; -58,7 +59,7 ; -106,7 +107,7 ; -121,8 +122,8 ; -136,7 +137,7 ; -153,7 +154,7 ; -168,11 +169,11 ; -209,7 +210,7 ;",";def fftshift(x, axes=None);def ifftshift(x, axes=None);def fftfreq(n, d=1.0);def fftfreq(n, d=1.0);def fftfreq(n, d=1.0);def fftfreq(n, d=1.0);def rfftfreq(n, d=1.0);"
2875,21,87d884e, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Tue, 1 Jan 2013 10:02:50 +0100","ct: [PATCH 01/21] Add nans, infs, nans_like, infs_like convenience functions",1,139,0,numpy/core/numeric.py,[u'140'],49,1," -40,7 +40,9 ; -223,6 +225,142 ;",";def ones_like(a, dtype=None, order='K', subok=True);"
2875,21,6c5ef34, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Tue, 1 Jan 2013 10:10:18 +0100",ct: [PATCH 02/21] Add more related functions,1,5,0,numpy/core/numeric.py,[u'5'],5,0," -243,9 +243,11 ; -283,10 +285,12 ; -311,6 +315,7 ;","def nans(shape, dtype=None, order='C');def nans_like(a, dtype=None, order='K', subok=True);def infs(shape, dtype=None, order='C');"
2875,21,0fe4df2, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Tue, 1 Jan 2013 10:13:03 +0100",ct: [PATCH 03/21] Add short note in doc string about dtype for non-numbers,1,12,0,numpy/core/numeric.py,[u'12'],12,0," -235,6 +235,9 ; -260,6 +263,9 ; -303,6 +309,9 ; -328,6 +337,9 ;","def nans(shape, dtype=None, order='C');def nans_like(a, dtype=None, order='K', subok=True);def infs(shape, dtype=None, order='C');def infs_like(a, dtype=None, order='K', subok=True);"
2875,21,25f9d8c, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Tue, 1 Jan 2013 10:13:54 +0100",ct: [PATCH 04/21] Fix typo in doc string,1,4,4,numpy/core/numeric.py,[u'8'],4,4," -235,7 +235,7 ; -263,7 +263,7 ; -309,7 +309,7 ; -337,7 +337,7 ;","def nans(shape, dtype=None, order='C');def nans_like(a, dtype=None, order='K', subok=True);def infs(shape, dtype=None, order='C');def infs_like(a, dtype=None, order='K', subok=True);"
2875,21,17c6214, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 12:13:01 +0100","ct: [PATCH 05/21] Replace nans, nans_like, infs, infs_like with filled functions",1,15,93,numpy/core/numeric.py,[u'108'],7,43," -40,9 +40,7 ; -231,41 +229,38 ; -273,6 +268,8 ; -291,91 +288,16 ;",";def _check_dtype_nan(dtype);def nans_like(a, dtype=None, order='K', subok=True);def nans_like(a, dtype=None, order='K', subok=True);"
2875,21,27f0781, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 12:14:13 +0100",ct: [PATCH 06/21] Fix doc string,1,0,3,numpy/core/numeric.py,[u'4'],1,3," -259,9 +259,7 ;","def filled(shape, val, dtype=None, order='C');"
2875,21,474ec48, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 12:51:02 +0100",ct: [PATCH 07/21] Add tests for filled_like function,2,54,21,numpy/core/numeric.py,[u'10'],0,7," -223,12 +223,6 ; -251,8 +245,6 ; -292,8 +284,6 ;","def ones_like(a, dtype=None, order='K', subok=True);def filled(shape, val, dtype=None, order='C');def filled_like(a, val, dtype=None, order='K', subok=True);"
2875,21,474ec48, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 12:51:02 +0100",ct: [PATCH 07/21] Add tests for filled_like function,2,54,21,numpy/core/tests/test_numeric.py,[u'65'],33,7," -1356,10 +1356,14 ; -1370,10 +1374,18 ; -1381,10 +1393,18 ; -1392,10 +1412,18 ; -1406,15 +1434,23 ; -1426,6 +1462,13 ;","def setUp(self);def check_like_function(self, like_function, value);def check_like_function(self, like_function, value);def check_like_function(self, like_function, value);def check_like_function(self, like_function, value);def test_zeros_like(self);"
2875,21,a677232, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 12:53:36 +0100",ct: [PATCH 08/21] Use commin method to compare array values,1,16,40,numpy/core/tests/test_numeric.py,[u'56'],12,28," -1356,6 +1356,18 ; -1373,16 +1385,7 ; -1392,16 +1395,7 ; -1411,16 +1405,7 ; -1433,16 +1418,7 ;","def setUp(self);def check_like_function(self, like_function, value, fill_value=False);def check_like_function(self, like_function, value, fill_value=False);def check_like_function(self, like_function, value, fill_value=False);def check_like_function(self, like_function, value, fill_value=False);"
2875,21,587b092, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 12:54:19 +0100",ct: [PATCH 09/21] Use more idiomatic way of None-check,1,0,0,numpy/core/tests/test_numeric.py,[u'2'],1,1," -1357,7 +1357,7 ;",def setUp(self);
2875,21,5be86a8, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 20:05:40 +0100",ct: [PATCH 10/21] Add filled_like to doc string of test class,1,0,0,numpy/core/tests/test_numeric.py,[u'2'],1,1," -1329,7 +1329,7 ;",def test_basic(self);
2875,21,5991bbe, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 20:45:41 +0100","ct: [PATCH 11/21] Add tests for zeros, ones, empty and filled",1,45,0,numpy/core/tests/test_numeric.py,[u'45'],40,0," -1328,6 +1328,51 ;",def test_basic(self);
2875,21,64d236c, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 20:49:41 +0100",ct: [PATCH 12/21] Comment test cases,1,10,6,numpy/core/tests/test_numeric.py,[u'16'],10,6," -1339,23 +1339,27 ;","def check_function(self, func, fill_value=None);"
2875,21,781cb48, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sun, 13 Jan 2013 20:54:19 +0100",ct: [PATCH 13/21] Add doc string to creation test class,1,2,0,numpy/core/tests/test_numeric.py,[u'2'],2,0," -1330,6 +1330,8 ;",def test_basic(self);
2875,21,dbc3558, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Mon, 14 Jan 2013 15:53:15 +0100",ct: [PATCH 14/21] Do not compare string or unicode values,1,0,0,numpy/core/tests/test_numeric.py,[u'2'],1,1," -1353,7 +1353,7 ;","def check_function(self, func, fill_value=None);"
2875,21,8ed3733, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Sat, 4 May 2013 21:23:51 +0200",ct: [PATCH 15/21] Fix Python 3 test cases for filled* functions,1,7,3,numpy/core/tests/test_numeric.py,[u'10'],7,3," -1348,12 +1348,12 ; -1363,7 +1363,11 ;","def check_function(self, func, fill_value=None);def check_function(self, func, fill_value=None);"
2875,21,494fa21, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Mon, 6 May 2013 21:06:02 +0200","ct: [PATCH 16/21] Add separate parameter description to filled, filled_like and ones",1,35,6,numpy/core/numeric.py,[u'41'],35,6," -137,7 +137,21 ; -227,12 +241,23 ; -267,11 +292,15 ;","def ones(shape, dtype=None, order='C');def filled(shape, val, dtype=None, order='C');def filled_like(a, val, dtype=None, order='K', subok=True);"
2875,21,91b1b99, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Mon, 6 May 2013 21:06:35 +0200",ct: [PATCH 17/21] Add examples to doc string of filled and filled_like,1,25,0,numpy/core/numeric.py,[u'25'],25,0," -269,6 +269,15 ; -312,6 +321,22 ;","def filled(shape, val, dtype=None, order='C');def filled_like(a, val, dtype=None, order='K', subok=True);"
2875,21,8b6ccd9, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Mon, 6 May 2013 21:51:39 +0200",ct: [PATCH 18/21] Rename fill value parameter for consistency across numpy+,2,11,11,numpy/core/numeric.py,[u'18'],9,9," -237,15 +237,15 ; -257,7 +257,7 ; -280,10 +280,10 ; -292,7 +292,7 ; -309,7 +309,7 ; -339,7 +339,7 ;","def ones_like(a, dtype=None, order='K', subok=True);def filled(shape, val, dtype=None, order='C');def filled(shape, val, dtype=None, order='C');def filled_like(a, val, dtype=None, order='K', subok=True);def filled_like(a, val, dtype=None, order='K', subok=True);def filled_like(a, val, dtype=None, order='K', subok=True);"
2875,21,8b6ccd9, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Mon, 6 May 2013 21:51:39 +0200",ct: [PATCH 18/21] Rename fill value parameter for consistency across numpy+,2,11,11,numpy/core/tests/test_numeric.py,[u'4'],2,2," -1340,7 +1340,7 ; -1425,7 +1425,7 ;","def setUp(self);def compare_array_value(self, dz, value, fill_value);"
2875,21,b4b20dc, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Mon, 6 May 2013 22:07:49 +0200",ct: [PATCH 19/21] Add filled and filled_like to changelog of 1.8.0,1,7,0,doc/release/1.8.0-notes.rst,[u'7'],7,0," -112,10 +112,17 ;",causes the returned array to be inverted;
2875,21,7759766, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Fri, 24 May 2013 19:10:11 +0200",ct: [PATCH 20/21] Update default dtype of filled function in doc string,1,0,0,numpy/core/numeric.py,[u'2'],1,1," -249,7 +249,7 ;","def filled(shape, fill_value, dtype=None, order='C');"
2875,21,70cb9e5, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Sun, 30 Jun 2013 12:31:39 +0200","ct: [PATCH 21/21] Rename filled, filled_like to full, full_like",3,22,22,doc/release/1.8.0-notes.rst,[u'2'],1,1," -117,7 +117,7 ;",It is now possible to use `np.newaxis`/`None` together with inde;
2875,21,70cb9e5, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Sun, 30 Jun 2013 12:31:39 +0200","ct: [PATCH 21/21] Rename filled, filled_like to full, full_like",3,22,22,numpy/core/numeric.py,[u'26'],13,13," -40,7 +40,7 ; -237,7 +237,7 ; -264,17 +264,17 ; -283,9 +283,9 ; -319,22 +319,22 ;",";def ones_like(a, dtype=None, order='K', subok=True);def filled(shape, fill_value, dtype=None, order='C');def filled(shape, fill_value, dtype=None, order='C');def filled_like(a, fill_value, dtype=None, order='K', subok=True);"
2875,21,70cb9e5, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <jschoenberger@demuc.de>," Sun, 30 Jun 2013 12:31:39 +0200","ct: [PATCH 21/21] Rename filled, filled_like to full, full_like",3,22,22,numpy/core/tests/test_numeric.py,[u'16'],8,8," -1379,12 +1379,12 ; -1494,11 +1494,11 ;",def test_empty(self);def test_empty_like(self);
2874,1,9e7f462, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Mon, 31 Dec 2012 13:35:05 -0800",ct: [PATCH] DOC: Add missing minus signThe int64 data type allows numbers from -9223372036854775808 to9223372036854775807. The minus sign was missing.,1,0,0,numpy/doc/basics.py,[u'2'],1,1," -17,7 +17,7 ;",;
2873,1,e615890, Sandro Tosi <morph@debian.org>," Sun, 30 Dec 2012 20:38:53 +0100",ct: [PATCH] fix array interface documentation links,2,2,2,doc/numpybook/numpybook.lyx,[u'2'],1,1," -18401,7 +18401,7 ;","name ""dtype!construction!from list;"
2873,1,e615890, Sandro Tosi <morph@debian.org>," Sun, 30 Dec 2012 20:38:53 +0100",ct: [PATCH] fix array interface documentation links,2,2,2,numpy/core/include/numpy/ndarraytypes.h,[u'2'],1,1," -1676,7 +1676,7 ;",typedef struct ;
2872,1,864353e, Sandro Tosi <morph@debian.org>," Sun, 30 Dec 2012 12:12:18 +0100",ct: [PATCH] move to www.numpy.org,4,4,4,bento.info,[u'2'],1,1," -1,7 +1,7 ;",;
2872,1,864353e, Sandro Tosi <morph@debian.org>," Sun, 30 Dec 2012 12:12:18 +0100",ct: [PATCH] move to www.numpy.org,4,4,4,doc/source/dev/gitwash/git_links.inc,[u'2'],1,1," -80,6 +80,6 ;",;
2872,1,864353e, Sandro Tosi <morph@debian.org>," Sun, 30 Dec 2012 12:12:18 +0100",ct: [PATCH] move to www.numpy.org,4,4,4,doc/source/dev/gitwash_links.txt,[u'2'],1,1," -1,3 +1,3 ;",;
2872,1,864353e, Sandro Tosi <morph@debian.org>," Sun, 30 Dec 2012 12:12:18 +0100",ct: [PATCH] move to www.numpy.org,4,4,4,setup.py,[u'2'],1,1," -47,7 +47,7 ;",;
2869,7,bcb3e69, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:05:31 +0100",ct: [PATCH 1/7] Add functions to convert between degrees and deg-min-sec,2,67,7,doc/source/reference/routines.math.rst,[u'2'],1,0," -21,6 +21,8 ;",Trigonometric function;
2869,7,bcb3e69, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:05:31 +0100",ct: [PATCH 1/7] Add functions to convert between degrees and deg-min-sec,2,67,7,numpy/lib/function_base.py,[u'72'],30,4," -7,7 +7,7 ; -1732,9 +1732,9 ; -1861,7 +1861,7 ; -1922,7 +1922,7 ; -1931,8 +1931,8 ; -3686,3 +3686,61 ;",";class vectorize(object);def __call__(self, *args, **kwargs);def _func(*vargs);def _vectorize_call(self, func, args);def append(arr, values, axis=None);"
2869,7,fd09edf, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:36:16 +0100",ct: [PATCH 2/7] Fix sign bug in deg2dms and integer division bug in dms2deg,1,14,5,numpy/lib/function_base.py,[u'19'],14,5," -3711,9 +3711,15 ; -3739,8 +3745,11 ;","def deg2dms(x, out=None);def dms2deg(x, out=None);"
2869,7,80c54c7, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:36:42 +0100",ct: [PATCH 3/7] Add test cases for deg2dms and dms2deg,1,13,0,numpy/lib/tests/test_function_base.py,[u'14'],13,1," -529,7 +529,7 ; -1426,6 +1426,18 ;",def test_execution_order_ticket_1487(self);def test_string_arg(self);
2869,7,9d0694f, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:39:52 +0100",ct: [PATCH 4/7] Add as related function to other functions,1,4,0,numpy/core/code_generators/ufunc_docstrings.py,[u'4'],4,0," -861,6 +861,8 ; -899,6 +901,8 ;","def add_newdoc(place, name, doc);def add_newdoc(place, name, doc);"
2869,7,1414f1a, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:41:11 +0100",ct: [PATCH 5/7] Add related functions to deg2dms and dms2deg,1,10,0,numpy/lib/function_base.py,[u'10'],10,0," -3699,6 +3699,11 ; -3735,6 +3740,11 ;","def deg2dms(x, out=None);def dms2deg(x, out=None);"
2869,7,88302ac, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:42:57 +0100",ct: [PATCH 6/7] Change order of sections in doc strings,1,10,10,numpy/lib/function_base.py,[u'20'],10,10," -3699,16 +3699,16 ; -3740,16 +3740,16 ;","def deg2dms(x, out=None);def dms2deg(x, out=None);"
2869,7,429d926, =?UTF-8?q?Johannes=20Sch=C3=B6nberger?= <hannesschoenberger@gmail.com>," Sat, 29 Dec 2012 19:47:35 +0100",ct: [PATCH 7/7] Add short examples to dms2deg and deg2dms,1,18,0,numpy/lib/function_base.py,[u'18'],18,0," -3709,6 +3709,15 ; -3750,6 +3759,15 ;","def deg2dms(x, out=None);def dms2deg(x, out=None);"
2866,2,82fc667, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Fri, 28 Dec 2012 13:25:04 -0800",ct: [PATCH 1/2] Update the C API version number,1,0,0,numpy/core/code_generators/cversions.txt,[u'2'],1,1," -10,4 +10,4 ;",;
2866,2,1cd02e0, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Fri, 28 Dec 2012 13:25:52 -0800",ct: [PATCH 2/2] REL: Release 1.7.0rc1,1,0,0,setup.py,[u'2'],1,1," -57,7 +57,7 ;",;
2864,1,e924692, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Fri, 28 Dec 2012 11:20:19 -0800",ct: [PATCH] BLD: Add support for Python 3.3 in paver,1,4,0,pavement.py,[u'4'],4,0," -138,6 +138,7 ; -148,6 +149,7 ; -159,6 +161,7 ; -171,6 +174,7 ;",;;;;
2863,1,678ad43," ""Nathaniel J. Smith"" <njs@pobox.com>"," Fri, 28 Dec 2012 13:00:06 +0000","ct: [PATCH] FIX: remove a spurious check in get_cast_transfer_functionAt least, I hope it's spurious. Certainly it's creating a spuriouserror message, is unexpected by callers (one of whom specificallymakes the *opposite* check before calling get_cast_transfer_function),and even if it is a useful check for some reason I can't see, itcertainly doesn't belong in this function (which is otherwise justtaking care of byte-swapping and alignment issues and doesn't knowanything about dtypes). And worst case, we'll have turned an exceptioninto a crash; even if I'm wrong, this shouldn't cause any code to gofrom working to not working, just from broken to slightly-more-broken.Test and original diagnosis by @cgohlke.Fixes gh-2798.",2,3,8,numpy/core/src/multiarray/dtype_transfer.c,[u'8'],0,8," -1475,14 +1475,6 ;",get_cast_transfer_function(int aligned;
2863,1,678ad43," ""Nathaniel J. Smith"" <njs@pobox.com>"," Fri, 28 Dec 2012 13:00:06 +0000","ct: [PATCH] FIX: remove a spurious check in get_cast_transfer_functionAt least, I hope it's spurious. Certainly it's creating a spuriouserror message, is unexpected by callers (one of whom specificallymakes the *opposite* check before calling get_cast_transfer_function),and even if it is a useful check for some reason I can't see, itcertainly doesn't belong in this function (which is otherwise justtaking care of byte-swapping and alignment issues and doesn't knowanything about dtypes). And worst case, we'll have turned an exceptioninto a crash; even if I'm wrong, this shouldn't cause any code to gofrom working to not working, just from broken to slightly-more-broken.Test and original diagnosis by @cgohlke.Fixes gh-2798.",2,3,8,numpy/core/tests/test_dtype.py,[u'3'],3,0," -443,6 +443,9 ;",def test_dtype_str_with_long_in_shape(self);
2861,2,c8decf2, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 27 Dec 2012 09:13:26 -0800","ct: [PATCH 1/2] DOC: Thoroughly document datetime issuesAfter understanding the issues with datetime (see gh-568), I have documented myunderstanding as comments in the code, so that the next time there are problemswith datetime on some platform, one can quickly figure out what is going onfrom the code + comments.",1,58,11,numpy/core/src/multiarray/datetime_strings.c,[u'69'],23,5," -24,7 +24,13 ; -34,8 +40,35 ; -154,7 +187,9 ; -169,17 +204,22 ; -195,6 +235,7 ; -213,7 +254,7 ; -233,17 +274,22 ; -286,7 +332,7 ; -1053,7 +1099,8 ;",";;get_mktime(struct tm *tms;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_local_to_utc(npy_datetimestruct *out_dts_utc;convert_datetimestruct_local_to_utc(npy_datetimestruct *out_dts_utc;make_iso_8601_datetime(npy_datetimestruct *dts, char *outstr, int outlen;"
2861,2,bae7330, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 27 Dec 2012 15:27:41 -0800",ct: [PATCH 2/2] DOC: Add a blank line to multiline commentsMultiline comments should begin with a blank line. This patch fixes it.,1,6,3,numpy/core/src/multiarray/datetime_strings.c,[u'9'],6,3," -24,7 +24,8 ; -204,7 +205,8 ; -274,7 +276,8 ;",;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_local_to_utc(npy_datetimestruct *out_dts_utc;
2859,2,92fc1eb, cgohlke <cgohlke@uci.edu>," Fri, 7 Dec 2012 15:10:13 -0800",ct: [PATCH 1/2] FIX `ValueError: low level cast function is for unequal type numbers` for object types,1,0,0,numpy/core/src/multiarray/dtype_transfer.c,[u'1'],1,0," -1476,6 +1476,7 ;",get_cast_transfer_function(int aligned;
2859,2,a21d440, cgohlke <cgohlke@uci.edu>," Fri, 21 Dec 2012 01:07:03 -0800",ct: [PATCH 2/2] Add test for issue #2798,1,5,0,numpy/core/tests/test_dtype.py,[u'5'],5,0," -443,6 +443,11 ;",def test_dtype_str_with_long_in_shape(self);
2858,2,75bb79c, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 27 Dec 2012 09:13:26 -0800","ct: [PATCH 1/2] DOC: Thoroughly document datetime issuesAfter understanding the issues with datetime (see gh-568), I have documented myunderstanding as comments in the code, so that the next time there are problemswith datetime on some platform, one can quickly figure out what is going onfrom the code + comments.",1,58,11,numpy/core/src/multiarray/datetime_strings.c,[u'69'],23,5," -24,7 +24,13 ; -34,8 +40,35 ; -154,7 +187,9 ; -169,17 +204,22 ; -195,6 +235,7 ; -213,7 +254,7 ; -233,17 +274,22 ; -286,7 +332,7 ; -1053,7 +1099,8 ;",";;get_mktime(struct tm *tms;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_local_to_utc(npy_datetimestruct *out_dts_utc;convert_datetimestruct_local_to_utc(npy_datetimestruct *out_dts_utc;make_iso_8601_datetime(npy_datetimestruct *dts, char *outstr, int outlen;"
2858,2,8a99edc, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 27 Dec 2012 15:27:41 -0800",ct: [PATCH 2/2] DOC: Add a blank line to multiline commentsMultiline comments should begin with a blank line. This patch fixes it.,1,6,3,numpy/core/src/multiarray/datetime_strings.c,[u'9'],6,3," -24,7 +24,8 ; -204,7 +205,8 ; -274,7 +276,8 ;",;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_local_to_utc(npy_datetimestruct *out_dts_utc;
2857,1,e54f750, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Wed, 26 Dec 2012 20:35:16 -0800","ct: [PATCH] FIX: Use the NPY_TIME_T macro everywherePreviously, two (critical) parts of the code used `time_t` instead of`NPY_TIME_T`. Due to the fact, that most of the time `NPY_TIME_T` was equal to`time_t`, this bug didn't show up. But in mingw, `NPY_TIME_T` is actually equalto `__time64_t` and then this causes 64 bit integers to be cast into 32 bitintegers (thus becoming negative), which causes localtime() to fail in mingw.Fixes gh-568.",1,2,2,numpy/core/src/multiarray/datetime_strings.c,[u'4'],2,2," -189,7 +189,7 ; -207,7 +207,7 ;",convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;
2856,1,15022cb, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Wed, 26 Dec 2012 20:35:16 -0800","ct: [PATCH] FIX: Use the NPY_TIME_T macro everywherePreviously, two (critical) parts of the code used `time_t` instead of`NPY_TIME_T`. Due to the fact, that most of the time `NPY_TIME_T` was equal to`time_t`, this bug didn't show up. But in mingw, `NPY_TIME_T` is actually equalto `__time64_t` and then this causes 64 bit integers to be cast into 32 bitintegers (thus becoming negative), which causes localtime() to fail in mingw.Fixes gh-568.",1,2,2,numpy/core/src/multiarray/datetime_strings.c,[u'4'],2,2," -189,7 +189,7 ; -207,7 +207,7 ;",convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;convert_datetimestruct_utc_to_local(npy_datetimestruct *out_dts_local;
2854,2,42e5b80, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 8 Dec 2012 14:07:46 +0100","ct: [PATCH 1/2] BUG: Fix regression for in1d with non-array inputThere was a regression introduced by the speed improvement incommit 6441c2a. This fixes it, and generally ravels the arrays fornp.in1d. However it can be argued that at least the first array shouldnot be ravelled in the future.Fixes ""Issue gh-2755""",2,7,2,numpy/lib/arraysetops.py,[u'4'],4,0," -324,6 +324,10 ;","def in1d(ar1, ar2, assume_unique=False);"
2854,2,42e5b80, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 8 Dec 2012 14:07:46 +0100","ct: [PATCH 1/2] BUG: Fix regression for in1d with non-array inputThere was a regression introduced by the speed improvement incommit 6441c2a. This fixes it, and generally ravels the arrays fornp.in1d. However it can be argued that at least the first array shouldnot be ravelled in the future.Fixes ""Issue gh-2755""",2,7,2,numpy/lib/tests/test_arraysetops.py,[u'5'],3,2," -124,8 +124,9 ;",def test_in1d(self);
2854,2,bffea7a, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 16 Dec 2012 05:50:43 +0100","ct: [PATCH 2/2] TST: Add test for in1d ravellingThe behavior of in1d is not really defined here, but it shouldbe at least consistent over different execution branches. This iswhat it has been for most usages.",1,13,0,numpy/lib/tests/test_arraysetops.py,[u'13'],13,0," -189,6 +189,19 ;",def test_in1d_char_array( self );
2853,6,86dbd45, Jay Bourque <jay.bourque@continuum.io>," Fri, 7 Dec 2012 11:12:38 -0600",ct: [PATCH 1/6] Fix invalid typestring sizeRevert to pre numpy 1.7 behavior where invalid typestring size was ignored and isplay deprecate warning. This warning should eventually be changed to an error in future numpy versions.,1,22,0,numpy/core/src/multiarray/conversion_utils.c,[u'22'],22,0," -954,6 +954,7 ; -1105,7 +1106,28 ;","NPY_NO_EXPORT in;PyArray_TypestrConvert(int itemsize, int gentype;"
2853,6,4237c6e, Jay Bourque <jay.bourque@continuum.io>," Tue, 11 Dec 2012 13:54:56 -0600",ct: [PATCH 2/6] Refactor to cover more cases; modify unit tests,3,38,30,numpy/core/src/multiarray/conversion_utils.c,[u'42'],16,12," -955,6 +955,8 ; -1106,28 +1108,32 ;","PyArray_TypestrConvert(int itemsize, int gentype;PyArray_TypestrConvert(int itemsize, int gentype;"
2853,6,4237c6e, Jay Bourque <jay.bourque@continuum.io>," Tue, 11 Dec 2012 13:54:56 -0600",ct: [PATCH 2/6] Refactor to cover more cases; modify unit tests,3,38,30,numpy/core/tests/test_datetime.py,[u'11'],4,4," -48,12 +48,11 ;",def test_datetime_dtype_creation(self);
2853,6,4237c6e, Jay Bourque <jay.bourque@continuum.io>," Tue, 11 Dec 2012 13:54:56 -0600",ct: [PATCH 2/6] Refactor to cover more cases; modify unit tests,3,38,30,numpy/core/tests/test_dtype.py,[u'15'],6,4," -47,13 +47,16 ;",def test_equivalent_dtype_hashing(self);
2853,6,18e73ab, Jay Bourque <jay.bourque@continuum.io>," Fri, 14 Dec 2012 14:09:29 -0600",ct: [PATCH 3/6] Modify unit tests for 32 bit support,1,17,2,numpy/core/tests/test_dtype.py,[u'19'],17,2," -51,11 +51,26 ;",def test_invalid_types(self);
2853,6,83de7cd, Jay Bourque <jay.bourque@continuum.io>," Mon, 17 Dec 2012 11:42:36 -0600",ct: [PATCH 4/6] Refactor unit tests and add DECREF- Refactor unit tests for invalid dtypes so that each test is on a separate line. This will make it easier to figure out which typestring is failing the unit test.- Add Py_DECREF for temp variable,2,11,7,numpy/core/src/multiarray/conversion_utils.c,[u'1'],1,0," -1121,6 +1121,7 ;","PyArray_TypestrConvert(int itemsize, int gentype;"
2853,6,83de7cd, Jay Bourque <jay.bourque@continuum.io>," Mon, 17 Dec 2012 11:42:36 -0600",ct: [PATCH 4/6] Refactor unit tests and add DECREF- Refactor unit tests for invalid dtypes so that each test is on a separate line. This will make it easier to figure out which typestring is failing the unit test.- Add Py_DECREF for temp variable,2,11,7,numpy/core/tests/test_dtype.py,[u'17'],10,7," -47,15 +47,20 ; -71,8 +76,6 ;",def test_equivalent_dtype_hashing(self);def test_invalid_types(self);
2853,6,0f5afde, Jay Bourque <jay.bourque@continuum.io>," Fri, 21 Dec 2012 13:39:19 -0600",ct: [PATCH 5/6] Add debug logging to figure out why unit test fails on Travis,1,10,0,numpy/core/src/multiarray/conversion_utils.c,[u'10'],10,0," -1116,9 +1116,19 ;","PyArray_TypestrConvert(int itemsize, int gentype;"
2853,6,1f1537e, Jay Bourque <jay.bourque@continuum.io>," Fri, 21 Dec 2012 14:29:52 -0600",ct: [PATCH 6/6] Add fix to unit test; remove debug loggingAdd check to see if 12 bytes is a valid size for a long double,2,5,11,numpy/core/src/multiarray/conversion_utils.c,[u'10'],0,10," -1116,19 +1116,9 ;","PyArray_TypestrConvert(int itemsize, int gentype;"
2853,6,1f1537e, Jay Bourque <jay.bourque@continuum.io>," Fri, 21 Dec 2012 14:29:52 -0600",ct: [PATCH 6/6] Add fix to unit test; remove debug loggingAdd check to see if 12 bytes is a valid size for a long double,2,5,11,numpy/core/tests/test_dtype.py,[u'6'],5,1," -60,7 +60,11 ;",def test_invalid_types(self);
2852,1,8ea667d, Matthew Brett <matthew.brett@gmail.com>," Mon, 24 Dec 2012 08:39:42 +0000",ct: [PATCH] ENH - .mailmap file to harmonize git shortlogReduce duplicates in git shortlog,1,20,0,.mailmap,[u'20'],20,0," -0,0 +1,20 ;",;
2851,1,fd4fd0d, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 20 Dec 2012 17:13:35 -0800","ct: [PATCH] TST: Replace Python 3.1 test with 3.3.Travis does not support 3.1 anymore, but supports 3.3. See:https://groups.google.com/d/topic/travis-ci/02iRu6kmwY8/discussion",1,0,0,.travis.yml,[u'2'],1,1," -5,8 +5,8 ;",python;
2850,1,834d32b, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 20 Dec 2012 17:13:35 -0800","ct: [PATCH] TST: Replace Python 3.1 test with 3.3.Travis does not support 3.1 anymore, but supports 3.3. See:https://groups.google.com/d/topic/travis-ci/02iRu6kmwY8/discussion",1,0,0,.travis.yml,[u'2'],1,1," -5,8 +5,8 ;",python;
2847,2,9af1b33, Nicolas Scheffer <scheffer@speech.sri.com>," Mon, 12 Nov 2012 12:00:28 -0800","ct: [PATCH 1/2] ENH: Remove the need for temporary copies in numpy.dotin numpy core, modified the blas function call to handleC and F order arrays without the need for copy.This brings a significant speed up for matrix multiplicationAdded a full test for matrix multiplication in test_blasdot",2,76,4,numpy/core/blasdot/_dotblas.c,[u'18'],10,2," -769,8 +769,8 ; -779,7 +779,7 ; -800,6 +800,18 ;","dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;"
2847,2,9af1b33, Nicolas Scheffer <scheffer@speech.sri.com>," Mon, 12 Nov 2012 12:00:28 -0800","ct: [PATCH 1/2] ENH: Remove the need for temporary copies in numpy.dotin numpy core, modified the blas function call to handleC and F order arrays without the need for copy.This brings a significant speed up for matrix multiplicationAdded a full test for matrix multiplication in test_blasdot",2,76,4,numpy/core/tests/test_blasdot.py,[u'62'],39,1," -88,4 +88,64 ;",def test_dot_3args_errors();
2847,2,f5205d2, Nicolas Scheffer <nicolas.scheffer@sri.com>," Mon, 12 Nov 2012 21:40:38 -0800",ct: [PATCH 2/2] Removed trailing printf statement,1,0,0,numpy/core/blasdot/_dotblas.c,[u'1'],0,1," -770,7 +770,6 ;","dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;"
2842,3,f5d883c, Skipper Seabold <jsseabold@gmail.com>," Tue, 25 Sep 2012 18:41:12 -0400",ct: [PATCH 1/3] TST: Add failing test for unicode array with object dtype,1,4,0,numpy/core/tests/test_arrayprint.py,[u'4'],4,0," -147,6 +147,10 ;",def test_formatter_reset(self);
2842,3,b3b367f, Skipper Seabold <jsseabold@gmail.com>," Tue, 25 Sep 2012 18:41:27 -0400",ct: [PATCH 2/3] BUG: Use numpystr for arrayprint fallback instead of str,1,0,0,numpy/core/arrayprint.py,[u'2'],1,1," -308,7 +308,7 ;","def _array2string(a, max_line_width, precision, suppress_small, separator=' ';"
2842,3,049ae4d, Skipper Seabold <jsseabold@gmail.com>," Wed, 26 Sep 2012 09:27:37 -0400",ct: [PATCH 3/3] TST: Change expected output for Python 3.,1,8,0,numpy/core/tests/test_arrayprint.py,[u'9'],8,1," -1,3 +1,5 ; -148,8 +150,13 ;",;def test_formatter_reset(self);
2841,1,de6f3b6, Ralf Gommers <ralf.gommers@googlemail.com>," Sun, 9 Sep 2012 09:33:29 +0200",ct: [PATCH] MAINT: update Intel Fortran compiler flags for the 21st century.Thanks to Intel for this contribution.Note that there's also an MKL application note which recommends these flags:http://software.intel.com/en-us/articles/numpyscipy-with-intel-mkl,1,16,55,numpy/distutils/fcompiler/intel.py,[u'71'],9,29," -43,61 +43,18 ; -111,7 +68,7 ; -144,7 +101,7 ; -152,11 +109,15 ;",class IntelFCompiler(BaseIntelFCompiler);def get_flags_linker_so(self);class IntelEM64TFCompiler(IntelFCompiler);class IntelEM64TFCompiler(IntelFCompiler);
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/core/code_generators/numpy_api.py,[u'1'],1,0," -330,6 +330,7 ;",;
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/core/src/multiarray/nditer_api.c,[u'9'],9,0," -845,6 +845,15 ;",NpyIter_IsGrowInner(NpyIter *iter;
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/core/src/multiarray/nditer_constr.c,[u'32'],13,18," -54,8 +54,7 ; -74,8 +73,7 ; -86,7 +84,7 ; -123,7 +121,7 ; -177,7 +175,7 ; -231,8 +229,7 ; -338,8 +335,7 ; -389,7 +385,7 ; -1439,8 +1435,7 ; -1560,7 +1555,7 ; -2398,8 +2393,7 ; -2698,7 +2692,7 ; -2729,7 +2723,7 ;","static in;npyiter_find_best_axis_ordering(NpyIter *iter);npyiter_allocate_arrays(NpyIter *iter;NpyIter_AdvancedNew(int nop, PyArrayObject **op_in, npy_uint32 flags;NpyIter_AdvancedNew(int nop, PyArrayObject **op_in, npy_uint32 flags;NpyIter_AdvancedNew(int nop, PyArrayObject **op_in, npy_uint32 flags;NpyIter_AdvancedNew(int nop, PyArrayObject **op_in, npy_uint32 flags;NpyIter_AdvancedNew(int nop, PyArrayObject **op_in, npy_uint32 flags;static in;npyiter_fill_axisdata(NpyIter *iter, npy_uint32 flags, npyiter_opitflags *op_it;npyiter_find_best_axis_ordering(NpyIter *iter;npyiter_allocate_arrays(NpyIter *iter;npyiter_allocate_arrays(NpyIter *iter;"
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/core/src/multiarray/nditer_impl.h,[u'3'],3,0," -101,6 +101,8 ; -215,6 +217,7 ;",;typedef npy_int16 npyiter_opitflags;
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/core/src/multiarray/nditer_pywrap.c,[u'4'],4,0," -1542,6 +1542,9 ; -1968,6 +1971,7 ;","static PyObject *npyiter_multi_index_get(NewNpyArrayIterObject *self;npyiter_seq_item(NewNpyArrayIterObject *self, Py_ssize_t i;"
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/lib/index_tricks.py,[u'3'],3,0," -533,6 +533,9 ;",class ndindex(object);
2840,3,8323b57, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 15:57:12 +0200","ct: [PATCH 1/3] BUG: Fix problems with ndindex and nditerThis fixes an issue with ndindex shape tuple recognition, and an issuein the nditer where scalar input did not produce an empty index tuple.To be able to fix nditer, an extra flag has been added: NPY_ITFLAG_SCALARand a new function NpyIter_IsScalar has been added to the nditer API.Also a few tests have been added to make sure the ndindex behaves asintended.",7,39,19,numpy/lib/tests/test_index_tricks.py,[u'6'],6,0," -241,6 +241,12 ;",def test_ndindex();
2840,3,272c1d6, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 17:00:30 +0200",ct: [PATCH 2/3] STY: Remove unnecessary whitespace changes,2,0,3,numpy/core/src/multiarray/nditer_impl.h,[u'1'],0,1," -217,7 +217,6 ;",typedef npy_int16 npyiter_opitflags;
2840,3,272c1d6, Han Genuit <hangenuit@gmail.com>," Wed, 19 Sep 2012 17:00:30 +0200",ct: [PATCH 2/3] STY: Remove unnecessary whitespace changes,2,0,3,numpy/core/src/multiarray/nditer_pywrap.c,[u'2'],0,2," -1812,7 +1812,6 ; -1971,7 +1970,6 ;","static PyObject *npyiter_has_delayed_bufalloc_get(NewNpyArrayIterObject *self;npyiter_seq_item(NewNpyArrayIterObject *self, Py_ssize_t i;"
2840,3,3cdd362, Han Genuit <hangenuit@gmail.com>," Thu, 20 Sep 2012 18:26:49 +0200",ct: [PATCH 3/3] API: Remove NpyIter_IsScalar from external API,2,0,2,numpy/core/code_generators/numpy_api.py,[u'1'],0,1," -330,7 +330,6 ;",;
2840,3,3cdd362, Han Genuit <hangenuit@gmail.com>," Thu, 20 Sep 2012 18:26:49 +0200",ct: [PATCH 3/3] API: Remove NpyIter_IsScalar from external API,2,0,2,numpy/core/src/multiarray/nditer_api.c,[u'2'],1,1," -844,7 +844,7 ;",NpyIter_IsGrowInner(NpyIter *iter;
2839,1,2050eb0," ""Nathaniel J. Smith"" <njs@pobox.com>"," Mon, 1 Oct 2012 17:36:01 +0100","ct: [PATCH] [FIX] preserve memory order in np.copy()This switches us back to the behaviour seen in numpy 1.6 and earlier,which it turns out that scikit-learn (and probably others) relied on.",3,34,3,numpy/add_newdocs.py,[u'5'],4,1," -3212,10 +3212,13 ;","def luf(lamdaexpr, *args, **kwargs);"
2839,1,2050eb0," ""Nathaniel J. Smith"" <njs@pobox.com>"," Mon, 1 Oct 2012 17:36:01 +0100","ct: [PATCH] [FIX] preserve memory order in np.copy()This switches us back to the behaviour seen in numpy 1.6 and earlier,which it turns out that scikit-learn (and probably others) relied on.",3,34,3,numpy/lib/function_base.py,[u'6'],4,2," -778,7 +778,7 ; -790,7 +790,9 ;","def select(condlist, choicelist, default=0);def copy(a, order='C');"
2839,1,2050eb0," ""Nathaniel J. Smith"" <njs@pobox.com>"," Mon, 1 Oct 2012 17:36:01 +0100","ct: [PATCH] [FIX] preserve memory order in np.copy()This switches us back to the behaviour seen in numpy 1.6 and earlier,which it turns out that scikit-learn (and probably others) relied on.",3,34,3,numpy/lib/tests/test_function_base.py,[u'26'],26,0," -42,6 +42,32 ;",def test_nd(self);
2838,1,36ea647, Charles Harris <charlesr.harris@gmail.com>," Sun, 16 Dec 2012 12:51:05 -0700","ct: [PATCH] TST: Add tests for constants.Test the values of np.pi, np.e, and np.euler_gamma to make surethey are correct to relative tolerance 1e-15.",1,13,0,numpy/core/tests/test_umath.py,[u'13'],13,0," -20,6 +20,19 ;",def tearDown(self);
2837,1,e208de6, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 15 Dec 2012 15:18:47 -0800",ct: [PATCH] FIX: Fixes the segfault in PyArray_FromScalarThe problem was that PyArray_NewFromDescr() steals a reference to typecode andso any further usage of it is undefined. Apparently this bug only appeared indebug version of Python 3.2. The fix is to simply INCREF typecode and thencarefully DECREF it at each possible exit from the function.Fixes gh-2738.,1,8,4,numpy/core/src/multiarray/scalarapi.c,[u'12'],8,4," -295,17 +295,20 ; -332,19 +335,20 ;","PyArray_FromScalar(PyObject *scalar, PyArray_Descr *outcode;PyArray_FromScalar(PyObject *scalar, PyArray_Descr *outcode;"
2836,1,2d2ae9c, cgohlke <cgohlke@uci.edu>," Sun, 16 Dec 2012 11:39:09 -0800",ct: [PATCH] Fix unicode tests for flexible string representation on Python 3.3,1,13,0,numpy/core/tests/test_unicode.py,[u'14'],13,1," -5,7 +5,19 ;",;
2835,2,e610b2b, Charles Harris <charlesr.harris@gmail.com>," Sun, 16 Dec 2012 11:46:21 -0700","ct: [PATCH 1/2] MAINT: Cleanup 1.8.0-notes.rst.Remove contents of 1.7.0-notes that were left when it was copied,note that support for Python 2.4 - 2.5 has been dropped, and notedeprecation of non-integer indices.",1,12,117,doc/release/1.8.0-notes.rst,[u'129'],5,39," -2,6 +2,10 ; -10,94 +14,20 ; -105,26 +35,6 ; -132,24 +42,9 ;",;Highlight;Change;Deprecation;
2835,2,5cd7e76, Charles Harris <charlesr.harris@gmail.com>," Sun, 16 Dec 2012 11:55:28 -0700",ct: [PATCH 2/2] DOC: Note that Euler's constant is exposed in numpy 1.8.0.,1,2,0,doc/release/1.8.0-notes.rst,[u'2'],2,0," -27,6 +27,8 ;","the scalar, but only if the scalar is read-only;"
2834,1,7f1f57d, Charles Harris <charlesr.harris@gmail.com>," Sun, 16 Dec 2012 11:11:36 -0700","ct: [PATCH] MAINT: Update and cleanup 1.7.0-notes.rst.The master branch version had diverged from the release branch.  Thisbrings them back into sync, adds a mention that Python 2.4 - 2.5 supporthas been dropped, corrects spelling errors, does some reformatting, andremoves trailing whitespace.",1,68,139,doc/release/1.7.0-notes.rst,[u'207'],15,29," -3,7 +3,8 ; -18,132 +19,69 ; -183,8 +121,7 ; -196,17 +133,13 ; -219,15 +152,15 ; -237,11 +170,10 ; -249,17 +181,6 ; -273,6 +194,10 ; -282,9 +207,13 ;",NumPy 1.7.0 Release Note;Highlight;New function isclos;those functions. New functions for evaluating 2-D and 3-D coefficien;New argument to searchsorte;Change;objects. For example the expression (3 and 'test') produces the strin;deprecated. The new `formatter` keyword in ``numpy.set_printoptions`` o;deprecations for PyArray_Descr* and other core objects in the future a;
2833,2,6d7bcd9, Charles Harris <charlesr.harris@gmail.com>," Sat, 15 Dec 2012 18:10:28 -0700",ct: [PATCH 1/2] MAINT: Refactor test_deprecations.pyRemove an unwanted print statement and make the verbose test outputmore readable.,1,113,89,numpy/core/tests/test_deprecations.py,[u'202'],19,15," -4,28 +4,50 ; -50,55 +72,56 ; -123,61 +146,62 ;",;class TestFloatScalarIndexDeprecation(object);class TestFloatSliceParameterDeprecation(object);
2833,2,b2ffc82, Charles Harris <charlesr.harris@gmail.com>," Sun, 16 Dec 2012 10:17:05 -0700","ct: [PATCH 2/2] MAINT: test_deprecations.py cleanups.Removed unneeded imports, corrected spelling, and put C functionreferences in double back-ticks.",1,33,34,numpy/core/tests/test_deprecations.py,[u'67'],17,18," -7,25 +7,24 ; -34,14 +33,15 ; -52,17 +52,16 ; -71,6 +70,7 ; -126,25 +126,24 ;",";def assert_deprecated(f, *args, **kwargs);def assert_not_deprecated(f, *args, **kwargs);class TestFloatScalarIndexDeprecation(object);def test_valid_not_deprecated(self);"
2831,1,3c23c9f, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 15 Dec 2012 15:18:47 -0800",ct: [PATCH] FIX: Fixes the segfault in PyArray_FromScalarThe problem was that PyArray_NewFromDescr() steals a reference to typecode andso any further usage of it is undefined. Apparently this bug only appeared indebug version of Python 3.2. The fix is to simply INCREF typecode and thencarefully DECREF it at each possible exit from the function.Fixes gh-2738.,1,8,4,numpy/core/src/multiarray/scalarapi.c,[u'12'],8,4," -295,17 +295,20 ; -332,19 +335,20 ;","PyArray_FromScalar(PyObject *scalar, PyArray_Descr *outcode;PyArray_FromScalar(PyObject *scalar, PyArray_Descr *outcode;"
2829,3,86436d8, peterjc <p.j.a.cock@googlemail.com>," Mon, 12 Nov 2012 11:50:18 +0000",ct: [PATCH 1/3] Include msvcr100 (MSVC v10 aka 2010) in msvc_runtime_library(),1,0,0,numpy/distutils/misc_util.py,[u'1'],1,0," -361,6 +361,7 ;",def msvc_runtime_library();
2829,3,0e1f9a3, peterjc <p.j.a.cock@googlemail.com>," Mon, 12 Nov 2012 11:55:05 +0000",ct: [PATCH 2/3] Cope with two digit major number in MSCV v10,1,4,0,numpy/distutils/mingw32ccompiler.py,[u'5'],4,1," -533,7 +533,10 ;",def check_embedded_msvcr_match_linked(msver);
2829,3,fec3a99, peterjc <p.j.a.cock@googlemail.com>," Mon, 12 Nov 2012 12:16:59 +0000",ct: [PATCH 3/3] Handle MSVC v10 in _MSVCRVER_TO_FULLVER,1,7,4,numpy/distutils/mingw32ccompiler.py,[u'11'],7,4," -461,13 +461,16 ;",def _build_import_library_x86();
2828,1,06973ed, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 15 Dec 2012 12:24:38 -0800",ct: [PATCH] DOC: Deprecate NPY_CHAR in release notesFixes gh-2801.,1,3,0,doc/release/1.7.0-notes.rst,[u'3'],3,0," -215,3 +215,6 ;",be used to replace these macros with the newer versions;
2827,1,11e4ebd, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 15 Dec 2012 12:14:54 -0800",ct: [PATCH] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.Conflicts:	numpy/random/mtrand/mtrand.c	numpy/random/mtrand/mtrand.pyx,3,1266,1074,numpy/random/mtrand/mtrand.c,[u'2328'],18,15," -1,4 +1,4 ; -53,12 +53,15 ; -1574,9 +1577,11 ; -1726,9 +1731,11 ; -1817,8 +1824,8 ; -1844,9 +1851,11 ; -1873,11 +1882,13 ; -1886,8 +1897,8 ; -1920,8 +1931,8 ; -1936,13 +1947,15 ; -1960,11 +1973,13 ; -1999,8 +2014,8 ; -2048,7 +2063,7 ; -2142,9 +2157,11 ; -2232,8 +2249,8 ; -2259,9 +2276,11 ; -2270,11 +2289,13 ; -2292,8 +2313,8 ; -2344,8 +2365,8 ; -2360,13 +2381,15 ; -2384,11 +2407,13 ; -2423,8 +2448,8 ; -2490,7 +2515,7 ; -2583,9 +2608,11 ; -2674,8 +2701,8 ; -2701,9 +2728,11 ; -2712,11 +2741,13 ; -2734,8 +2765,8 ; -2795,8 +2826,8 ; -2811,13 +2842,15 ; -2835,11 +2868,13 ; -2874,8 +2909,8 ; -2941,7 +2976,7 ; -3029,9 +3064,11 ; -3176,9 +3213,11 ; -3266,8 +3305,8 ; -3293,9 +3332,11 ; -3304,11 +3345,13 ; -3326,8 +3369,8 ; -3378,8 +3421,8 ; -3389,13 +3432,15 ; -3413,11 +3458,13 ; -3452,8 +3499,8 ; -3519,7 +3566,7 ; -3607,9 +3654,11 ; -3697,8 +3746,8 ; -3724,9 +3773,11 ; -3735,11 +3786,13 ; -3757,8 +3810,8 ; -3809,8 +3862,8 ; -3820,13 +3873,15 ; -3844,11 +3899,13 ; -3883,8 +3940,8 ; -3950,7 +4007,7 ; -4038,9 +4095,11 ; -4129,8 +4188,8 ; -4156,9 +4215,11 ; -4167,11 +4228,13 ; -4189,8 +4252,8 ; -4250,8 +4313,8 ; -4261,13 +4324,15 ; -4285,11 +4350,13 ; -4324,8 +4391,8 ; -4391,7 +4458,7 ; -4479,9 +4546,11 ; -4570,8 +4639,8 ; -4597,9 +4666,11 ; -4626,11 +4697,13 ; -4639,8 +4712,8 ; -4673,8 +4746,8 ; -4684,13 +4757,15 ; -4708,11 +4783,13 ; -4747,8 +4824,8 ; -4796,7 +4873,7 ; -5253,9 +5330,11 ; -5345,9 +5424,11 ; -5365,32 +5446,34 ; -5400,8 +5483,8 ; -5410,10 +5493,10 ; -5422,15 +5505,15 ; -5491,7 +5574,8 ; -5725,9 +5809,11 ; -5736,8 +5822,8 ; -5749,9 +5835,9 ; -5763,12 +5849,14 ; -5847,8 +5935,8 ; -5857,6 +5945,7 ; -6514,9 +6603,11 ; -7186,7 +7277,7 ; -7200,7 +7291,7 ; -7215,18 +7306,12 ; -7241,7 +7326,7 ; -7943,9 +8028,11 ; -7954,11 +8041,13 ; -8005,9 +8094,11 ; -8017,12 +8108,12 ; -8712,9 +8803,11 ; -8723,11 +8816,13 ; -9027,9 +9122,11 ; -9038,11 +9135,13 ; -9357,9 +9456,11 ; -9368,41 +9469,41 ; -9412,10 +9513,10 ; -9429,10 +9530,10 ; -9710,9 +9811,11 ; -9721,41 +9824,41 ; -9765,10 +9868,10 ; -9782,10 +9885,10 ; -10014,9 +10117,11 ; -10025,11 +10130,13 ; -10391,9 +10498,11 ; -10402,11 +10511,13 ; -10822,9 +10933,11 ; -10833,11 +10946,13 ; -10848,9 +10963,11 ; -10859,41 +10976,41 ; -10903,10 +11020,10 ; -10919,41 +11036,41 ; -10963,10 +11080,10 ; -10979,41 +11096,41 ; -11023,10 +11140,10 ; -11048,10 +11165,10 ; -11235,9 +11352,11 ; -11246,41 +11365,41 ; -11290,10 +11409,10 ; -11307,10 +11426,10 ; -11546,9 +11665,11 ; -11557,11 +11678,13 ; -11981,9 +12104,11 ; -11992,41 +12117,41 ; -12036,10 +12161,10 ; -12053,10 +12178,10 ; -12258,9 +12383,11 ; -12269,11 +12396,13 ; -12529,9 +12658,11 ; -12540,41 +12671,41 ; -12584,10 +12715,10 ; -12601,10 +12732,10 ; -12786,9 +12917,11 ; -12797,41 +12930,41 ; -12841,10 +12974,10 ; -12858,10 +12991,10 ; -13043,9 +13176,11 ; -13054,41 +13189,41 ; -13098,10 +13233,10 ; -13115,10 +13250,10 ; -14483,9 +14618,11 ; -14494,41 +14631,41 ; -14538,10 +14675,10 ; -14555,10 +14692,10 ; -15216,9 +15353,11 ; -15227,11 +15366,13 ; -15242,9 +15383,11 ; -15253,37 +15396,37 ; -15313,13 +15456,13 ; -15329,18 +15472,18 ; -15376,8 +15519,8 ; -15387,21 +15530,21 ; -15411,10 +15554,10 ; -15436,10 +15579,10 ; -15694,9 +15837,11 ; -15705,11 +15850,13 ; -16158,9 +16305,11 ; -16169,11 +16318,13 ; -16587,9 +16738,11 ; -16598,37 +16751,37 ; -16658,13 +16811,13 ; -16676,18 +16829,18 ; -16902,9 +17055,11 ; -16913,41 +17068,41 ; -16957,10 +17112,10 ; -16974,10 +17129,10 ; -17185,9 +17340,11 ; -17196,41 +17353,41 ; -17240,10 +17397,10 ; -17256,41 +17413,41 ; -17300,10 +17457,10 ; -17317,10 +17474,10 ; -17640,9 +17797,11 ; -17651,11 +17810,13 ; -17666,9 +17827,11 ; -17677,37 +17840,37 ; -17737,13 +17900,13 ; -17753,18 +17916,18 ; -17800,8 +17963,8 ; -17811,21 +17974,21 ; -17835,10 +17998,10 ; -17851,54 +18014,54 ; -18149,9 +18312,11 ; -18160,41 +18325,41 ; -18204,10 +18369,10 ; -18220,41 +18385,41 ; -18264,10 +18429,10 ; -18281,10 +18446,10 ; -19098,8 +19263,8 ; -19126,9 +19291,11 ; -19146,8 +19313,8 ; -19156,10 +19323,10 ; -19172,8 +19339,8 ; -19182,15 +19349,15 ; -19201,8 +19368,8 ; -19211,18 +19378,18 ; -19234,18 +19401,18 ; -19256,23 +19423,23 ; -19312,8 +19479,8 ; -19372,8 +19539,8 ; -19405,8 +19572,8 ; -19446,7 +19613,7 ; -19545,8 +19712,8 ; -19573,9 +19740,11 ; -19593,8 +19762,8 ; -19603,15 +19772,15 ; -19622,8 +19791,8 ; -19632,18 +19801,18 ; -19655,18 +19824,18 ; -19677,28 +19846,28 ; -19747,8 +19916,8 ; -19847,7 +20016,7 ; -22502,6 +22671,14 ; -24212,6 +24389,10 ; -24231,6 +24412,7 ;",";;static PyObject *__pyx_f_6mtrand_cont0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_disc0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discnp_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnmN_array_sc(rk_state *__pyx_v_state, __py;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discd_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_pf_6mtrand_11RandomState_4seed(struct __pyx_obj_6mtrand_;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_20randint(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;PyMODINIT_FUNC PyInit_mtrand(void;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;"
2827,1,11e4ebd, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 15 Dec 2012 12:14:54 -0800",ct: [PATCH] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.Conflicts:	numpy/random/mtrand/mtrand.c	numpy/random/mtrand/mtrand.pyx,3,1266,1074,numpy/random/mtrand/mtrand.pyx,[u'2'],1,1," -1022,7 +1022,7 ;",cdef class RandomState;
2827,1,11e4ebd, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Sat, 15 Dec 2012 12:14:54 -0800",ct: [PATCH] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.Conflicts:	numpy/random/mtrand/mtrand.c	numpy/random/mtrand/mtrand.pyx,3,1266,1074,numpy/random/tests/test_regression.py,[u'10'],1,0," -63,5 +63,15 ;",def test_shuffle_mixed_dimension(self);
2825,3,dd82d52, David Warde-Farley <wardefar@iro.umontreal.ca>," Sat, 15 Dec 2012 06:00:04 -0500","ct: [PATCH 1/3] ENH: Deprecation for invalid fancy index sequences.This raises a `DeprecationWarning` when a non-array fancy indexsequence a) is not a sequence of booleans b) contains somethingnot castable to npy_intp (i.e. a float). The way it gets thereis a bit shaky, but it works. I'd like to solicit feedback onthe best way to do this before merging.",1,59,0,numpy/core/src/multiarray/mapping.c,[u'59'],37,0," -1587,6 +1587,57 ; -1605,6 +1656,9 ; -1965,6 +2019,11 ;","_nonzero_indices(PyObject *myBool, PyArrayIterObject **iters;_convert_obj(PyObject *obj, PyArrayIterObject **iter;PyArray_MapIterNew(PyObject *indexobj, int oned, int fancy;"
2825,3,9b11d07, David Warde-Farley <wardefar@iro.umontreal.ca>," Sat, 15 Dec 2012 08:26:26 -0500",ct: [PATCH 2/3] TST: test for new fancy index deprecations.,1,64,0,numpy/core/tests/test_deprecations.py,[u'64'],35,0," -181,3 +181,67 ;",def test_valid_not_deprecated(self);
2825,3,4699a1b, David Warde-Farley <wardefar@iro.umontreal.ca>," Sat, 15 Dec 2012 08:42:42 -0500",ct: [PATCH 3/3] ENH: Only call _verify_index if not an array.The array case is already handled correctly via an exception.,1,3,5,numpy/core/src/multiarray/mapping.c,[u'8'],3,5," -1656,7 +1656,7 ; -2019,10 +2019,8 ;","_convert_obj(PyObject *obj, PyArrayIterObject **iter;PyArray_MapIterNew(PyObject *indexobj, int oned, int fancy;"
2823,1,83d890e, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 15 Dec 2012 00:31:14 +0100",ct: [PATCH] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.,3,1079,1263,numpy/random/mtrand/mtrand.c,[u'2330'],15,18," -1,4 +1,4 ; -53,15 +53,12 ; -1585,11 +1582,9 ; -1739,11 +1734,9 ; -1832,8 +1825,8 ; -1859,11 +1852,9 ; -1890,13 +1881,11 ; -1905,8 +1894,8 ; -1939,8 +1928,8 ; -1955,15 +1944,13 ; -1981,13 +1968,11 ; -2022,8 +2007,8 ; -2071,7 +2056,7 ; -2165,11 +2150,9 ; -2257,8 +2240,8 ; -2284,11 +2267,9 ; -2297,13 +2278,11 ; -2321,8 +2300,8 ; -2373,8 +2352,8 ; -2389,15 +2368,13 ; -2415,13 +2392,11 ; -2456,8 +2431,8 ; -2523,7 +2498,7 ; -2616,11 +2591,9 ; -2709,8 +2682,8 ; -2736,11 +2709,9 ; -2749,13 +2720,11 ; -2773,8 +2742,8 ; -2834,8 +2803,8 ; -2850,15 +2819,13 ; -2876,13 +2843,11 ; -2917,8 +2882,8 ; -2984,7 +2949,7 ; -3072,11 +3037,9 ; -3221,11 +3184,9 ; -3313,8 +3274,8 ; -3340,11 +3301,9 ; -3353,13 +3312,11 ; -3377,8 +3334,8 ; -3429,8 +3386,8 ; -3440,15 +3397,13 ; -3466,13 +3421,11 ; -3507,8 +3460,8 ; -3574,7 +3527,7 ; -3662,11 +3615,9 ; -3754,8 +3705,8 ; -3781,11 +3732,9 ; -3794,13 +3743,11 ; -3818,8 +3765,8 ; -3870,8 +3817,8 ; -3881,15 +3828,13 ; -3907,13 +3852,11 ; -3948,8 +3891,8 ; -4015,7 +3958,7 ; -4103,11 +4046,9 ; -4196,8 +4137,8 ; -4223,11 +4164,9 ; -4236,13 +4175,11 ; -4260,8 +4197,8 ; -4321,8 +4258,8 ; -4332,15 +4269,13 ; -4358,13 +4293,11 ; -4399,8 +4332,8 ; -4466,7 +4399,7 ; -4554,11 +4487,9 ; -4647,8 +4578,8 ; -4674,11 +4605,9 ; -4705,13 +4634,11 ; -4720,8 +4647,8 ; -4754,8 +4681,8 ; -4765,15 +4692,13 ; -4791,13 +4716,11 ; -4832,8 +4755,8 ; -4881,7 +4804,7 ; -5338,11 +5261,9 ; -5432,11 +5353,9 ; -5454,34 +5373,32 ; -5491,8 +5408,8 ; -5501,10 +5418,10 ; -5513,15 +5430,15 ; -5582,8 +5499,7 ; -5817,11 +5733,9 ; -5830,8 +5744,8 ; -5843,9 +5757,9 ; -5857,14 +5771,12 ; -5943,8 +5855,8 ; -5953,7 +5865,6 ; -6611,11 +6522,9 ; -7347,7 +7256,7 ; -7361,7 +7270,7 ; -7376,18 +7285,12 ; -7402,7 +7305,7 ; -7426,7 +7329,7 ; -8340,11 +8243,9 ; -8353,13 +8254,11 ; -8406,11 +8305,9 ; -8420,10 +8317,10 ; -9115,11 +9012,9 ; -9128,13 +9023,11 ; -9434,11 +9327,9 ; -9447,13 +9338,11 ; -9768,11 +9657,9 ; -9781,41 +9668,41 ; -9825,10 +9712,10 ; -9842,10 +9729,10 ; -10123,11 +10010,9 ; -10136,41 +10021,41 ; -10180,10 +10065,10 ; -10197,10 +10082,10 ; -10429,11 +10314,9 ; -10442,13 +10325,11 ; -10810,11 +10691,9 ; -10823,13 +10702,11 ; -11245,11 +11122,9 ; -11258,13 +11133,11 ; -11275,11 +11148,9 ; -11288,41 +11159,41 ; -11332,10 +11203,10 ; -11348,41 +11219,41 ; -11392,10 +11263,10 ; -11408,41 +11279,41 ; -11452,10 +11323,10 ; -11477,10 +11348,10 ; -11664,11 +11535,9 ; -11677,42 +11546,42 ; -11721,10 +11590,10 ; -11738,10 +11607,10 ; -11977,11 +11846,9 ; -11990,13 +11857,11 ; -12416,11 +12281,9 ; -12429,41 +12292,41 ; -12473,10 +12336,10 ; -12490,10 +12353,10 ; -12695,11 +12558,9 ; -12708,13 +12569,11 ; -12970,11 +12829,9 ; -12983,41 +12840,41 ; -13027,10 +12884,10 ; -13044,10 +12901,10 ; -13229,11 +13086,9 ; -13242,41 +13097,41 ; -13286,10 +13141,10 ; -13303,10 +13158,10 ; -13488,11 +13343,9 ; -13501,41 +13354,41 ; -13545,10 +13398,10 ; -13562,10 +13415,10 ; -14930,11 +14783,9 ; -14943,41 +14794,41 ; -14987,10 +14838,10 ; -15004,10 +14855,10 ; -15665,11 +15516,9 ; -15678,13 +15527,11 ; -15695,11 +15542,9 ; -15708,37 +15553,37 ; -15768,13 +15613,13 ; -15784,18 +15629,18 ; -15831,8 +15676,8 ; -15842,21 +15687,21 ; -15866,10 +15711,10 ; -15891,10 +15736,10 ; -16149,11 +15994,9 ; -16162,13 +16005,11 ; -16617,11 +16458,9 ; -16630,13 +16469,11 ; -17050,11 +16887,9 ; -17063,37 +16898,37 ; -17123,13 +16958,13 ; -17141,18 +16976,18 ; -17367,11 +17202,9 ; -17380,41 +17213,41 ; -17424,10 +17257,10 ; -17441,10 +17274,10 ; -17652,11 +17485,9 ; -17665,41 +17496,41 ; -17709,10 +17540,10 ; -17725,41 +17556,41 ; -17769,10 +17600,10 ; -17786,10 +17617,10 ; -18109,11 +17940,9 ; -18122,13 +17951,11 ; -18139,11 +17966,9 ; -18152,37 +17977,37 ; -18212,13 +18037,13 ; -18228,18 +18053,18 ; -18275,8 +18100,8 ; -18286,21 +18111,21 ; -18310,10 +18135,10 ; -18326,54 +18151,54 ; -18624,11 +18449,9 ; -18637,41 +18460,41 ; -18681,10 +18504,10 ; -18697,41 +18520,41 ; -18741,10 +18564,10 ; -18758,10 +18581,10 ; -19575,8 +19398,8 ; -19603,11 +19426,9 ; -19625,8 +19446,8 ; -19635,10 +19456,10 ; -19651,8 +19472,8 ; -19661,15 +19482,15 ; -19680,8 +19501,8 ; -19690,18 +19511,18 ; -19713,18 +19534,18 ; -19735,23 +19556,23 ; -19791,8 +19612,8 ; -19851,8 +19672,8 ; -19884,8 +19705,8 ; -19925,7 +19746,7 ; -20024,8 +19845,8 ; -20052,11 +19873,9 ; -20074,8 +19893,8 ; -20084,15 +19903,15 ; -20103,8 +19922,8 ; -20113,18 +19932,18 ; -20136,18 +19955,18 ; -20158,28 +19977,28 ; -20228,8 +20047,8 ; -20328,7 +20147,7 ; -23014,14 +22833,6 ; -24732,10 +24543,6 ; -24755,7 +24562,6 ;",";;static PyObject *__pyx_f_6mtrand_cont0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_disc0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discnp_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnmN_array_sc(rk_state *__pyx_v_state, __py;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discd_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_pf_6mtrand_11RandomState_4seed(struct __pyx_obj_6mtrand_;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_20randint(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;PyMODINIT_FUNC PyInit_mtrand(void;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;"
2823,1,83d890e, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 15 Dec 2012 00:31:14 +0100",ct: [PATCH] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.,3,1079,1263,numpy/random/mtrand/mtrand.pyx,[u'2'],1,1," -1026,7 +1026,7 ;",cdef class RandomState;
2823,1,83d890e, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 15 Dec 2012 00:31:14 +0100",ct: [PATCH] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.,3,1079,1263,numpy/random/tests/test_regression.py,[u'10'],1,0," -63,5 +63,15 ;",def test_shuffle_mixed_dimension(self);
2822,8,877d047, Jay Bourque <jay.bourque@continuum.io>," Thu, 15 Nov 2012 13:11:24 -0600",ct: [PATCH 1/8] Fix for ufuncs with built in input operands and custom output operands,1,15,3,numpy/core/src/umath/ufunc_type_resolution.c,[u'18'],15,3," -1179,7 +1179,13 ; -1581,13 +1587,19 ;",find_userloop(PyUFuncObject *ufunc;linear_search_userloop_type_resolver(PyUFuncObject *self;
2822,8,aa0b3cb, Jay Bourque <jay.bourque@continuum.io>," Wed, 19 Dec 2012 15:17:22 -0600","ct: [PATCH 2/8] Add unit test for ufunc with custom typeAdd unit test for ufunc with built in input types and custom output type.Also, borrow rational custom dtype code from numpy-dtypes projects so that numpyhas a custom dtype for testing purposes.",4,1246,0,doc/release/1.8.0-notes.rst,[u'8'],1,0," -113,6 +113,14 ;",causes the returned array to be inverted;
2822,8,aa0b3cb, Jay Bourque <jay.bourque@continuum.io>," Wed, 19 Dec 2012 15:17:22 -0600","ct: [PATCH 2/8] Add unit test for ufunc with custom typeAdd unit test for ufunc with built in input types and custom output type.Also, borrow rational custom dtype code from numpy-dtypes projects so that numpyhas a custom dtype for testing purposes.",4,1246,0,numpy/core/setup.py,[u'7'],1,0," -922,6 +922,13 ;","def get_dotblas_sources(ext, build_dir);"
2822,8,aa0b3cb, Jay Bourque <jay.bourque@continuum.io>," Wed, 19 Dec 2012 15:17:22 -0600","ct: [PATCH 2/8] Add unit test for ufunc with custom typeAdd unit test for ufunc with built in input types and custom output type.Also, borrow rational custom dtype code from numpy-dtypes projects so that numpyhas a custom dtype for testing purposes.",4,1246,0,numpy/core/src/umath/rational.c.src,[u'1220'],35,0," -0,0 +1,1220 ;",;
2822,8,aa0b3cb, Jay Bourque <jay.bourque@continuum.io>," Wed, 19 Dec 2012 15:17:22 -0600","ct: [PATCH 2/8] Add unit test for ufunc with custom typeAdd unit test for ufunc with built in input types and custom output type.Also, borrow rational custom dtype code from numpy-dtypes projects so that numpyhas a custom dtype for testing purposes.",4,1246,0,numpy/core/tests/test_ufunc.py,[u'11'],1,0," -6,6 +6,7 ; -771,5 +772,15 ;",";def add_inplace(a, b);"
2822,8,55d55ec, Jay Bourque <jay.bourque@continuum.io>," Wed, 3 Apr 2013 15:53:53 -0500",ct: [PATCH 3/8] Fix build issues on python 3,1,6,0,numpy/core/src/umath/rational.c.src,[u'7'],6,1," -657,7 +657,11 ; -1077,7 +1081,8 ;",static PyTypeObject PyRational_Type = ;initrational(void) ;
2822,8,ecb0416, Jay Bourque <jay.bourque@continuum.io>," Mon, 8 Apr 2013 15:20:30 -0500",ct: [PATCH 4/8] More updates for python 3,1,73,33,numpy/core/src/umath/rational.c.src,[u'106'],25,11," -1,11 +1,14 ; -499,11 +502,11 ; -637,8 +640,12 ; -646,7 +653,11 ; -657,11 +668,7 ; -681,6 +688,16 ; -1038,25 +1055,44 ; -1064,7 +1100,7 ; -1081,26 +1117,25 ; -1118,15 +1153,15 ; -1161,10 +1196,14 ; -1174,11 +1213,11 ; -1197,11 +1236,11 ; -1215,11 +1254,12 ;",;static PyObject;static PyGetSetDef pyrational_getset[] = ;static PyTypeObject PyRational_Type = ;static PyTypeObject PyRational_Type = ;static PyTypeObject PyRational_Type = ;PyMethodDef module_methods[] = ;initrational(void) ;initrational(void) ;initrational(void) ;initrational(void) ;initrational(void) ;initrational(void) ;initrational(void) ;
2822,8,d73fb73, Jay Bourque <jay.bourque@continuum.io>," Wed, 17 Apr 2013 18:07:31 -0500",ct: [PATCH 5/8] Add another test for ufunc custom output type,1,4,0,numpy/core/tests/test_ufunc.py,[u'4'],4,0," -778,9 +778,13 ;",def test_ufunc_custom_out(self);
2822,8,375d870, Jay Bourque <jay.bourque@continuum.io>," Fri, 26 Apr 2013 12:26:40 -0500",ct: [PATCH 6/8] Rename rational.c.src to test_rational.c.src,2,1265,1265,numpy/core/src/umath/rational.c.src,[u'1265'],0,30," -1,1265 +0,0 ;",;
2822,8,375d870, Jay Bourque <jay.bourque@continuum.io>," Fri, 26 Apr 2013 12:26:40 -0500",ct: [PATCH 6/8] Rename rational.c.src to test_rational.c.src,2,1265,1265,numpy/core/src/umath/test_rational.c.src,[u'1265'],30,0," -0,0 +1,1265 ;",;
2822,8,4682e00, Jay Bourque <jay.bourque@continuum.io>," Fri, 26 Apr 2013 12:40:40 -0500",ct: [PATCH 7/8] Rename rational module to test_rational,3,11,11,numpy/core/setup.py,[u'4'],2,2," -925,8 +925,8 ;","def get_dotblas_sources(ext, build_dir);"
2822,8,4682e00, Jay Bourque <jay.bourque@continuum.io>," Fri, 26 Apr 2013 12:40:40 -0500",ct: [PATCH 7/8] Rename rational module to test_rational,3,11,11,numpy/core/src/umath/test_rational.c.src,[u'8'],4,4," -1058,7 +1058,7 ; -1070,9 +1070,9 ; -1199,7 +1199,7 ;",PyMethodDef module_methods[] = ;static struct PyModuleDef moduledef = ;PyMODINIT_FUNC initrational(void) ;
2822,8,4682e00, Jay Bourque <jay.bourque@continuum.io>," Fri, 26 Apr 2013 12:40:40 -0500",ct: [PATCH 7/8] Rename rational module to test_rational,3,11,11,numpy/core/tests/test_ufunc.py,[u'10'],5,5," -6,7 +6,7 ; -777,14 +777,14 ;",;def test_ufunc_custom_out(self);
2822,8,6b0784b, Jay Bourque <jay.bourque@continuum.io>," Mon, 29 Apr 2013 19:16:48 -0500",ct: [PATCH 8/8] Formatting changes,2,88,45,numpy/core/src/umath/test_rational.c.src,[u'130'],20,11," -191,13 +191,15 ; -550,7 +552,8 ; -654,9 +657,9 ; -688,15 +691,15 ; -800,7 +803,8 ; -894,7 +898,8 ; -906,7 +911,8 ; -917,8 +923,10 ; -928,13 +936,15 ; -949,7 +959,8 ; -1017,7 +1028,8 ; -1030,7 +1042,10 ; -1038,14 +1053,16 ; -1124,49 +1141,63 ; -1211,35 +1242,44 ; -1252,7 +1292,9 ;","rational_add(rational x, rational y) ;RATIONAL_BINOP(subtract;static PyTypeObject PyRational_Type = ;static PyTypeObject PyRational_Type = ;npyrational_compare(const void* d0, const void* d1, void* arr) ;PyArray_Descr npyrational_descr = ;PyArray_Descr npyrational_descr = ;DEFINE_CAST(npy_bool,rational,rational y = make_rational_int(x);;DEFINE_CAST(rational,npy_bool,npy_bool y = rational_nonzero(x);;BINARY_UFUNC(gcd_ufunc,int64_t,int64_t,int64_t,gcd(x,y);rational_matrix_multiply(char **args, npy_intp *dimensions, npy_intp *steps;rational_gufunc_matrix_multiply(char **args, npy_intp *dimensions, npy_intp *st;rational_gufunc_matrix_multiply(char **args, npy_intp *dimensions, npy_intp *st;PyMODINIT_FUNC inittest_rational(void) ;PyMODINIT_FUNC inittest_rational(void) ;PyMODINIT_FUNC inittest_rational(void) ;"
2822,8,6b0784b, Jay Bourque <jay.bourque@continuum.io>," Mon, 29 Apr 2013 19:16:48 -0500",ct: [PATCH 8/8] Formatting changes,2,88,45,numpy/core/tests/test_ufunc.py,[u'3'],1,1," -779,7 +779,8 ;",def test_ufunc_custom_out(self);
2821,56,925220b, Jay Bourque <jay.bourque@continuum.io>," Thu, 4 Oct 2012 12:02:59 -0500",ct: [PATCH 01/56] Proof-of-concept for ufunc fancy indexingConflicts:	numpy/core/code_generators/numpy_api.py,2,58,0,numpy/core/src/multiarray/mapping.c,[u'4'],3,0," -1653,6 +1653,7 ; -1700,6 +1701,7 ; -1762,6 +1764,7 ; -1947,6 +1950,7 ;","_convert_obj(PyObject *obj, PyArrayIterObject **iter;PyArray_MapIterReset(PyArrayMapIterObject *mit;PyArray_MapIterNext(PyArrayMapIterObject *mit;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2821,56,925220b, Jay Bourque <jay.bourque@continuum.io>," Thu, 4 Oct 2012 12:02:59 -0500",ct: [PATCH 01/56] Proof-of-concept for ufunc fancy indexingConflicts:	numpy/core/code_generators/numpy_api.py,2,58,0,numpy/core/src/umath/ufunc_object.c,[u'54'],37,0," -4849,6 +4849,57 ; -4863,6 +4914,9 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;static struct PyMethodDef ufunc_methods[] = ;"
2821,56,7191df0, Jay Bourque <jay.bourque@continuum.io>," Thu, 4 Oct 2012 15:54:07 -0500",ct: [PATCH 02/56] Add support for both unary and binary ufuncs,1,93,19,numpy/core/src/umath/ufunc_object.c,[u'112'],30,6," -4852,48 +4852,122 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,025a056, Jay Bourque <jay.bourque@continuum.io>," Thu, 4 Oct 2012 17:27:36 -0500",ct: [PATCH 03/56] Add comments,1,8,0,numpy/core/src/umath/ufunc_object.c,[u'9'],8,1," -4849,6 +4849,7 ; -4897,6 +4898,7 ; -4911,6 +4913,7 ; -4927,6 +4930,8 ; -4945,11 +4950,13 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_select(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_select(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_select(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_select(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,99fa26c, Jay Bourque <jay.bourque@continuum.io>," Wed, 24 Oct 2012 10:51:54 -0500",ct: [PATCH 04/56] Change 'select' method name to 'at',1,3,3,numpy/core/src/umath/ufunc_object.c,[u'6'],3,3," -4851,7 +4851,7 ; -4995,8 +4995,8 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;static struct PyMethodDef ufunc_methods[] = ;"
2821,56,e1fa3d7, Jay Bourque <jay.bourque@continuum.io>," Tue, 30 Oct 2012 17:50:50 -0500",ct: [PATCH 05/56] Add unit testsConflicts:	numpy/core/tests/test_ufunc.py,1,14,0,numpy/core/tests/test_ufunc.py,[u'14'],14,0," -865,5 +865,19 ;","def __rmul__(self, other);"
2821,56,f79e56d, Jay Bourque <jay.bourque@continuum.io>," Tue, 30 Oct 2012 17:51:09 -0500",ct: [PATCH 06/56] Check for sucessful call to MapIterBind,1,8,0,numpy/core/src/umath/ufunc_object.c,[u'8'],8,0," -4896,6 +4896,9 ; -4911,12 +4914,17 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,dcea500, Jay Bourque <jay.bourque@continuum.io>," Wed, 7 Nov 2012 13:34:07 -0600",ct: [PATCH 07/56] Misc fixes- Fix crash when bind for second map iter fails- Accept array like object for second operand- Fix memory leaks,1,36,29,numpy/core/src/umath/ufunc_object.c,[u'65'],20,17," -4876,36 +4876,49 ; -4914,29 +4927,11 ; -4952,7 +4947,7 ; -4987,6 +4982,18 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,7b551e9, Jay Bourque <jay.bourque@continuum.io>," Thu, 8 Nov 2012 14:09:26 -0600",ct: [PATCH 08/56] Rework 'at' method to fit customer's expectations.'at' method should be functionally equivalent to op1[idx] += op2 (for add ufunc).,1,25,17,numpy/core/src/umath/ufunc_object.c,[u'42'],22,15," -4849,7 +4849,13 ; -4860,7 +4866,7 ; -4868,10 +4874,12 ; -4915,22 +4923,20 ; -4961,7 +4967,7 ; -4976,15 +4982,17 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,6bf50f1, Jay Bourque <jay.bourque@continuum.io>," Tue, 13 Nov 2012 11:08:50 -0600",ct: [PATCH 09/56] Update/expand unit tests,1,34,11,numpy/core/tests/test_ufunc.py,[u'45'],31,11," -866,18 +866,41 ;","def __rmul__(self, other);"
2821,56,04c341d, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 12:08:17 -0600",ct: [PATCH 10/56] Update documentation for 'at' method,2,51,0,doc/release/1.8.0-notes.rst,[u'10'],10,0," -185,6 +185,16 ;",New nan aware statistical functions are added. In these functions th;
2821,56,04c341d, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 12:08:17 -0600",ct: [PATCH 10/56] Update documentation for 'at' method,2,51,0,numpy/add_newdocs.py,[u'41'],41,0," -5815,6 +5815,47 ;","def luf(lamdaexpr, *args, **kwargs);"
2821,56,56d74a4, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 12:08:36 -0600",ct: [PATCH 11/56] Add comment to 'at' method unit test,1,0,0,numpy/core/tests/test_ufunc.py,[u'1'],0,1," -866,7 +866,6 ;","def __rmul__(self, other);"
2821,56,d94cd57, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 12:10:03 -0600",ct: [PATCH 12/56] Only allow explicit index slicing in 'at' method,1,15,0,numpy/core/src/umath/ufunc_object.c,[u'15'],15,0," -4875,6 +4875,7 ; -4898,6 +4899,20 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,7dde42a, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 12:39:34 -0600",ct: [PATCH 13/56] Correct implementation of 'at' method that covers all corner cases,1,22,25,numpy/core/src/umath/ufunc_object.c,[u'47'],17,20," -4924,34 +4924,35 ; -4985,10 +4986,6 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,0eafea7, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 14:37:32 -0600",ct: [PATCH 14/56] Add more unit tests for 'at' method,1,61,18,numpy/core/tests/test_ufunc.py,[u'79'],32,10," -868,36 +868,79 ;","def __rmul__(self, other);"
2821,56,cf9452f, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Nov 2012 14:47:40 -0600",ct: [PATCH 15/56] Code cleanup for 'at' method,1,11,15,numpy/core/src/umath/ufunc_object.c,[u'26'],11,15," -4867,38 +4867,35 ; -4929,9 +4926,8 ; -4947,7 +4943,6 ; -4975,7 +4970,8 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,a8d13b8, Jay Bourque <jay.bourque@continuum.io>," Thu, 15 Nov 2012 15:09:04 -0600",ct: [PATCH 16/56] Add more unit tests for 'at' method,2,6,2,numpy/core/src/umath/ufunc_object.c,[u'2'],0,2," -5001,8 +5001,6 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,a8d13b8, Jay Bourque <jay.bourque@continuum.io>," Thu, 15 Nov 2012 15:09:04 -0600",ct: [PATCH 16/56] Add more unit tests for 'at' method,2,6,2,numpy/core/tests/test_ufunc.py,[u'6'],6,0," -943,6 +943,12 ;",def test_inplace_fancy_indexing(self);
2821,56,5b7cda0, Jay Bourque <jay.bourque@continuum.io>," Thu, 15 Nov 2012 15:54:57 -0600",ct: [PATCH 17/56] Fix issue with 'at' method when indices are all slice objects,2,24,2,numpy/core/src/multiarray/mapping.c,[u'10'],8,2," -1663,7 +1663,9 ; -1714,7 +1716,11 ;",PyArray_MapIterReset(PyArrayMapIterObject *mit;PyArray_MapIterNext(PyArrayMapIterObject *mit;
2821,56,5b7cda0, Jay Bourque <jay.bourque@continuum.io>," Thu, 15 Nov 2012 15:54:57 -0600",ct: [PATCH 17/56] Fix issue with 'at' method when indices are all slice objects,2,24,2,numpy/core/tests/test_ufunc.py,[u'16'],16,0," -939,6 +939,22 ;",def test_inplace_fancy_indexing(self);
2821,56,f63eb17, Jay Bourque <jay.bourque@continuum.io>," Fri, 7 Dec 2012 14:57:05 -0600",ct: [PATCH 18/56] Add documentation for new 'at' ufunc method,1,6,0,doc/source/reference/ufuncs.rst,[u'6'],6,0," -417,6 +417,11 ; -427,6 +432,7 ;",an integer (or Boolean) data-type and smaller than the size of th;an integer (or Boolean) data-type and smaller than the size of th;
2821,56,0d087dc, Jay Bourque <jay.bourque@continuum.io>," Thu, 13 Dec 2012 15:24:44 -0600",ct: [PATCH 19/56] Fix build issue,1,0,0,numpy/core/src/multiarray/mapping.c,[u'2'],1,1," -1699,7 +1699,7 ;",PyArray_MapIterReset(PyArrayMapIterObject *mit;
2821,56,d6fa103, Jay Bourque <jay.bourque@continuum.io>," Thu, 13 Dec 2012 16:08:49 -0600",ct: [PATCH 20/56] Fix for crash when PyArray_MapIterSwapAxes is calledSet up default iteraxes array values in call to MapIterBind().,1,10,0,numpy/core/src/multiarray/mapping.c,[u'10'],10,0," -1793,6 +1793,16 ;","PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2821,56,1b81be7, Jay Bourque <jay.bourque@continuum.io>," Fri, 14 Dec 2012 12:01:54 -0600",ct: [PATCH 21/56] Add more comments,1,37,19,numpy/core/src/umath/ufunc_object.c,[u'56'],24,13," -4849,13 +4849,16 ; -4921,10 +4924,12 ; -4932,8 +4937,13 ; -4941,8 +4951,10 ; -4950,8 +4962,10 ; -4970,13 +4984,17 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,13c1847, Jay Bourque <jay.bourque@continuum.io>," Wed, 19 Dec 2012 14:12:21 -0600",ct: [PATCH 22/56] Reword some comments/documentation,2,9,6,numpy/add_newdocs.py,[u'13'],8,5," -5820,11 +5820,14 ;","def luf(lamdaexpr, *args, **kwargs);"
2821,56,13c1847, Jay Bourque <jay.bourque@continuum.io>," Wed, 19 Dec 2012 14:12:21 -0600",ct: [PATCH 22/56] Reword some comments/documentation,2,9,6,numpy/core/src/umath/ufunc_object.c,[u'2'],1,1," -4953,7 +4953,7 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,45419ea, Jay Bourque <jay.bourque@continuum.io>," Wed, 27 Mar 2013 17:32:03 -0500",ct: [PATCH 23/56] Replace calls to New/Bind/Reset with MapIterArray,2,2,12,numpy/core/src/multiarray/mapping.c,[u'6'],1,5," -1653,7 +1653,6 ; -1699,11 +1698,10 ; -1770,7 +1768,6 ; -1966,7 +1963,6 ;","_convert_obj(PyObject *obj, PyArrayIterObject **iter;PyArray_MapIterReset(PyArrayMapIterObject *mit;PyArray_MapIterNext(PyArrayMapIterObject *mit;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2821,56,45419ea, Jay Bourque <jay.bourque@continuum.io>," Wed, 27 Mar 2013 17:32:03 -0500",ct: [PATCH 23/56] Replace calls to New/Bind/Reset with MapIterArray,2,2,12,numpy/core/src/umath/ufunc_object.c,[u'8'],1,7," -4913,17 +4913,11 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;"
2821,56,2e2d99a, Jay Bourque <jay.bourque@continuum.io>," Wed, 27 Mar 2013 17:53:01 -0500",ct: [PATCH 24/56] Remove keyword support for required arguments,1,3,5,numpy/core/src/umath/ufunc_object.c,[u'8'],3,5," -4860,9 +4860,8 ; -4880,8 +4879,7 ; -5038,7 +5036,7 ;","ufunc_reduceat(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;ufunc_at(PyUFuncObject *ufunc, PyObject *args, PyObject *kwds;static struct PyMethodDef ufunc_methods[] = ;"
2821,56,2a8c04b, Jay Bourque <jay.bourque@continuum.io>," Wed, 27 Mar 2013 18:13:38 -0500",ct: [PATCH 25/56] Let indexing code do error checking for arguments with mismatched dimensions,1,0,14,numpy/core/src/umath/ufunc_object.c,[u'14'],0,14," -4897,20 +4897,6 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,6d7b51a, Jay Bourque <jay.bourque@continuum.io>," Thu, 28 Mar 2013 12:16:34 -0500",ct: [PATCH 26/56] Improve comment for creating iter object from second operand,1,7,3,numpy/core/src/umath/ufunc_object.c,[u'10'],7,3," -4929,9 +4929,13 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,f9a3e17, Jay Bourque <jay.bourque@continuum.io>," Mon, 1 Apr 2013 15:51:16 -0500",ct: [PATCH 27/56] Add tests for 0-dim array,1,7,5,numpy/core/tests/test_ufunc.py,[u'12'],7,5," -959,11 +959,13 ;",def test_inplace_fancy_indexing(self);
2821,56,e4cbcb2, Jay Bourque <jay.bourque@continuum.io>," Mon, 1 Apr 2013 17:20:47 -0500",ct: [PATCH 28/56] Just create an array object for second operand; don't cast to dtype of first operand.,1,3,9,numpy/core/src/umath/ufunc_object.c,[u'12'],3,9," -4902,16 +4902,10 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,da3f8cb, Jay Bourque <jay.bourque@continuum.io>," Tue, 2 Apr 2013 17:54:17 -0500",ct: [PATCH 29/56] Call iterator_loop instead of directly calling ufunc.Call iterator_loop which will call ufunc and handle any buffering for cases with mixed dtypes.,1,55,22,numpy/core/src/umath/ufunc_object.c,[u'77'],26,11," -4870,14 +4870,25 ; -4938,20 +4949,24 ; -4965,24 +4980,42 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,1e786ea, Jay Bourque <jay.bourque@continuum.io>," Wed, 3 Apr 2013 13:26:02 -0500",ct: [PATCH 30/56] Add test for mixed dtypes,1,5,0,numpy/core/tests/test_ufunc.py,[u'5'],5,0," -967,6 +967,11 ;",def test_inplace_fancy_indexing(self);
2821,56,5dea4ca, Jay Bourque <jay.bourque@continuum.io>," Wed, 3 Apr 2013 14:01:31 -0500",ct: [PATCH 31/56] Add test for boolean indexing and boolean ufunc,1,5,0,numpy/core/tests/test_ufunc.py,[u'5'],5,0," -972,6 +972,11 ;",def test_inplace_fancy_indexing(self);
2821,56,4b33849, Jay Bourque <jay.bourque@continuum.io>," Wed, 3 Apr 2013 14:44:08 -0500",ct: [PATCH 32/56] Fix DeprecationWarning on python 3.3,1,0,0,numpy/core/tests/test_ufunc.py,[u'2'],1,1," -968,7 +968,7 ;",def test_inplace_fancy_indexing(self);
2821,56,2e65204, Jay Bourque <jay.bourque@continuum.io>," Wed, 3 Apr 2013 14:53:21 -0500",ct: [PATCH 33/56] Another attempt at fixing DeprecationWarning,1,2,2,numpy/core/tests/test_ufunc.py,[u'4'],2,2," -968,9 +968,9 ;",def test_inplace_fancy_indexing(self);
2821,56,d467d49, Jay Bourque <jay.bourque@continuum.io>," Wed, 3 Apr 2013 15:03:39 -0500",ct: [PATCH 34/56] Maybe this will fix the DeprecationWarning,1,2,2,numpy/core/tests/test_ufunc.py,[u'4'],2,2," -968,9 +968,9 ;",def test_inplace_fancy_indexing(self);
2821,56,b259cdc, Jay Bourque <jay.bourque@continuum.io>," Thu, 23 May 2013 12:16:48 -0500","ct: [PATCH 35/56] Revert ""Call iterator_loop instead of directly calling ufunc.""This reverts commit 2a9d5577a087e664ee047b3e099c1355000d8661.",1,22,55,numpy/core/src/umath/ufunc_object.c,[u'77'],11,26," -4870,25 +4870,14 ; -4949,24 +4938,20 ; -4980,42 +4965,24 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,3820cf3, Jay Bourque <jay.bourque@continuum.io>," Wed, 22 May 2013 18:31:40 -0500",ct: [PATCH 36/56] Use NpyIter object to buffer each input valueUse NpyIter object to buffer each input value in order to handle certain situations such as operands with mixed dtypes.,1,99,3,numpy/core/src/umath/ufunc_object.c,[u'102'],34,2," -4870,7 +4870,8 ; -4878,6 +4879,17 ; -4943,15 +4955,26 ; -4959,7 +4982,70 ; -4980,8 +5066,18 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,f899c19, Jay Bourque <jay.bourque@continuum.io>," Wed, 22 May 2013 22:19:52 -0500",ct: [PATCH 37/56] Clean up previous comment and add test for unary ufunc.,2,46,7,numpy/core/src/umath/ufunc_object.c,[u'47'],31,6," -4869,27 +4869,33 ; -5031,6 +5037,16 ; -5045,6 +5061,8 ; -5072,13 +5090,28 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,f899c19, Jay Bourque <jay.bourque@continuum.io>," Wed, 22 May 2013 22:19:52 -0500",ct: [PATCH 37/56] Clean up previous comment and add test for unary ufunc.,2,46,7,numpy/core/tests/test_ufunc.py,[u'6'],5,0," -978,5 +978,11 ;",def test_inplace_fancy_indexing(self);
2821,56,9438a8f, Jay Bourque <jay.bourque@continuum.io>," Thu, 23 May 2013 13:08:17 -0500",ct: [PATCH 38/56] More clean up,1,4,3,numpy/core/src/umath/ufunc_object.c,[u'7'],4,3," -4883,13 +4883,10 ; -5071,6 +5068,10 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,ea2e1f5, Jay Bourque <jay.bourque@continuum.io>," Thu, 23 May 2013 14:19:12 -0500",ct: [PATCH 39/56] Remove unnecessary check,1,3,5,numpy/core/src/umath/ufunc_object.c,[u'8'],3,5," -4930,11 +4930,9 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,c26e548, Jay Bourque <jay.bourque@continuum.io>," Thu, 23 May 2013 15:26:35 -0500",ct: [PATCH 40/56] Reverse commit 6ec51b3,1,0,10,numpy/core/src/multiarray/mapping.c,[u'10'],0,10," -1790,16 +1790,6 ;","PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2821,56,8f22733, Jay Bourque <jay.bourque@continuum.io>," Thu, 23 May 2013 15:47:30 -0500",ct: [PATCH 41/56] Fix deprecation warning,1,0,0,numpy/core/src/umath/ufunc_object.c,[u'2'],1,1," -5051,7 +5051,7 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,f917e38, Jay Bourque <jay.bourque@continuum.io>," Sat, 13 Jul 2013 16:17:59 -0500",ct: [PATCH 42/56] Use Py_XDECREF in fail section,1,3,6,numpy/core/src/umath/ufunc_object.c,[u'9'],3,6," -5123,12 +5123,9 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,fcc891d, Jay Bourque <jay.bourque@continuum.io>," Sat, 13 Jul 2013 16:21:21 -0500",ct: [PATCH 43/56] Add NpyIter_Deallocate,1,2,0,numpy/core/src/umath/ufunc_object.c,[u'2'],2,0," -5118,6 +5118,8 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,2c37d3b, Jay Bourque <jay.bourque@continuum.io>," Sat, 13 Jul 2013 16:35:29 -0500",ct: [PATCH 44/56] Add test for empty subspace,1,5,0,numpy/core/tests/test_ufunc.py,[u'5'],5,0," -983,6 +983,11 ;",def test_inplace_fancy_indexing(self);
2821,56,b440929, Jay Bourque <jay.bourque@continuum.io>," Sat, 13 Jul 2013 16:39:27 -0500",ct: [PATCH 45/56] Update docs,2,7,6,doc/release/1.8.0-notes.rst,[u'6'],3,3," -188,9 +188,9 ;",computations;
2821,56,b440929, Jay Bourque <jay.bourque@continuum.io>," Sat, 13 Jul 2013 16:39:27 -0500",ct: [PATCH 45/56] Update docs,2,7,6,doc/source/reference/ufuncs.rst,[u'7'],4,3," -418,9 +418,10 ;",an integer (or Boolean) data-type and smaller than the size of th;
2821,56,a4bb3bc, Jay Bourque <jay.bourque@continuum.io>," Mon, 15 Jul 2013 17:55:58 -0500",ct: [PATCH 46/56] Add test for non native bytetypes,1,6,0,numpy/core/tests/test_ufunc.py,[u'6'],6,0," -989,5 +989,11 ;",def test_inplace_fancy_indexing(self);
2821,56,6c249cd, Jay Bourque <jay.bourque@continuum.io>," Mon, 15 Jul 2013 17:56:59 -0500",ct: [PATCH 47/56] Move NpyIter_IterNextFunc call outside of loop,1,7,7,numpy/core/src/umath/ufunc_object.c,[u'14'],7,7," -4883,6 +4883,7 ; -5059,6 +5060,12 ; -5066,7 +5073,6 ; -5084,12 +5090,6 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,5729685, Jay Bourque <jay.bourque@continuum.io>," Tue, 16 Jul 2013 13:28:40 -0500",ct: [PATCH 48/56] Move gil release/aquire outside of loop,1,10,10,numpy/core/src/umath/ufunc_object.c,[u'20'],10,10," -5058,7 +5058,7 ; -5066,6 +5066,10 ; -5094,10 +5098,6 ; -5107,10 +5107,6 ; -5118,7 +5114,11 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,1e4d589, Jay Bourque <jay.bourque@continuum.io>," Wed, 24 Jul 2013 15:46:39 -0500",ct: [PATCH 49/56] Add decrefs at end of function and return None object,1,19,7,numpy/core/src/umath/ufunc_object.c,[u'26'],19,7," -4871,6 +4871,7 ; -4985,29 +4986,29 ; -5043,7 +5044,7 ; -5121,13 +5122,24 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,336151e, Jay Bourque <jay.bourque@continuum.io>," Sat, 27 Jul 2013 12:16:17 -0500",ct: [PATCH 50/56] Fix memory leaks and inc dtype refs,2,10,4,numpy/core/src/umath/ufunc_object.c,[u'6'],6,0," -4986,16 +4986,19 ; -5003,6 +5006,7 ; -5128,6 +5132,7 ; -5139,6 +5144,7 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,336151e, Jay Bourque <jay.bourque@continuum.io>," Sat, 27 Jul 2013 12:16:17 -0500",ct: [PATCH 50/56] Fix memory leaks and inc dtype refs,2,10,4,numpy/core/tests/test_ufunc.py,[u'8'],4,4," -989,11 +989,11 ;",def test_inplace_fancy_indexing(self);
2821,56,79bc97c, Jay Bourque <jay.bourque@continuum.io>," Sat, 27 Jul 2013 12:45:37 -0500",ct: [PATCH 51/56] Update docs,1,24,18,numpy/add_newdocs.py,[u'42'],24,18," -5819,44 +5819,50 ;","def luf(lamdaexpr, *args, **kwargs);"
2821,56,7c4eeea, Jay Bourque <jay.bourque@continuum.io>," Mon, 5 Aug 2013 11:34:43 -0500",ct: [PATCH 52/56] Update docs,1,3,0,numpy/add_newdocs.py,[u'3'],3,0," -5844,6 +5844,7 ; -5852,6 +5853,7 ; -5862,6 +5864,7 ;","def luf(lamdaexpr, *args, **kwargs);def luf(lamdaexpr, *args, **kwargs);def luf(lamdaexpr, *args, **kwargs);"
2821,56,a04bb37, Jay Bourque <jay.bourque@continuum.io>," Mon, 5 Aug 2013 13:49:06 -0500",ct: [PATCH 53/56] Update docs,1,3,3,numpy/add_newdocs.py,[u'6'],3,3," -5844,7 +5844,7 ; -5853,7 +5853,7 ; -5864,7 +5864,7 ;","def luf(lamdaexpr, *args, **kwargs);def luf(lamdaexpr, *args, **kwargs);def luf(lamdaexpr, *args, **kwargs);"
2821,56,2ec4c94, Jay Bourque <jay.bourque@continuum.io>," Mon, 5 Aug 2013 14:16:12 -0500",ct: [PATCH 54/56] Check for python error when needs_api flag is set,1,6,0,numpy/core/src/umath/ufunc_object.c,[u'7'],6,1," -5134,7 +5134,12 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,ec9d9cc, Jay Bourque <jay.bourque@continuum.io>," Tue, 13 Aug 2013 17:01:51 -0500",ct: [PATCH 55/56] Bail out of loop if python error occurs,2,14,6,numpy/core/src/umath/ufunc_object.c,[u'15'],9,6," -5103,14 +5103,17 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2821,56,ec9d9cc, Jay Bourque <jay.bourque@continuum.io>," Tue, 13 Aug 2013 17:01:51 -0500",ct: [PATCH 55/56] Bail out of loop if python error occurs,2,14,6,numpy/core/tests/test_ufunc.py,[u'5'],5,0," -995,5 +995,10 ;",def test_inplace_fancy_indexing(self);
2821,56,acef718, Jay Bourque <jay.bourque@continuum.io>," Wed, 14 Aug 2013 18:18:03 -0500",ct: [PATCH 56/56] Change casting type for ufunc operands,1,0,0,numpy/core/src/umath/ufunc_object.c,[u'2'],1,1," -4974,7 +4974,7 ;","ufunc_at(PyUFuncObject *ufunc, PyObject *args;"
2820,6,acf7421, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 01:43:06 +0100",ct: [PATCH 1/6] ENH: make random.choice size argument default to None and allow tupleThe size argument to random.choice should work like it does for allother functions in random as well.,1,16,10,numpy/random/mtrand/mtrand.pyx,[u'26'],16,10," -916,7 +916,7 ; -929,8 +929,9 ; -1017,26 +1018,30 ; -1045,17 +1050,18 ;",cdef class RandomState;cdef class RandomState;cdef class RandomState;cdef class RandomState;
2820,6,6b523d6, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 01:44:33 +0100","ct: [PATCH 2/6] BUG: Do not sort new indices in random.choice.Random choice used np.unique to find new indices when replacewas False and p given. This is wrong since unique will sort theindices. This solves the bug, but likely not ideal.",1,3,2,numpy/random/mtrand/mtrand.pyx,[u'5'],3,2," -1049,8 +1049,9 ;",cdef class RandomState;
2820,6,959f790, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 17:46:54 +0100",ct: [PATCH 3/6] BUG: Fix various problems in the previous commits.Thanks to @alan-isaac for pointing out the 0-d vs. scalar issue.,1,17,9,numpy/random/mtrand/mtrand.pyx,[u'26'],17,9," -1018,8 +1018,8 ; -1028,6 +1028,7 ; -1045,25 +1046,32 ;",cdef class RandomState;cdef class RandomState;cdef class RandomState;
2820,6,4b0249f, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 17:48:55 +0100",ct: [PATCH 4/6] TST: Add tests for new feature and fix in random.choice,1,27,0,numpy/random/tests/test_random.py,[u'28'],27,1," -138,7 +138,7 ; -161,6 +161,32 ;",def test_choice_nonuniform_noreplace(self);def test_choice_exceptions(self);
2820,6,d27ddee, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 17 Nov 2012 12:35:30 +0100",ct: [PATCH 5/6] MAINT: Regenerate mtrand.c,1,3827,3302,numpy/random/mtrand/mtrand.c,[u'7129'],23,19," -1,4 +1,4 ; -53,12 +53,15 ; -828,10 +831,8 ; -889,82 +890,82 ; -983,7 +984,8 ; -991,10 +993,12 ; -1018,6 +1022,7 ; -1073,6 +1078,7 ; -1212,9 +1218,7 ; -1275,7 +1279,8 ; -1314,6 +1319,7 ; -1321,9 +1327,11 ; -1334,6 +1342,7 ; -1391,6 +1400,8 ; -1574,9 +1585,11 ; -1726,9 +1739,11 ; -1817,8 +1832,8 ; -1844,9 +1859,11 ; -1873,11 +1890,13 ; -1886,8 +1905,8 ; -1920,8 +1939,8 ; -1936,13 +1955,15 ; -1960,11 +1981,13 ; -1999,8 +2022,8 ; -2048,7 +2071,7 ; -2142,9 +2165,11 ; -2232,8 +2257,8 ; -2259,9 +2284,11 ; -2270,11 +2297,13 ; -2292,8 +2321,8 ; -2344,8 +2373,8 ; -2360,13 +2389,15 ; -2384,11 +2415,13 ; -2423,8 +2456,8 ; -2490,7 +2523,7 ; -2583,9 +2616,11 ; -2674,8 +2709,8 ; -2701,9 +2736,11 ; -2712,11 +2749,13 ; -2734,8 +2773,8 ; -2795,8 +2834,8 ; -2811,13 +2850,15 ; -2835,11 +2876,13 ; -2874,8 +2917,8 ; -2941,7 +2984,7 ; -3029,9 +3072,11 ; -3176,9 +3221,11 ; -3266,8 +3313,8 ; -3293,9 +3340,11 ; -3304,11 +3353,13 ; -3326,8 +3377,8 ; -3378,8 +3429,8 ; -3389,13 +3440,15 ; -3413,11 +3466,13 ; -3452,8 +3507,8 ; -3519,7 +3574,7 ; -3607,9 +3662,11 ; -3697,8 +3754,8 ; -3724,9 +3781,11 ; -3735,11 +3794,13 ; -3757,8 +3818,8 ; -3809,8 +3870,8 ; -3820,13 +3881,15 ; -3844,11 +3907,13 ; -3883,8 +3948,8 ; -3950,7 +4015,7 ; -4038,9 +4103,11 ; -4129,8 +4196,8 ; -4156,9 +4223,11 ; -4167,11 +4236,13 ; -4189,8 +4260,8 ; -4250,8 +4321,8 ; -4261,13 +4332,15 ; -4285,11 +4358,13 ; -4324,8 +4399,8 ; -4391,7 +4466,7 ; -4479,9 +4554,11 ; -4570,8 +4647,8 ; -4597,9 +4674,11 ; -4626,11 +4705,13 ; -4639,8 +4720,8 ; -4673,8 +4754,8 ; -4684,13 +4765,15 ; -4708,11 +4791,13 ; -4747,8 +4832,8 ; -4796,7 +4881,7 ; -5253,9 +5338,11 ; -5345,9 +5432,11 ; -5365,32 +5454,34 ; -5400,8 +5491,8 ; -5410,10 +5501,10 ; -5422,15 +5513,15 ; -5491,7 +5582,8 ; -5725,9 +5817,11 ; -5736,8 +5830,8 ; -5749,9 +5843,9 ; -5763,12 +5857,14 ; -5847,8 +5943,8 ; -5857,6 +5953,7 ; -6514,9 +6611,11 ; -6683,7 +6782,7 ; -6695,16 +6794,16 ; -6771,13 +6870,18 ; -6787,16 +6891,20 ; -6809,19 +6917,19 ; -6834,46 +6942,46 ; -6882,50 +6990,50 ; -6935,65 +7043,65 ; -7002,128 +7110,128 ; -7131,27 +7239,27 ; -7160,508 +7268,678 ; -7673,87 +7951,199 ; -7763,18 +8153,25 ; -7797,8 +8194,8 ; -7834,7 +8231,7 ; -7851,7 +8248,7 ; -7880,7 +8277,7 ; -7889,7 +8286,7 ; -7898,7 +8295,7 ; -7908,7 +8305,7 ; -7916,7 +8313,7 ; -7925,7 +8322,7 ; -7934,45 +8331,49 ; -7980,14 +8381,14 ; -7996,20 +8397,22 ; -8017,10 +8420,10 ; -8058,7 +8461,7 ; -8079,18 +8482,18 ; -8098,9 +8501,9 ; -8110,7 +8513,7 ; -8118,12 +8521,12 ; -8164,7 +8567,7 ; -8185,18 +8588,18 ; -8204,9 +8607,9 ; -8216,7 +8619,7 ; -8224,14 +8627,14 ; -8269,7 +8672,7 ; -8305,7 +8708,7 ; -8322,7 +8725,7 ; -8347,7 +8750,7 ; -8357,7 +8760,7 ; -8368,7 +8771,7 ; -8382,7 +8785,7 ; -8390,11 +8793,11 ; -8405,7 +8808,7 ; -8441,7 +8844,7 ; -8466,7 +8869,7 ; -8479,7 +8882,7 ; -8499,7 +8902,7 ; -8507,7 +8910,7 ; -8541,7 +8944,7 ; -8578,7 +8981,7 ; -8595,7 +8998,7 ; -8623,7 +9026,7 ; -8632,7 +9035,7 ; -8641,7 +9044,7 ; -8651,7 +9054,7 ; -8661,23 +9064,23 ; -8685,7 +9088,7 ; -8694,7 +9097,7 ; -8703,50 +9106,54 ; -8754,40 +9161,40 ; -8795,7 +9202,7 ; -8832,7 +9239,7 ; -8858,7 +9265,7 ; -8867,7 +9274,7 ; -8884,7 +9291,7 ; -8912,7 +9319,7 ; -8921,7 +9328,7 ; -8930,7 +9337,7 ; -8940,7 +9347,7 ; -8950,23 +9357,23 ; -8976,23 +9383,23 ; -9000,7 +9407,7 ; -9009,7 +9416,7 ; -9018,50 +9425,54 ; -9069,57 +9480,57 ; -9127,40 +9538,40 ; -9168,7 +9579,7 ; -9205,7 +9616,7 ; -9236,7 +9647,7 ; -9251,7 +9662,7 ; -9277,7 +9688,7 ; -9286,7 +9697,7 ; -9296,7 +9707,7 ; -9306,23 +9717,23 ; -9330,7 +9741,7 ; -9339,7 +9750,7 ; -9348,80 +9759,82 ; -9429,10 +9842,10 ; -9463,7 +9876,7 ; -9488,7 +9901,7 ; -9501,7 +9914,7 ; -9521,7 +9934,7 ; -9529,7 +9942,7 ; -9560,7 +9973,7 ; -9589,7 +10002,7 ; -9604,7 +10017,7 ; -9630,7 +10043,7 ; -9639,7 +10052,7 ; -9649,7 +10062,7 ; -9659,23 +10072,23 ; -9683,7 +10096,7 ; -9692,7 +10105,7 ; -9701,80 +10114,82 ; -9782,10 +10197,10 ; -9819,7 +10234,7 ; -9854,7 +10269,7 ; -9871,7 +10286,7 ; -9899,7 +10314,7 ; -9908,7 +10323,7 ; -9917,7 +10332,7 ; -9927,7 +10342,7 ; -9937,23 +10352,23 ; -9963,23 +10378,23 ; -9987,7 +10402,7 ; -9996,7 +10411,7 ; -10005,52 +10420,56 ; -10058,59 +10477,59 ; -10118,40 +10537,40 ; -10159,7 +10578,7 ; -10196,7 +10615,7 ; -10222,7 +10641,7 ; -10231,7 +10650,7 ; -10248,7 +10667,7 ; -10276,7 +10695,7 ; -10285,7 +10704,7 ; -10294,7 +10713,7 ; -10304,7 +10723,7 ; -10314,23 +10733,23 ; -10340,23 +10759,23 ; -10364,7 +10783,7 ; -10373,7 +10792,7 ; -10382,52 +10801,56 ; -10435,59 +10858,59 ; -10495,40 +10918,40 ; -10536,7 +10959,7 ; -10574,7 +10997,7 ; -10601,12 +11024,12 ; -10615,7 +11038,7 ; -10634,7 +11057,7 ; -10664,7 +11087,7 ; -10673,7 +11096,7 ; -10682,7 +11105,7 ; -10691,7 +11114,7 ; -10701,7 +11124,7 ; -10711,23 +11134,23 ; -10737,23 +11160,23 ; -10763,23 +11186,23 ; -10788,14 +11211,14 ; -10804,7 +11227,7 ; -10813,226 +11236,232 ; -11041,17 +11470,17 ; -11085,7 +11514,7 ; -11114,7 +11543,7 ; -11129,7 +11558,7 ; -11155,7 +11584,7 ; -11164,7 +11593,7 ; -11174,7 +11603,7 ; -11184,23 +11613,23 ; -11208,7 +11637,7 ; -11217,7 +11646,7 ; -11226,80 +11655,82 ; -11307,10 +11738,10 ; -11343,7 +11774,7 ; -11369,7 +11800,7 ; -11378,7 +11809,7 ; -11395,7 +11826,7 ; -11423,7 +11854,7 ; -11432,7 +11863,7 ; -11441,7 +11872,7 ; -11451,7 +11882,7 ; -11461,23 +11892,23 ; -11487,23 +11918,23 ; -11512,14 +11943,14 ; -11528,7 +11959,7 ; -11537,52 +11968,56 ; -11590,59 +12025,59 ; -11650,40 +12085,40 ; -11692,14 +12127,14 ; -11734,7 +12169,7 ; -11759,7 +12194,7 ; -11772,7 +12207,7 ; -11792,7 +12227,7 ; -11800,7 +12235,7 ; -11831,7 +12266,7 ; -11860,7 +12295,7 ; -11875,7 +12310,7 ; -11901,7 +12336,7 ; -11910,7 +12345,7 ; -11920,7 +12355,7 ; -11930,23 +12365,23 ; -11954,7 +12389,7 ; -11963,7 +12398,7 ; -11972,80 +12407,82 ; -12053,10 +12490,10 ; -12089,7 +12526,7 ; -12115,7 +12552,7 ; -12124,7 +12561,7 ; -12141,7 +12578,7 ; -12169,7 +12606,7 ; -12178,7 +12615,7 ; -12187,7 +12624,7 ; -12197,7 +12634,7 ; -12207,23 +12644,23 ; -12231,7 +12668,7 ; -12240,7 +12677,7 ; -12249,52 +12686,56 ; -12302,40 +12743,40 ; -12343,7 +12784,7 ; -12379,7 +12820,7 ; -12408,7 +12849,7 ; -12423,7 +12864,7 ; -12449,7 +12890,7 ; -12458,7 +12899,7 ; -12468,7 +12909,7 ; -12478,23 +12919,23 ; -12502,7 +12943,7 ; -12511,7 +12952,7 ; -12520,80 +12961,82 ; -12601,10 +13044,10 ; -12636,7 +13079,7 ; -12665,7 +13108,7 ; -12680,7 +13123,7 ; -12706,7 +13149,7 ; -12715,7 +13158,7 ; -12725,7 +13168,7 ; -12735,23 +13178,23 ; -12759,7 +13202,7 ; -12768,7 +13211,7 ; -12777,80 +13220,82 ; -12858,10 +13303,10 ; -12893,7 +13338,7 ; -12922,7 +13367,7 ; -12937,7 +13382,7 ; -12963,7 +13408,7 ; -12972,7 +13417,7 ; -12982,7 +13427,7 ; -12992,23 +13437,23 ; -13016,7 +13461,7 ; -13025,7 +13470,7 ; -13034,80 +13479,82 ; -13115,10 +13562,10 ; -13153,7 +13600,7 ; -13190,7 +13637,7 ; -13207,7 +13654,7 ; -13235,7 +13682,7 ; -13244,7 +13691,7 ; -13253,7 +13700,7 ; -13263,7 +13710,7 ; -13273,23 +13720,23 ; -13297,7 +13744,7 ; -13306,7 +13753,7 ; -13315,52 +13762,52 ; -13368,40 +13815,40 ; -13409,7 +13856,7 ; -13448,7 +13895,7 ; -13485,7 +13932,7 ; -13502,7 +13949,7 ; -13530,7 +13977,7 ; -13539,7 +13986,7 ; -13548,7 +13995,7 ; -13558,7 +14005,7 ; -13568,23 +14015,23 ; -13592,7 +14039,7 ; -13601,7 +14048,7 ; -13610,52 +14057,52 ; -13663,40 +14110,40 ; -13704,7 +14151,7 ; -13743,7 +14190,7 ; -13780,7 +14227,7 ; -13797,7 +14244,7 ; -13825,7 +14272,7 ; -13834,7 +14281,7 ; -13843,7 +14290,7 ; -13853,7 +14300,7 ; -13863,23 +14310,23 ; -13887,7 +14334,7 ; -13896,7 +14343,7 ; -13905,52 +14352,52 ; -13958,40 +14405,40 ; -13999,7 +14446,7 ; -14038,7 +14485,7 ; -14075,7 +14522,7 ; -14092,7 +14539,7 ; -14120,7 +14567,7 ; -14129,7 +14576,7 ; -14138,7 +14585,7 ; -14148,7 +14595,7 ; -14158,23 +14605,23 ; -14182,7 +14629,7 ; -14191,7 +14638,7 ; -14200,52 +14647,52 ; -14253,40 +14700,40 ; -14294,7 +14741,7 ; -14331,7 +14778,7 ; -14362,7 +14809,7 ; -14377,7 +14824,7 ; -14403,7 +14850,7 ; -14412,7 +14859,7 ; -14422,7 +14869,7 ; -14432,23 +14879,23 ; -14456,7 +14903,7 ; -14465,7 +14912,7 ; -14474,80 +14921,82 ; -14555,10 +15004,10 ; -14591,7 +15040,7 ; -14617,7 +15066,7 ; -14626,7 +15075,7 ; -14643,7 +15092,7 ; -14671,7 +15120,7 ; -14680,7 +15129,7 ; -14689,7 +15138,7 ; -14699,7 +15148,7 ; -14709,23 +15158,23 ; -14735,23 +15184,23 ; -14759,7 +15208,7 ; -14768,7 +15217,7 ; -14777,52 +15226,52 ; -14830,58 +15279,58 ; -14889,40 +15338,40 ; -14930,7 +15379,7 ; -14968,7 +15417,7 ; -14995,12 +15444,12 ; -15009,7 +15458,7 ; -15028,7 +15477,7 ; -15058,7 +15507,7 ; -15067,7 +15516,7 ; -15076,7 +15525,7 ; -15085,7 +15534,7 ; -15095,7 +15544,7 ; -15105,23 +15554,23 ; -15131,23 +15580,23 ; -15157,23 +15606,23 ; -15182,14 +15631,14 ; -15198,7 +15647,7 ; -15207,121 +15656,127 ; -15329,57 +15784,57 ; -15387,40 +15842,40 ; -15429,17 +15884,17 ; -15474,7 +15929,7 ; -15500,7 +15955,7 ; -15509,7 +15964,7 ; -15526,7 +15981,7 ; -15554,7 +16009,7 ; -15563,7 +16018,7 ; -15572,7 +16027,7 ; -15582,7 +16037,7 ; -15592,23 +16047,23 ; -15618,22 +16073,22 ; -15643,23 +16098,23 ; -15667,7 +16122,7 ; -15676,7 +16131,7 ; -15685,50 +16140,54 ; -15736,57 +16195,57 ; -15794,57 +16253,57 ; -15852,40 +16311,40 ; -15893,7 +16352,7 ; -15930,7 +16389,7 ; -15956,7 +16415,7 ; -15965,7 +16424,7 ; -15982,7 +16441,7 ; -16010,7 +16469,7 ; -16019,7 +16478,7 ; -16028,7 +16487,7 ; -16038,7 +16497,7 ; -16048,23 +16507,23 ; -16074,22 +16533,22 ; -16099,23 +16558,23 ; -16124,14 +16583,14 ; -16140,7 +16599,7 ; -16149,50 +16608,54 ; -16200,57 +16663,57 ; -16258,57 +16721,57 ; -16316,40 +16779,40 ; -16358,14 +16821,14 ; -16402,7 +16865,7 ; -16433,7 +16896,7 ; -16448,7 +16911,7 ; -16474,7 +16937,7 ; -16483,7 +16946,7 ; -16493,66 +16956,66 ; -16560,7 +17023,7 ; -16569,7 +17032,7 ; -16578,97 +17041,99 ; -16676,40 +17141,40 ; -16717,7 +17182,7 ; -16752,7 +17217,7 ; -16781,7 +17246,7 ; -16796,7 +17261,7 ; -16822,7 +17287,7 ; -16831,7 +17296,7 ; -16841,7 +17306,7 ; -16851,23 +17316,23 ; -16875,7 +17340,7 ; -16884,7 +17349,7 ; -16893,80 +17358,82 ; -16974,10 +17441,10 ; -17009,7 +17476,7 ; -17038,7 +17505,7 ; -17053,7 +17520,7 ; -17079,7 +17546,7 ; -17088,7 +17555,7 ; -17098,7 +17565,7 ; -17108,23 +17575,23 ; -17134,23 +17601,23 ; -17158,7 +17625,7 ; -17167,7 +17634,7 ; -17176,140 +17643,142 ; -17317,10 +17786,10 ; -17354,7 +17823,7 ; -17381,12 +17850,12 ; -17395,7 +17864,7 ; -17414,7 +17883,7 ; -17445,7 +17914,7 ; -17454,7 +17923,7 ; -17463,7 +17932,7 ; -17472,7 +17941,7 ; -17482,122 +17951,122 ; -17606,14 +18075,14 ; -17622,7 +18091,7 ; -17631,121 +18100,127 ; -17753,57 +18228,57 ; -17811,115 +18286,115 ; -17928,14 +18403,14 ; -17973,7 +18448,7 ; -18002,7 +18477,7 ; -18017,7 +18492,7 ; -18043,7 +18518,7 ; -18052,7 +18527,7 ; -18062,7 +18537,7 ; -18072,23 +18547,23 ; -18098,23 +18573,23 ; -18122,7 +18597,7 ; -18131,7 +18606,7 ; -18140,140 +18615,142 ; -18281,10 +18758,10 ; -18317,7 +18794,7 ; -18343,7 +18820,7 ; -18352,7 +18829,7 ; -18369,7 +18846,7 ; -18408,24 +18885,24 ; -18433,24 +18910,24 ; -18458,7 +18935,7 ; -18468,14 +18945,14 ; -18483,7 +18960,7 ; -18495,63 +18972,63 ; -18559,63 +19036,63 ; -18628,14 +19105,14 ; -18647,120 +19124,120 ; -18769,35 +19246,35 ; -18805,19 +19282,19 ; -18830,7 +19307,7 ; -18846,15 +19323,15 ; -18864,7 +19341,7 ; -18872,7 +19349,7 ; -18882,36 +19359,36 ; -18919,7 +19396,7 ; -18927,19 +19404,19 ; -18950,25 +19427,25 ; -19019,7 +19496,7 ; -19045,7 +19522,7 ; -19054,7 +19531,7 ; -19065,13 +19542,13 ; -19098,8 +19575,8 ; -19107,30 +19584,32 ; -19139,144 +19618,144 ; -19286,7 +19765,7 ; -19295,7 +19774,7 ; -19304,7 +19783,7 ; -19312,10 +19791,10 ; -19324,7 +19803,7 ; -19333,7 +19812,7 ; -19343,7 +19822,7 ; -19352,11 +19831,11 ; -19365,17 +19844,17 ; -19387,7 +19866,7 ; -19398,17 +19877,17 ; -19420,7 +19899,7 ; -19430,7 +19909,7 ; -19446,7 +19925,7 ; -19473,7 +19952,7 ; -19502,7 +19981,7 ; -19517,7 +19996,7 ; -19545,8 +20024,8 ; -19554,30 +20033,32 ; -19586,123 +20067,123 ; -19712,7 +20193,7 ; -19721,7 +20202,7 ; -19730,7 +20211,7 ; -19739,7 +20220,7 ; -19747,10 +20228,10 ; -19759,7 +20240,7 ; -19769,7 +20250,7 ; -19778,7 +20259,7 ; -19788,7 +20269,7 ; -19797,11 +20278,11 ; -19811,7 +20292,7 ; -19821,7 +20302,7 ; -19831,7 +20312,7 ; -19847,7 +20328,7 ; -19873,7 +20354,7 ; -19900,36 +20381,36 ; -19937,35 +20418,35 ; -19973,7 +20454,7 ; -19984,7 +20465,7 ; -19993,40 +20474,40 ; -20039,7 +20520,7 ; -20050,7 +20531,7 ; -20059,23 +20540,23 ; -20115,7 +20596,7 ; -20136,19 +20617,19 ; -20159,28 +20640,28 ; -20190,24 +20671,24 ; -20216,27 +20697,27 ; -20637,9 +21118,7 ; -20700,7 +21179,8 ; -20739,6 +21219,7 ; -20746,9 +21227,11 ; -20759,6 +21242,7 ; -20932,98 +21416,98 ; -21031,1385 +21515,1413 ; -22502,6 +23014,14 ; -22610,7 +23130,7 ; -22620,878 +23140,878 ; -24212,6 +24732,10 ; -24231,6 +24755,7 ;",";;static char __pyx_k_22[] = ""p must be 1-dimensional"";static char __pyx_k_198[] = ""\n        randint(low, high=None, size=None)\n\;static char __pyx_k__svd[] = ""svd"";static char __pyx_k__mode[] = ""mode"";static char __pyx_k__numpy[] = ""numpy"";static char __pyx_k__exponential[] = ""exponential"";static PyObject *__pyx_kp_u_277;static PyObject *__pyx_n_s__hypergeometric;static PyObject *__pyx_n_s__permutation;static PyObject *__pyx_n_s__randn;static PyObject *__pyx_n_s__shuffle;static PyObject *__pyx_k_tuple_23;static PyObject *__pyx_f_6mtrand_cont0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_disc0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discnp_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnmN_array_sc(rk_state *__pyx_v_state, __py;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discd_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_pf_6mtrand_11RandomState_4seed(struct __pyx_obj_6mtrand_;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_20randint(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_22bytes(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_25choice(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_25choice(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_29rand(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_31randn(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_34standard_normal(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_34standard_normal(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pf_6mtrand_11RandomState_42standard_exponential(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_42standard_exponential(struct _;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_56standard_cauchy(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_56standard_cauchy(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_103shuffle(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_105permutation(PyObject *__pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static int __Pyx_InitCachedConstants(void) ;static int __Pyx_InitCachedConstants(void) ;PyMODINIT_FUNC PyInit_mtrand(void;PyMODINIT_FUNC PyInit_mtrand(void;PyMODINIT_FUNC PyInit_mtrand(void;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;"
2820,6,eb77c8d, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 15 Dec 2012 00:31:14 +0100",ct: [PATCH 6/6] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.,3,18,14,numpy/random/mtrand/mtrand.c,[u'20'],7,13," -1,4 +1,4 ; -7347,7 +7347,7 ; -7361,7 +7361,7 ; -7376,18 +7376,12 ; -7402,7 +7396,7 ; -7426,7 +7420,7 ;",;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;
2820,6,eb77c8d, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 15 Dec 2012 00:31:14 +0100",ct: [PATCH 6/6] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.,3,18,14,numpy/random/mtrand/mtrand.pyx,[u'2'],1,1," -1026,7 +1026,7 ;",cdef class RandomState;
2820,6,eb77c8d, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 15 Dec 2012 00:31:14 +0100",ct: [PATCH 6/6] BUG: internal call fix in random.choiceAn random.random call from within mtrand was done by a call tonp.random.random instead of inside the class. This can possibly leadto non-deterministic results after seeding.,3,18,14,numpy/random/tests/test_regression.py,[u'10'],10,0," -63,5 +63,15 ;",def test_shuffle_mixed_dimension(self);
2818,1,45a7a06, Julian Taylor <jtaylor.debian@googlemail.com>," Fri, 14 Dec 2012 14:30:05 +0100",ct: [PATCH] fix a spelling error,1,0,0,numpy/random/mtrand/mtrand.pyx,[u'2'],1,1," -1498,7 +1498,7 ;",cdef class RandomState;
2817,2,c25886d, Mark Wiebe <mwwiebe@gmail.com>," Thu, 6 Dec 2012 15:02:37 -0800",ct: [PATCH 1/2] BUG: Attempt to fix sparc segfault (gh-2668),1,14,0,numpy/core/src/multiarray/dtype_transfer.c,[u'14'],14,0," -3582,6 +3582,13 ; -3678,6 +3685,13 ;",PyArray_GetDTypeTransferFunction(int aligned;PyArray_GetDTypeTransferFunction(int aligned;
2817,2,d676f1f, Mark Wiebe <mwwiebe@gmail.com>," Sun, 9 Dec 2012 13:26:47 -0800","ct: [PATCH 2/2] TST: Add a test for bug gh-2668This is the test attached to the bug from Matthew Brett.I tried to make a simpler test, but it didn't reprothe problem.",1,17,0,numpy/core/tests/test_regression.py,[u'17'],17,0," -1771,5 +1771,22 ;",def test_searchsorted_wrong_dtype(self);
2816,1,ecee2b0, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 6 Dec 2012 14:06:58 -0800",ct: [PATCH] FIX: Add multiarch paths to the distutils' onesThanks to Julian Taylor and Sandro Tosi from Debian for the original patch.Ralf has posted a link to the patch here:http://article.gmane.org/gmane.comp.python.numeric.general/51454I have modified the patch to remove the bare except command only catch theOSError. Also I suppress the stderr.,1,13,0,numpy/distutils/system_info.py,[u'13'],13,0," -214,6 +214,19 ;","def libpaths(paths, bits);"
2815,9,fcd67d4, Han Genuit <hangenuit@gmail.com>," Sun, 16 Sep 2012 20:19:11 +0200",ct: [PATCH 1/9] ENH: Allow objects to use the array interface without specifying data,1,124,105,numpy/core/src/multiarray/ctors.c,[u'229'],21,17," -1978,83 +1978,102 ; -2084,90 +2103,90 ;",PyArray_FromStructInterface(PyObject *input;PyArray_FromInterface(PyObject *input;
2815,9,6385ac4, Han Genuit <hangenuit@gmail.com>," Sun, 16 Sep 2012 20:45:24 +0200",ct: [PATCH 2/9] BUG: Make shape check for special case a bit stricter,1,2,2,numpy/core/src/multiarray/ctors.c,[u'4'],2,2," -2066,8 +2066,8 ;",PyArray_FromInterface(PyObject *origin;
2815,9,b24d971, Han Genuit <hangenuit@gmail.com>," Sun, 16 Sep 2012 20:50:04 +0200",ct: [PATCH 3/9] TST: Add test for special case in array interface,1,14,0,numpy/core/tests/test_multiarray.py,[u'14'],14,0," -2809,6 +2809,20 ;",def test_multiarray_flags_not_writable_attribute_deletion(self);
2815,9,193f2d3, Han Genuit <hangenuit@gmail.com>," Sun, 16 Sep 2012 22:03:49 +0200",ct: [PATCH 4/9] BUG: Make sure empty shapes are disallowed when data is specified,1,10,0,numpy/core/src/multiarray/ctors.c,[u'10'],10,0," -2075,6 +2075,11 ; -2108,6 +2113,11 ;",PyArray_FromInterface(PyObject *origin;PyArray_FromInterface(PyObject *origin;
2815,9,b6ce3bb, Han Genuit <hangenuit@gmail.com>," Thu, 20 Sep 2012 00:58:36 +0200",ct: [PATCH 5/9] BUG: Fixes for Python 3.x,2,18,3,numpy/core/src/multiarray/common.c,[u'19'],17,2," -341,9 +341,24 ;","PyArray_DTypeFromObjectHelper(PyObject *obj, int maxdims;"
2815,9,b6ce3bb, Han Genuit <hangenuit@gmail.com>," Thu, 20 Sep 2012 00:58:36 +0200",ct: [PATCH 5/9] BUG: Fixes for Python 3.x,2,18,3,numpy/core/src/multiarray/ctors.c,[u'2'],1,1," -1980,7 +1980,7 ;",PyArray_FromStructInterface(PyObject *input;
2815,9,911dd03, Han Genuit <hangenuit@gmail.com>," Sun, 30 Sep 2012 19:28:17 +0200",ct: [PATCH 6/9] BUG: Handle scalars correctly.,1,2,2,numpy/core/src/multiarray/ctors.c,[u'4'],2,2," -2067,9 +2067,9 ;",PyArray_FromInterface(PyObject *origin;
2815,9,e575a51, Han Genuit <hangenuit@gmail.com>," Sun, 30 Sep 2012 20:09:24 +0200",ct: [PATCH 7/9] ENH: Assume object is scalar if no shape and data attribute are given,1,24,19,numpy/core/src/multiarray/ctors.c,[u'43'],22,17," -2043,37 +2043,42 ; -2112,7 +2117,7 ;",PyArray_FromInterface(PyObject *origin;PyArray_FromInterface(PyObject *origin;
2815,9,438567f, Han Genuit <hangenuit@gmail.com>," Sun, 30 Sep 2012 21:05:57 +0200",ct: [PATCH 8/9] BUG: Disallow shapesize > 1 when coercing scalar to array,1,7,0,numpy/core/src/multiarray/ctors.c,[u'7'],7,0," -2151,6 +2151,7 ; -2159,6 +2160,12 ;",PyArray_FromInterface(PyObject *origin;PyArray_FromInterface(PyObject *origin;
2815,9,590811f, Han Genuit <hangenuit@gmail.com>," Sun, 30 Sep 2012 21:09:19 +0200",ct: [PATCH 9/9] TST: Add more tests.,1,14,3,numpy/core/tests/test_multiarray.py,[u'17'],14,3," -2810,19 +2810,30 ;",def test_multiarray_flags_not_writable_attribute_deletion(self);
2812,17,48a06cf, David Warde-Farley <wardefar@iro.umontreal.ca>," Wed, 12 Dec 2012 20:38:29 -0500",ct: [PATCH 01/17] ENH: warning on silent truncation of indices,3,20,0,numpy/core/src/multiarray/iterators.c,[u'5'],5,0," -70,6 +70,11 ;","parse_index_entry(PyObject *op, npy_intp *step_size;"
2812,17,48a06cf, David Warde-Farley <wardefar@iro.umontreal.ca>," Wed, 12 Dec 2012 20:38:29 -0500",ct: [PATCH 01/17] ENH: warning on silent truncation of indices,3,20,0,numpy/core/src/multiarray/mapping.c,[u'12'],11,1," -1150,6 +1150,11 ; -1384,7 +1389,12 ;","_tuple_of_integers(PyObject *seq, npy_intp *vals, int maxvals;array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,48a06cf, David Warde-Farley <wardefar@iro.umontreal.ca>," Wed, 12 Dec 2012 20:38:29 -0500",ct: [PATCH 01/17] ENH: warning on silent truncation of indices,3,20,0,numpy/core/src/private/npy_pycompat.h,[u'4'],4,0," -19,6 +19,10 ;",;
2812,17,5b1d7d6, David Warde-Farley <wardefar@iro.umontreal.ca>," Wed, 12 Dec 2012 20:39:11 -0500",ct: [PATCH 02/17] DOC: Clarify a C code comment.,1,4,0,numpy/core/src/multiarray/mapping.c,[u'5'],4,1," -1369,7 +1369,10 ;","array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,f354ade, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 00:05:39 -0500",ct: [PATCH 03/17] STY: C code style.,2,3,6,numpy/core/src/multiarray/iterators.c,[u'3'],1,2," -70,8 +70,7 ;","parse_index_entry(PyObject *op, npy_intp *step_size;"
2812,17,f354ade, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 00:05:39 -0500",ct: [PATCH 03/17] STY: C code style.,2,3,6,numpy/core/src/multiarray/mapping.c,[u'6'],2,4," -1150,8 +1150,7 ; -1393,8 +1392,7 ;","_tuple_of_integers(PyObject *seq, npy_intp *vals, int maxvals;array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,830126c, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 03:44:23 -0500",ct: [PATCH 04/17] TST: Add tests for deprecation warnings.,1,79,0,numpy/core/tests/test_deprecations.py,[u'79'],35,0," -0,0 +1,79 ;",;
2812,17,0aa1a4b, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 17:38:10 -0500",ct: [PATCH 05/17] TST: Add back failing tests + negative index.,1,13,10,numpy/core/tests/test_deprecations.py,[u'23'],13,10," -54,16 +54,19 ;",def test_deprecations(self);
2812,17,e5fce78, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 17:39:05 -0500","ct: [PATCH 06/17] BUG: Explicitly bubble errors up, simple case.",2,8,4,numpy/core/src/multiarray/iterators.c,[u'6'],4,2," -71,8 +71,10 ;","parse_index_entry(PyObject *op, npy_intp *step_size;"
2812,17,e5fce78, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 17:39:05 -0500","ct: [PATCH 06/17] BUG: Explicitly bubble errors up, simple case.",2,8,4,numpy/core/src/multiarray/mapping.c,[u'6'],4,2," -1393,8 +1393,10 ;","array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,783130c, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 17:40:00 -0500","ct: [PATCH 07/17] BUG: Bubble errors from _tuple_of_integers.Refactors _tuple_of_integers a little bit in order to propagate errorstate. Zero indicates failure of the test (given tuple is not a tuple ofintegers), whereas non-zero indicates either success (positive) oran exception during the warning (negative). This allows us to use(ret = _tuple_of_integers(...)) as an if condition, and then put theerror handling inside the if body.",1,20,11,numpy/core/src/multiarray/mapping.c,[u'31'],20,11," -1130,8 +1130,10 ; -1144,19 +1146,21 ; -1263,12 +1267,14 ; -1354,6 +1360,7 ; -1375,12 +1382,14 ;","array_ass_sub_simple(PyArrayObject *self, PyObject *ind, PyObject *op;_tuple_of_integers(PyObject *seq, npy_intp *vals, int maxvals;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;array_subscript_nice(PyArrayObject *self, PyObject *op;array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,ac749af, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 18:18:38 -0500",ct: [PATCH 08/17] Fix typo in module-level comment.,1,0,0,numpy/core/tests/test_deprecations.py,[u'2'],1,1," -1,5 +1,5 ;",;
2812,17,9c87855, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 18:37:12 -0500",ct: [PATCH 09/17] STY: comment blank line/*'s.,1,6,5,numpy/core/src/multiarray/mapping.c,[u'11'],6,5," -1130,11 +1130,12 ;","array_ass_sub_simple(PyArrayObject *self, PyObject *ind, PyObject *op;"
2812,17,484f876, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 18:48:18 -0500",ct: [PATCH 10/17] REF: move tuple checks into function.,1,8,5,numpy/core/src/multiarray/mapping.c,[u'13'],8,5," -1129,6 +1129,12 ; -1266,8 +1272,7 ; -1380,9 +1385,7 ;","array_ass_sub_simple(PyArrayObject *self, PyObject *ind, PyObject *op;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,2ca3a24, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 13 Dec 2012 18:54:59 -0500",ct: [PATCH 11/17] ENH: Add NPY_INLINE to _is_full_index.,1,0,0,numpy/core/src/multiarray/mapping.c,[u'2'],1,1," -1130,7 +1130,7 ;","array_ass_sub_simple(PyArrayObject *self, PyObject *ind, PyObject *op;"
2812,17,5acc7df, David Warde-Farley <wardefar@iro.umontreal.ca>," Fri, 14 Dec 2012 00:27:45 -0500",ct: [PATCH 12/17] REF: nested conditionals for readability.,1,30,24,numpy/core/src/multiarray/mapping.c,[u'54'],20,17," -1272,23 +1272,26 ; -1385,23 +1388,26 ;","array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;array_subscript_nice(PyArrayObject *self, PyObject *op;"
2812,17,3a0b66e, David Warde-Farley <wardefar@iro.umontreal.ca>," Fri, 14 Dec 2012 00:40:07 -0500",ct: [PATCH 13/17] TST: disable DeprecationWarning tests in 2.4These DeprecationWarnings use a Python 2.5+ feature (PyIndex_Check) anddon't fire for 2.4 (support for which will be dropped shortly anyway).,1,6,0,numpy/core/tests/test_deprecations.py,[u'7'],6,1," -2,9 +2,12 ; -47,6 +50,8 ;",;def tearDown(self);
2812,17,5de9999, David Warde-Farley <wardefar@iro.umontreal.ca>," Fri, 14 Dec 2012 04:52:13 -0500",ct: [PATCH 14/17] TST: Add tests for non-int slice deprecation.,1,68,3,numpy/core/tests/test_deprecations.py,[u'71'],33,2," -28,7 +28,7 ; -41,11 +41,11 ; -72,6 +72,10 ; -85,3 +89,64 ;","def check_does_not_raise(f, category);class TestFloatIndexDeprecation(object);def test_deprecations(self);def test_valid_not_deprecated(self);"
2812,17,1515155, David Warde-Farley <wardefar@iro.umontreal.ca>," Fri, 14 Dec 2012 04:53:56 -0500",ct: [PATCH 15/17] ENH: DeprecationWarning for non-int slice indices.,1,35,2,numpy/core/src/multiarray/iterators.c,[u'37'],33,2," -229,8 +229,32 ; -242,6 +266,9 ; -257,6 +284,9 ; -275,6 +305,9 ;","slice_coerce_index(PyObject *o, npy_intp *v;slice_GetIndices(PySliceObject *r, npy_intp length;slice_GetIndices(PySliceObject *r, npy_intp length;slice_GetIndices(PySliceObject *r, npy_intp length;"
2812,17,8ff916a, David Warde-Farley <wardefar@iro.umontreal.ca>," Fri, 14 Dec 2012 05:09:46 -0500",ct: [PATCH 16/17] DOC: Deprecation info for float-slicing.,1,22,7,numpy/core/tests/test_deprecations.py,[u'29'],22,7," -30,15 +30,17 ; -92,6 +94,19 ;","def check_does_not_raise(f, category);def test_valid_not_deprecated(self);"
2812,17,bb0952d, David Warde-Farley <wardefar@iro.umontreal.ca>," Fri, 14 Dec 2012 21:08:03 -0500",ct: [PATCH 17/17] DOC: Comments about deprecation timeframe.,1,16,0,numpy/core/tests/test_deprecations.py,[u'16'],16,0," -41,6 +41,14 ; -106,6 +114,14 ;",class TestFloatScalarIndexDeprecation(object);class TestFloatSliceParameterDeprecation(object);
2809,1,bc2b290," ""Bradley M. Froehle"" <brad.froehle@gmail.com>"," Wed, 12 Dec 2012 10:35:56 -0800",ct: [PATCH] BUG: site.cfg.example should describe the actual BLAS detection process,1,51,29,site.cfg.example,[u'80'],36,20," -65,30 +65,67 ; -128,18 +165,3 ;",;;
2800,2,6d3950c, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 8 Dec 2012 14:07:46 +0100","ct: [PATCH 1/2] BUG: Fix regression for in1d with non-array inputThere was a regression introduced by the speed improvement incommit 6441c2a. This fixes it, and generally ravels the arrays fornp.in1d. However it can be argued that at least the first array shouldnot be ravelled in the future.Fixes ""Issue gh-2755""",2,7,2,numpy/lib/arraysetops.py,[u'4'],4,0," -324,6 +324,10 ;","def in1d(ar1, ar2, assume_unique=False);"
2800,2,6d3950c, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 8 Dec 2012 14:07:46 +0100","ct: [PATCH 1/2] BUG: Fix regression for in1d with non-array inputThere was a regression introduced by the speed improvement incommit 6441c2a. This fixes it, and generally ravels the arrays fornp.in1d. However it can be argued that at least the first array shouldnot be ravelled in the future.Fixes ""Issue gh-2755""",2,7,2,numpy/lib/tests/test_arraysetops.py,[u'5'],3,2," -124,8 +124,9 ;",def test_in1d(self);
2800,2,b0ac985, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 16 Dec 2012 05:50:43 +0100","ct: [PATCH 2/2] TST: Add test for in1d ravellingThe behavior of in1d is not really defined here, but it shouldbe at least consistent over different execution branches. This iswhat it has been for most usages.",1,13,0,numpy/lib/tests/test_arraysetops.py,[u'13'],13,0," -189,6 +189,19 ;",def test_in1d_char_array( self );
2798,2,1ee872c, cgohlke <cgohlke@uci.edu>," Fri, 7 Dec 2012 15:10:13 -0800",ct: [PATCH 1/2] FIX `ValueError: low level cast function is for unequal type numbers` for object types,1,0,0,numpy/core/src/multiarray/dtype_transfer.c,[u'1'],1,0," -1476,6 +1476,7 ;",get_cast_transfer_function(int aligned;
2798,2,3e83a76, cgohlke <cgohlke@uci.edu>," Fri, 21 Dec 2012 01:07:03 -0800",ct: [PATCH 2/2] Add test for issue #2798,1,5,0,numpy/core/tests/test_dtype.py,[u'5'],5,0," -418,6 +418,11 ;",def test_dtype_str_with_long_in_shape(self);
2797,6,9340dd4, Jay Bourque <jay.bourque@continuum.io>," Fri, 7 Dec 2012 11:12:38 -0600",ct: [PATCH 1/6] Fix invalid typestring sizeRevert to pre numpy 1.7 behavior where invalid typestring size was ignored and isplay deprecate warning. This warning should eventually be changed to an error in future numpy versions.,1,22,0,numpy/core/src/multiarray/conversion_utils.c,[u'22'],22,0," -954,6 +954,7 ; -1105,7 +1106,28 ;","NPY_NO_EXPORT in;PyArray_TypestrConvert(int itemsize, int gentype;"
2797,6,d288e39, Jay Bourque <jay.bourque@continuum.io>," Tue, 11 Dec 2012 13:54:56 -0600",ct: [PATCH 2/6] Refactor to cover more cases; modify unit tests,3,38,30,numpy/core/src/multiarray/conversion_utils.c,[u'42'],16,12," -955,6 +955,8 ; -1106,28 +1108,32 ;","PyArray_TypestrConvert(int itemsize, int gentype;PyArray_TypestrConvert(int itemsize, int gentype;"
2797,6,d288e39, Jay Bourque <jay.bourque@continuum.io>," Tue, 11 Dec 2012 13:54:56 -0600",ct: [PATCH 2/6] Refactor to cover more cases; modify unit tests,3,38,30,numpy/core/tests/test_datetime.py,[u'11'],4,4," -48,12 +48,11 ;",def test_datetime_dtype_creation(self);
2797,6,d288e39, Jay Bourque <jay.bourque@continuum.io>," Tue, 11 Dec 2012 13:54:56 -0600",ct: [PATCH 2/6] Refactor to cover more cases; modify unit tests,3,38,30,numpy/core/tests/test_dtype.py,[u'15'],6,4," -47,13 +47,16 ;",def test_equivalent_dtype_hashing(self);
2797,6,ab2d5d2, Jay Bourque <jay.bourque@continuum.io>," Fri, 14 Dec 2012 14:09:29 -0600",ct: [PATCH 3/6] Modify unit tests for 32 bit support,1,17,2,numpy/core/tests/test_dtype.py,[u'19'],17,2," -51,11 +51,26 ;",def test_invalid_types(self);
2797,6,6209e3e, Jay Bourque <jay.bourque@continuum.io>," Mon, 17 Dec 2012 11:42:36 -0600",ct: [PATCH 4/6] Refactor unit tests and add DECREF- Refactor unit tests for invalid dtypes so that each test is on a separate line. This will make it easier to figure out which typestring is failing the unit test.- Add Py_DECREF for temp variable,2,11,7,numpy/core/src/multiarray/conversion_utils.c,[u'1'],1,0," -1121,6 +1121,7 ;","PyArray_TypestrConvert(int itemsize, int gentype;"
2797,6,6209e3e, Jay Bourque <jay.bourque@continuum.io>," Mon, 17 Dec 2012 11:42:36 -0600",ct: [PATCH 4/6] Refactor unit tests and add DECREF- Refactor unit tests for invalid dtypes so that each test is on a separate line. This will make it easier to figure out which typestring is failing the unit test.- Add Py_DECREF for temp variable,2,11,7,numpy/core/tests/test_dtype.py,[u'17'],10,7," -47,15 +47,20 ; -71,8 +76,6 ;",def test_equivalent_dtype_hashing(self);def test_invalid_types(self);
2797,6,d0aca0e, Jay Bourque <jay.bourque@continuum.io>," Fri, 21 Dec 2012 13:39:19 -0600",ct: [PATCH 5/6] Add debug logging to figure out why unit test fails on Travis,1,10,0,numpy/core/src/multiarray/conversion_utils.c,[u'10'],10,0," -1116,9 +1116,19 ;","PyArray_TypestrConvert(int itemsize, int gentype;"
2797,6,5de0b6e, Jay Bourque <jay.bourque@continuum.io>," Fri, 21 Dec 2012 14:29:52 -0600",ct: [PATCH 6/6] Add fix to unit test; remove debug loggingAdd check to see if 12 bytes is a valid size for a long double,2,5,11,numpy/core/src/multiarray/conversion_utils.c,[u'10'],0,10," -1116,19 +1116,9 ;","PyArray_TypestrConvert(int itemsize, int gentype;"
2797,6,5de0b6e, Jay Bourque <jay.bourque@continuum.io>," Fri, 21 Dec 2012 14:29:52 -0600",ct: [PATCH 6/6] Add fix to unit test; remove debug loggingAdd check to see if 12 bytes is a valid size for a long double,2,5,11,numpy/core/tests/test_dtype.py,[u'6'],5,1," -60,7 +60,11 ;",def test_invalid_types(self);
2795,1,761ba5d, Dan Hipschman <dsh@linux.ucla.edu>," Thu, 6 Dec 2012 21:01:43 -0800",ct: [PATCH] Fix distutils build_src with 'c++' in swig_opts and a c++ comment in the .i file (issue #2551),1,2,5,numpy/distutils/command/build_src.py,[u'7'],2,5," -673,24 +673,21 ;","def swig_sources(self, sources, extension);"
2794,2,e0dd41c, Mark Wiebe <mwwiebe@gmail.com>," Thu, 6 Dec 2012 15:02:37 -0800",ct: [PATCH 1/2] BUG: Attempt to fix sparc segfault (gh-2668),1,14,0,numpy/core/src/multiarray/dtype_transfer.c,[u'14'],14,0," -3582,6 +3582,13 ; -3678,6 +3685,13 ;",PyArray_GetDTypeTransferFunction(int aligned;PyArray_GetDTypeTransferFunction(int aligned;
2794,2,c95da7d, Mark Wiebe <mwwiebe@gmail.com>," Sun, 9 Dec 2012 13:26:47 -0800","ct: [PATCH 2/2] TST: Add a test for bug gh-2668This is the test attached to the bug from Matthew Brett.I tried to make a simpler test, but it didn't reprothe problem.",1,17,0,numpy/core/tests/test_regression.py,[u'17'],17,0," -1812,5 +1812,22 ;",def test_searchsorted_wrong_dtype(self);
2793,5,2da0d22, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 01:43:06 +0100",ct: [PATCH 1/5] ENH: make random.choice size argument default to None and allow tupleThe size argument to random.choice should work like it does for allother functions in random as well.,1,16,10,numpy/random/mtrand/mtrand.pyx,[u'26'],16,10," -916,7 +916,7 ; -929,8 +929,9 ; -1017,26 +1018,30 ; -1045,17 +1050,18 ;",cdef class RandomState;cdef class RandomState;cdef class RandomState;cdef class RandomState;
2793,5,7b10fc9, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 01:44:33 +0100","ct: [PATCH 2/5] BUG: Do not sort new indices in random.choice.Random choice used np.unique to find new indices when replacewas False and p given. This is wrong since unique will sort theindices. This solves the bug, but likely not ideal.",1,3,2,numpy/random/mtrand/mtrand.pyx,[u'5'],3,2," -1049,8 +1049,9 ;",cdef class RandomState;
2793,5,3e5b9b2, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 17:46:54 +0100",ct: [PATCH 3/5] BUG: Fix various problems in the previous commits.Thanks to @alan-isaac for pointing out the 0-d vs. scalar issue.,1,17,9,numpy/random/mtrand/mtrand.pyx,[u'26'],17,9," -1018,8 +1018,8 ; -1028,6 +1028,7 ; -1045,25 +1046,32 ;",cdef class RandomState;cdef class RandomState;cdef class RandomState;
2793,5,7f9d7bc, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 17:48:55 +0100",ct: [PATCH 4/5] TST: Add tests for new feature and fix in random.choice,1,27,0,numpy/random/tests/test_random.py,[u'28'],27,1," -138,7 +138,7 ; -161,6 +161,32 ;",def test_choice_nonuniform_noreplace(self);def test_choice_exceptions(self);
2793,5,24a1bcd, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 17 Nov 2012 12:35:30 +0100",ct: [PATCH 5/5] MAINT: Regenerate mtrand.c,1,3827,3302,numpy/random/mtrand/mtrand.c,[u'7129'],23,19," -1,4 +1,4 ; -53,12 +53,15 ; -828,10 +831,8 ; -889,82 +890,82 ; -983,7 +984,8 ; -991,10 +993,12 ; -1018,6 +1022,7 ; -1073,6 +1078,7 ; -1212,9 +1218,7 ; -1275,7 +1279,8 ; -1314,6 +1319,7 ; -1321,9 +1327,11 ; -1334,6 +1342,7 ; -1391,6 +1400,8 ; -1574,9 +1585,11 ; -1726,9 +1739,11 ; -1817,8 +1832,8 ; -1844,9 +1859,11 ; -1873,11 +1890,13 ; -1886,8 +1905,8 ; -1920,8 +1939,8 ; -1936,13 +1955,15 ; -1960,11 +1981,13 ; -1999,8 +2022,8 ; -2048,7 +2071,7 ; -2142,9 +2165,11 ; -2232,8 +2257,8 ; -2259,9 +2284,11 ; -2270,11 +2297,13 ; -2292,8 +2321,8 ; -2344,8 +2373,8 ; -2360,13 +2389,15 ; -2384,11 +2415,13 ; -2423,8 +2456,8 ; -2490,7 +2523,7 ; -2583,9 +2616,11 ; -2674,8 +2709,8 ; -2701,9 +2736,11 ; -2712,11 +2749,13 ; -2734,8 +2773,8 ; -2795,8 +2834,8 ; -2811,13 +2850,15 ; -2835,11 +2876,13 ; -2874,8 +2917,8 ; -2941,7 +2984,7 ; -3029,9 +3072,11 ; -3176,9 +3221,11 ; -3266,8 +3313,8 ; -3293,9 +3340,11 ; -3304,11 +3353,13 ; -3326,8 +3377,8 ; -3378,8 +3429,8 ; -3389,13 +3440,15 ; -3413,11 +3466,13 ; -3452,8 +3507,8 ; -3519,7 +3574,7 ; -3607,9 +3662,11 ; -3697,8 +3754,8 ; -3724,9 +3781,11 ; -3735,11 +3794,13 ; -3757,8 +3818,8 ; -3809,8 +3870,8 ; -3820,13 +3881,15 ; -3844,11 +3907,13 ; -3883,8 +3948,8 ; -3950,7 +4015,7 ; -4038,9 +4103,11 ; -4129,8 +4196,8 ; -4156,9 +4223,11 ; -4167,11 +4236,13 ; -4189,8 +4260,8 ; -4250,8 +4321,8 ; -4261,13 +4332,15 ; -4285,11 +4358,13 ; -4324,8 +4399,8 ; -4391,7 +4466,7 ; -4479,9 +4554,11 ; -4570,8 +4647,8 ; -4597,9 +4674,11 ; -4626,11 +4705,13 ; -4639,8 +4720,8 ; -4673,8 +4754,8 ; -4684,13 +4765,15 ; -4708,11 +4791,13 ; -4747,8 +4832,8 ; -4796,7 +4881,7 ; -5253,9 +5338,11 ; -5345,9 +5432,11 ; -5365,32 +5454,34 ; -5400,8 +5491,8 ; -5410,10 +5501,10 ; -5422,15 +5513,15 ; -5491,7 +5582,8 ; -5725,9 +5817,11 ; -5736,8 +5830,8 ; -5749,9 +5843,9 ; -5763,12 +5857,14 ; -5847,8 +5943,8 ; -5857,6 +5953,7 ; -6514,9 +6611,11 ; -6683,7 +6782,7 ; -6695,16 +6794,16 ; -6771,13 +6870,18 ; -6787,16 +6891,20 ; -6809,19 +6917,19 ; -6834,46 +6942,46 ; -6882,50 +6990,50 ; -6935,65 +7043,65 ; -7002,128 +7110,128 ; -7131,27 +7239,27 ; -7160,508 +7268,678 ; -7673,87 +7951,199 ; -7763,18 +8153,25 ; -7797,8 +8194,8 ; -7834,7 +8231,7 ; -7851,7 +8248,7 ; -7880,7 +8277,7 ; -7889,7 +8286,7 ; -7898,7 +8295,7 ; -7908,7 +8305,7 ; -7916,7 +8313,7 ; -7925,7 +8322,7 ; -7934,45 +8331,49 ; -7980,14 +8381,14 ; -7996,20 +8397,22 ; -8017,10 +8420,10 ; -8058,7 +8461,7 ; -8079,18 +8482,18 ; -8098,9 +8501,9 ; -8110,7 +8513,7 ; -8118,12 +8521,12 ; -8164,7 +8567,7 ; -8185,18 +8588,18 ; -8204,9 +8607,9 ; -8216,7 +8619,7 ; -8224,14 +8627,14 ; -8269,7 +8672,7 ; -8305,7 +8708,7 ; -8322,7 +8725,7 ; -8347,7 +8750,7 ; -8357,7 +8760,7 ; -8368,7 +8771,7 ; -8382,7 +8785,7 ; -8390,11 +8793,11 ; -8405,7 +8808,7 ; -8441,7 +8844,7 ; -8466,7 +8869,7 ; -8479,7 +8882,7 ; -8499,7 +8902,7 ; -8507,7 +8910,7 ; -8541,7 +8944,7 ; -8578,7 +8981,7 ; -8595,7 +8998,7 ; -8623,7 +9026,7 ; -8632,7 +9035,7 ; -8641,7 +9044,7 ; -8651,7 +9054,7 ; -8661,23 +9064,23 ; -8685,7 +9088,7 ; -8694,7 +9097,7 ; -8703,50 +9106,54 ; -8754,40 +9161,40 ; -8795,7 +9202,7 ; -8832,7 +9239,7 ; -8858,7 +9265,7 ; -8867,7 +9274,7 ; -8884,7 +9291,7 ; -8912,7 +9319,7 ; -8921,7 +9328,7 ; -8930,7 +9337,7 ; -8940,7 +9347,7 ; -8950,23 +9357,23 ; -8976,23 +9383,23 ; -9000,7 +9407,7 ; -9009,7 +9416,7 ; -9018,50 +9425,54 ; -9069,57 +9480,57 ; -9127,40 +9538,40 ; -9168,7 +9579,7 ; -9205,7 +9616,7 ; -9236,7 +9647,7 ; -9251,7 +9662,7 ; -9277,7 +9688,7 ; -9286,7 +9697,7 ; -9296,7 +9707,7 ; -9306,23 +9717,23 ; -9330,7 +9741,7 ; -9339,7 +9750,7 ; -9348,80 +9759,82 ; -9429,10 +9842,10 ; -9463,7 +9876,7 ; -9488,7 +9901,7 ; -9501,7 +9914,7 ; -9521,7 +9934,7 ; -9529,7 +9942,7 ; -9560,7 +9973,7 ; -9589,7 +10002,7 ; -9604,7 +10017,7 ; -9630,7 +10043,7 ; -9639,7 +10052,7 ; -9649,7 +10062,7 ; -9659,23 +10072,23 ; -9683,7 +10096,7 ; -9692,7 +10105,7 ; -9701,80 +10114,82 ; -9782,10 +10197,10 ; -9819,7 +10234,7 ; -9854,7 +10269,7 ; -9871,7 +10286,7 ; -9899,7 +10314,7 ; -9908,7 +10323,7 ; -9917,7 +10332,7 ; -9927,7 +10342,7 ; -9937,23 +10352,23 ; -9963,23 +10378,23 ; -9987,7 +10402,7 ; -9996,7 +10411,7 ; -10005,52 +10420,56 ; -10058,59 +10477,59 ; -10118,40 +10537,40 ; -10159,7 +10578,7 ; -10196,7 +10615,7 ; -10222,7 +10641,7 ; -10231,7 +10650,7 ; -10248,7 +10667,7 ; -10276,7 +10695,7 ; -10285,7 +10704,7 ; -10294,7 +10713,7 ; -10304,7 +10723,7 ; -10314,23 +10733,23 ; -10340,23 +10759,23 ; -10364,7 +10783,7 ; -10373,7 +10792,7 ; -10382,52 +10801,56 ; -10435,59 +10858,59 ; -10495,40 +10918,40 ; -10536,7 +10959,7 ; -10574,7 +10997,7 ; -10601,12 +11024,12 ; -10615,7 +11038,7 ; -10634,7 +11057,7 ; -10664,7 +11087,7 ; -10673,7 +11096,7 ; -10682,7 +11105,7 ; -10691,7 +11114,7 ; -10701,7 +11124,7 ; -10711,23 +11134,23 ; -10737,23 +11160,23 ; -10763,23 +11186,23 ; -10788,14 +11211,14 ; -10804,7 +11227,7 ; -10813,226 +11236,232 ; -11041,17 +11470,17 ; -11085,7 +11514,7 ; -11114,7 +11543,7 ; -11129,7 +11558,7 ; -11155,7 +11584,7 ; -11164,7 +11593,7 ; -11174,7 +11603,7 ; -11184,23 +11613,23 ; -11208,7 +11637,7 ; -11217,7 +11646,7 ; -11226,80 +11655,82 ; -11307,10 +11738,10 ; -11343,7 +11774,7 ; -11369,7 +11800,7 ; -11378,7 +11809,7 ; -11395,7 +11826,7 ; -11423,7 +11854,7 ; -11432,7 +11863,7 ; -11441,7 +11872,7 ; -11451,7 +11882,7 ; -11461,23 +11892,23 ; -11487,23 +11918,23 ; -11512,14 +11943,14 ; -11528,7 +11959,7 ; -11537,52 +11968,56 ; -11590,59 +12025,59 ; -11650,40 +12085,40 ; -11692,14 +12127,14 ; -11734,7 +12169,7 ; -11759,7 +12194,7 ; -11772,7 +12207,7 ; -11792,7 +12227,7 ; -11800,7 +12235,7 ; -11831,7 +12266,7 ; -11860,7 +12295,7 ; -11875,7 +12310,7 ; -11901,7 +12336,7 ; -11910,7 +12345,7 ; -11920,7 +12355,7 ; -11930,23 +12365,23 ; -11954,7 +12389,7 ; -11963,7 +12398,7 ; -11972,80 +12407,82 ; -12053,10 +12490,10 ; -12089,7 +12526,7 ; -12115,7 +12552,7 ; -12124,7 +12561,7 ; -12141,7 +12578,7 ; -12169,7 +12606,7 ; -12178,7 +12615,7 ; -12187,7 +12624,7 ; -12197,7 +12634,7 ; -12207,23 +12644,23 ; -12231,7 +12668,7 ; -12240,7 +12677,7 ; -12249,52 +12686,56 ; -12302,40 +12743,40 ; -12343,7 +12784,7 ; -12379,7 +12820,7 ; -12408,7 +12849,7 ; -12423,7 +12864,7 ; -12449,7 +12890,7 ; -12458,7 +12899,7 ; -12468,7 +12909,7 ; -12478,23 +12919,23 ; -12502,7 +12943,7 ; -12511,7 +12952,7 ; -12520,80 +12961,82 ; -12601,10 +13044,10 ; -12636,7 +13079,7 ; -12665,7 +13108,7 ; -12680,7 +13123,7 ; -12706,7 +13149,7 ; -12715,7 +13158,7 ; -12725,7 +13168,7 ; -12735,23 +13178,23 ; -12759,7 +13202,7 ; -12768,7 +13211,7 ; -12777,80 +13220,82 ; -12858,10 +13303,10 ; -12893,7 +13338,7 ; -12922,7 +13367,7 ; -12937,7 +13382,7 ; -12963,7 +13408,7 ; -12972,7 +13417,7 ; -12982,7 +13427,7 ; -12992,23 +13437,23 ; -13016,7 +13461,7 ; -13025,7 +13470,7 ; -13034,80 +13479,82 ; -13115,10 +13562,10 ; -13153,7 +13600,7 ; -13190,7 +13637,7 ; -13207,7 +13654,7 ; -13235,7 +13682,7 ; -13244,7 +13691,7 ; -13253,7 +13700,7 ; -13263,7 +13710,7 ; -13273,23 +13720,23 ; -13297,7 +13744,7 ; -13306,7 +13753,7 ; -13315,52 +13762,52 ; -13368,40 +13815,40 ; -13409,7 +13856,7 ; -13448,7 +13895,7 ; -13485,7 +13932,7 ; -13502,7 +13949,7 ; -13530,7 +13977,7 ; -13539,7 +13986,7 ; -13548,7 +13995,7 ; -13558,7 +14005,7 ; -13568,23 +14015,23 ; -13592,7 +14039,7 ; -13601,7 +14048,7 ; -13610,52 +14057,52 ; -13663,40 +14110,40 ; -13704,7 +14151,7 ; -13743,7 +14190,7 ; -13780,7 +14227,7 ; -13797,7 +14244,7 ; -13825,7 +14272,7 ; -13834,7 +14281,7 ; -13843,7 +14290,7 ; -13853,7 +14300,7 ; -13863,23 +14310,23 ; -13887,7 +14334,7 ; -13896,7 +14343,7 ; -13905,52 +14352,52 ; -13958,40 +14405,40 ; -13999,7 +14446,7 ; -14038,7 +14485,7 ; -14075,7 +14522,7 ; -14092,7 +14539,7 ; -14120,7 +14567,7 ; -14129,7 +14576,7 ; -14138,7 +14585,7 ; -14148,7 +14595,7 ; -14158,23 +14605,23 ; -14182,7 +14629,7 ; -14191,7 +14638,7 ; -14200,52 +14647,52 ; -14253,40 +14700,40 ; -14294,7 +14741,7 ; -14331,7 +14778,7 ; -14362,7 +14809,7 ; -14377,7 +14824,7 ; -14403,7 +14850,7 ; -14412,7 +14859,7 ; -14422,7 +14869,7 ; -14432,23 +14879,23 ; -14456,7 +14903,7 ; -14465,7 +14912,7 ; -14474,80 +14921,82 ; -14555,10 +15004,10 ; -14591,7 +15040,7 ; -14617,7 +15066,7 ; -14626,7 +15075,7 ; -14643,7 +15092,7 ; -14671,7 +15120,7 ; -14680,7 +15129,7 ; -14689,7 +15138,7 ; -14699,7 +15148,7 ; -14709,23 +15158,23 ; -14735,23 +15184,23 ; -14759,7 +15208,7 ; -14768,7 +15217,7 ; -14777,52 +15226,52 ; -14830,58 +15279,58 ; -14889,40 +15338,40 ; -14930,7 +15379,7 ; -14968,7 +15417,7 ; -14995,12 +15444,12 ; -15009,7 +15458,7 ; -15028,7 +15477,7 ; -15058,7 +15507,7 ; -15067,7 +15516,7 ; -15076,7 +15525,7 ; -15085,7 +15534,7 ; -15095,7 +15544,7 ; -15105,23 +15554,23 ; -15131,23 +15580,23 ; -15157,23 +15606,23 ; -15182,14 +15631,14 ; -15198,7 +15647,7 ; -15207,121 +15656,127 ; -15329,57 +15784,57 ; -15387,40 +15842,40 ; -15429,17 +15884,17 ; -15474,7 +15929,7 ; -15500,7 +15955,7 ; -15509,7 +15964,7 ; -15526,7 +15981,7 ; -15554,7 +16009,7 ; -15563,7 +16018,7 ; -15572,7 +16027,7 ; -15582,7 +16037,7 ; -15592,23 +16047,23 ; -15618,22 +16073,22 ; -15643,23 +16098,23 ; -15667,7 +16122,7 ; -15676,7 +16131,7 ; -15685,50 +16140,54 ; -15736,57 +16195,57 ; -15794,57 +16253,57 ; -15852,40 +16311,40 ; -15893,7 +16352,7 ; -15930,7 +16389,7 ; -15956,7 +16415,7 ; -15965,7 +16424,7 ; -15982,7 +16441,7 ; -16010,7 +16469,7 ; -16019,7 +16478,7 ; -16028,7 +16487,7 ; -16038,7 +16497,7 ; -16048,23 +16507,23 ; -16074,22 +16533,22 ; -16099,23 +16558,23 ; -16124,14 +16583,14 ; -16140,7 +16599,7 ; -16149,50 +16608,54 ; -16200,57 +16663,57 ; -16258,57 +16721,57 ; -16316,40 +16779,40 ; -16358,14 +16821,14 ; -16402,7 +16865,7 ; -16433,7 +16896,7 ; -16448,7 +16911,7 ; -16474,7 +16937,7 ; -16483,7 +16946,7 ; -16493,66 +16956,66 ; -16560,7 +17023,7 ; -16569,7 +17032,7 ; -16578,97 +17041,99 ; -16676,40 +17141,40 ; -16717,7 +17182,7 ; -16752,7 +17217,7 ; -16781,7 +17246,7 ; -16796,7 +17261,7 ; -16822,7 +17287,7 ; -16831,7 +17296,7 ; -16841,7 +17306,7 ; -16851,23 +17316,23 ; -16875,7 +17340,7 ; -16884,7 +17349,7 ; -16893,80 +17358,82 ; -16974,10 +17441,10 ; -17009,7 +17476,7 ; -17038,7 +17505,7 ; -17053,7 +17520,7 ; -17079,7 +17546,7 ; -17088,7 +17555,7 ; -17098,7 +17565,7 ; -17108,23 +17575,23 ; -17134,23 +17601,23 ; -17158,7 +17625,7 ; -17167,7 +17634,7 ; -17176,140 +17643,142 ; -17317,10 +17786,10 ; -17354,7 +17823,7 ; -17381,12 +17850,12 ; -17395,7 +17864,7 ; -17414,7 +17883,7 ; -17445,7 +17914,7 ; -17454,7 +17923,7 ; -17463,7 +17932,7 ; -17472,7 +17941,7 ; -17482,122 +17951,122 ; -17606,14 +18075,14 ; -17622,7 +18091,7 ; -17631,121 +18100,127 ; -17753,57 +18228,57 ; -17811,115 +18286,115 ; -17928,14 +18403,14 ; -17973,7 +18448,7 ; -18002,7 +18477,7 ; -18017,7 +18492,7 ; -18043,7 +18518,7 ; -18052,7 +18527,7 ; -18062,7 +18537,7 ; -18072,23 +18547,23 ; -18098,23 +18573,23 ; -18122,7 +18597,7 ; -18131,7 +18606,7 ; -18140,140 +18615,142 ; -18281,10 +18758,10 ; -18317,7 +18794,7 ; -18343,7 +18820,7 ; -18352,7 +18829,7 ; -18369,7 +18846,7 ; -18408,24 +18885,24 ; -18433,24 +18910,24 ; -18458,7 +18935,7 ; -18468,14 +18945,14 ; -18483,7 +18960,7 ; -18495,63 +18972,63 ; -18559,63 +19036,63 ; -18628,14 +19105,14 ; -18647,120 +19124,120 ; -18769,35 +19246,35 ; -18805,19 +19282,19 ; -18830,7 +19307,7 ; -18846,15 +19323,15 ; -18864,7 +19341,7 ; -18872,7 +19349,7 ; -18882,36 +19359,36 ; -18919,7 +19396,7 ; -18927,19 +19404,19 ; -18950,25 +19427,25 ; -19019,7 +19496,7 ; -19045,7 +19522,7 ; -19054,7 +19531,7 ; -19065,13 +19542,13 ; -19098,8 +19575,8 ; -19107,30 +19584,32 ; -19139,144 +19618,144 ; -19286,7 +19765,7 ; -19295,7 +19774,7 ; -19304,7 +19783,7 ; -19312,10 +19791,10 ; -19324,7 +19803,7 ; -19333,7 +19812,7 ; -19343,7 +19822,7 ; -19352,11 +19831,11 ; -19365,17 +19844,17 ; -19387,7 +19866,7 ; -19398,17 +19877,17 ; -19420,7 +19899,7 ; -19430,7 +19909,7 ; -19446,7 +19925,7 ; -19473,7 +19952,7 ; -19502,7 +19981,7 ; -19517,7 +19996,7 ; -19545,8 +20024,8 ; -19554,30 +20033,32 ; -19586,123 +20067,123 ; -19712,7 +20193,7 ; -19721,7 +20202,7 ; -19730,7 +20211,7 ; -19739,7 +20220,7 ; -19747,10 +20228,10 ; -19759,7 +20240,7 ; -19769,7 +20250,7 ; -19778,7 +20259,7 ; -19788,7 +20269,7 ; -19797,11 +20278,11 ; -19811,7 +20292,7 ; -19821,7 +20302,7 ; -19831,7 +20312,7 ; -19847,7 +20328,7 ; -19873,7 +20354,7 ; -19900,36 +20381,36 ; -19937,35 +20418,35 ; -19973,7 +20454,7 ; -19984,7 +20465,7 ; -19993,40 +20474,40 ; -20039,7 +20520,7 ; -20050,7 +20531,7 ; -20059,23 +20540,23 ; -20115,7 +20596,7 ; -20136,19 +20617,19 ; -20159,28 +20640,28 ; -20190,24 +20671,24 ; -20216,27 +20697,27 ; -20637,9 +21118,7 ; -20700,7 +21179,8 ; -20739,6 +21219,7 ; -20746,9 +21227,11 ; -20759,6 +21242,7 ; -20932,98 +21416,98 ; -21031,1385 +21515,1413 ; -22502,6 +23014,14 ; -22610,7 +23130,7 ; -22620,878 +23140,878 ; -24212,6 +24732,10 ; -24231,6 +24755,7 ;",";;static char __pyx_k_22[] = ""p must be 1-dimensional"";static char __pyx_k_198[] = ""\n        randint(low, high=None, size=None)\n\;static char __pyx_k__svd[] = ""svd"";static char __pyx_k__mode[] = ""mode"";static char __pyx_k__numpy[] = ""numpy"";static char __pyx_k__exponential[] = ""exponential"";static PyObject *__pyx_kp_u_277;static PyObject *__pyx_n_s__hypergeometric;static PyObject *__pyx_n_s__permutation;static PyObject *__pyx_n_s__randn;static PyObject *__pyx_n_s__shuffle;static PyObject *__pyx_k_tuple_23;static PyObject *__pyx_f_6mtrand_cont0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont1_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont2_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_cont3_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_disc0_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discnp_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnp_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array_sc(rk_state *__pyx_v_state, __pyx;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discdd_array(rk_state *__pyx_v_state, __pyx_t_;static PyObject *__pyx_f_6mtrand_discnmN_array_sc(rk_state *__pyx_v_state, __py;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discnmN_array(rk_state *__pyx_v_state, __pyx_t;static PyObject *__pyx_f_6mtrand_discd_array_sc(rk_state *__pyx_v_state, __pyx_;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_f_6mtrand_discd_array(rk_state *__pyx_v_state, __pyx_t_6;static PyObject *__pyx_pf_6mtrand_11RandomState_4seed(struct __pyx_obj_6mtrand_;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_6get_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_8set_state(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_20randint(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_22bytes(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_25choice(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_25choice(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_29rand(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_31randn(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_34standard_normal(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_34standard_normal(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pf_6mtrand_11RandomState_42standard_exponential(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_42standard_exponential(struct _;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_56standard_cauchy(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_56standard_cauchy(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_103shuffle(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_105permutation(PyObject *__pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static int __Pyx_InitCachedConstants(void) ;static int __Pyx_InitCachedConstants(void) ;PyMODINIT_FUNC PyInit_mtrand(void;PyMODINIT_FUNC PyInit_mtrand(void;PyMODINIT_FUNC PyInit_mtrand(void;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;static CYTHON_INLINE npy_intp __Pyx_PyInt_from_py_npy_intp(PyObject* x) ;"
2792,1,aa8c948, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Thu, 6 Dec 2012 14:06:58 -0800",ct: [PATCH] FIX: Add multiarch paths to the distutils' onesThanks to Julian Taylor and Sandro Tosi from Debian for the original patch.Ralf has posted a link to the patch here:http://article.gmane.org/gmane.comp.python.numeric.general/51454I have modified the patch to remove the bare except command only catch theOSError. Also I suppress the stderr.,1,13,0,numpy/distutils/system_info.py,[u'13'],13,0," -214,6 +214,19 ;","def libpaths(paths, bits);"
2791,1,c6c95f4, Julian Taylor <jtaylor.debian@googlemail.com>," Wed, 5 Dec 2012 19:57:38 +0100",ct: [PATCH] add platform specific python include directories to search pathsthe generic and platform specific path diverge in python3.3 in ubuntu 13.04,1,8,2,numpy/distutils/system_info.py,[u'10'],8,2," -1623,6 +1623,9 ; -1754,12 +1757,15 ;",def __init__(self);def calc_info(self);
2789,3,3190a57, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 11:32:14 +0100","ct: [PATCH 1/3] FIX: base always refers to the original subclassCloses #470The use case is that if b is a memmap, 'np.asarray(b).base' should be amemmap, and thus we put is to b in such a situation.",2,6,4,numpy/core/src/multiarray/arrayobject.c,[u'6'],3,3," -168,10 +168,10 ;","PyArray_SetBaseObject(PyArrayObject *arr, PyObject *obj;"
2789,3,3190a57, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 11:32:14 +0100","ct: [PATCH 1/3] FIX: base always refers to the original subclassCloses #470The use case is that if b is a memmap, 'np.asarray(b).base' should be amemmap, and thus we put is to b in such a situation.",2,6,4,numpy/core/tests/test_memmap.py,[u'4'],3,1," -3,7 +3,7 ; -112,6 +112,8 ;",;def test_view(self);
2789,3,0c50c56, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 13:40:19 +0100",ct: [PATCH 2/3] COMMENT: fix grammar in comment,1,2,2,numpy/core/src/multiarray/arrayobject.c,[u'4'],2,2," -168,8 +168,8 ;","PyArray_SetBaseObject(PyArrayObject *arr, PyObject *obj;"
2789,3,c9a4966, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 14:21:52 +0100",ct: [PATCH 3/3] MISC: fix whitespace in C file,1,2,2,numpy/core/src/multiarray/arrayobject.c,[u'4'],2,2," -103,7 +103,7 ; -169,7 +169,7 ;","PyArray_SetUpdateIfCopyBase(PyArrayObject *arr, PyArrayObject *base;PyArray_SetBaseObject(PyArrayObject *arr, PyObject *obj;"
2788,1,7088661, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 4 Dec 2012 23:26:15 +0100",ct: [PATCH] MAINT: Add FutureWarnings for changes of np.insert/np.deleteIn numpy 1.8. boolean arrays will be treated like boolean indexing.Also special casing of scalars will be removed from both functions.,1,18,0,numpy/lib/function_base.py,[u'18'],18,0," -3423,6 +3423,12 ; -3438,6 +3444,9 ; -3568,6 +3577,12 ; -3582,6 +3597,9 ;","def delete(arr, obj, axis=None);def delete(arr, obj, axis=None);def insert(arr, obj, values, axis=None);def insert(arr, obj, values, axis=None);"
2787,2,14fc783," ""Bradley M. Froehle"" <brad.froehle@gmail.com>"," Tue, 4 Dec 2012 10:23:11 -0800","ct: [PATCH 1/2] BUG: gh-2785, np.unique: TypeError: requested sort not available for typeRevert ""BUG: ticket #2063, make unique return consistent index.""This reverts commit 74b9f5eef8fac643bf9012dbb2ac6b4b19f46892.Conflicts:	numpy/core/tests/test_regression.pyThis commit introduced a regression in `np.unique` for certain data types:  >>> A = np.array([[1, 2], [1, 3], [1, 2]], dtype='i')  >>> B, I, J = np.unique(A.view([('', A.dtype)]*A.shape[1]), True, True)  Traceback (most recent call last):    File "".../numpy/lib/arraysetops.py"", line 178, in unique      perm = ar.argsort(kind='mergesort')  TypeError: requested sort not available for type",2,3,15,numpy/core/tests/test_regression.py,[u'9'],0,9," -1611,15 +1611,6 ;",def test_assign_obj_listoflists(self);
2787,2,14fc783," ""Bradley M. Froehle"" <brad.froehle@gmail.com>"," Tue, 4 Dec 2012 10:23:11 -0800","ct: [PATCH 1/2] BUG: gh-2785, np.unique: TypeError: requested sort not available for typeRevert ""BUG: ticket #2063, make unique return consistent index.""This reverts commit 74b9f5eef8fac643bf9012dbb2ac6b4b19f46892.Conflicts:	numpy/core/tests/test_regression.pyThis commit introduced a regression in `np.unique` for certain data types:  >>> A = np.array([[1, 2], [1, 3], [1, 2]], dtype='i')  >>> B, I, J = np.unique(A.view([('', A.dtype)]*A.shape[1]), True, True)  Traceback (most recent call last):    File "".../numpy/lib/arraysetops.py"", line 178, in unique      perm = ar.argsort(kind='mergesort')  TypeError: requested sort not available for type",2,3,15,numpy/lib/arraysetops.py,[u'9'],3,6," -112,8 +112,8 ; -174,10 +174,7 ;","def unique(ar, return_index=False, return_inverse=False);def unique(ar, return_index=False, return_inverse=False);"
2787,2,46e3b4c," ""Bradley M. Froehle"" <brad.froehle@gmail.com>"," Tue, 4 Dec 2012 10:38:33 -0800",ct: [PATCH 2/2] TST: Add test for gh-2785.Ensure that np.unique works on data types with special comparators.,1,12,0,numpy/core/tests/test_regression.py,[u'12'],12,0," -1616,5 +1616,17 ;",def test_search_sorted_invalid_arguments(self);
2784,1,6227952, Luis Pedro Coelho <luis@luispedro.org>," Mon, 3 Dec 2012 11:06:02 +0000","ct: [PATCH] API Make PyArray_DATA return void*PyArray_DATA is documented as returning void*. Changing it to returnchar* breaks code such as (in C++)::    float* my_floats = static_cast<float*>(PyArray_DATA(my_array));PyArray_BYTES returns char*, but is otherwise the same function.",2,9,6,numpy/core/include/numpy/ndarraytypes.h,[u'13'],8,5," -1389,12 +1389,18 ; -1469,15 +1475,12 ;","PyArray_NDIM(const PyArrayObject *arr;PyArray_SETITEM(PyArrayObject *arr, char *itemptr, PyObject *v;"
2784,1,6227952, Luis Pedro Coelho <luis@luispedro.org>," Mon, 3 Dec 2012 11:06:02 +0000","ct: [PATCH] API Make PyArray_DATA return void*PyArray_DATA is documented as returning void*. Changing it to returnchar* breaks code such as (in C++)::    float* my_floats = static_cast<float*>(PyArray_DATA(my_array));PyArray_BYTES returns char*, but is otherwise the same function.",2,9,6,numpy/core/src/multiarray/getset.c,[u'2'],1,1," -131,7 +131,7 ;","array_strides_set(PyArrayObject *self, PyObject *obj;"
2783,1,f6e9414, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Mon, 3 Dec 2012 17:49:35 -0800",ct: [PATCH] DOC: Remove whitespace from README,1,2,2,README.txt,[u'4'],2,2," -1,10 +1,10 ;",;
2782,1,dd14dd0, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 21 Nov 2012 15:33:32 +0100",ct: [PATCH] BUG: Incorrect type in _attempt_nocopy_reshapeThis caused a segmentation fault for some large reshapes as reportedby Terry J. Ligocki on the mailing list.,1,0,0,numpy/core/src/multiarray/shape.c,[u'2'],1,1," -435,8 +435,8 ;","_attempt_nocopy_reshape(PyArrayObject *self, int newnd, npy_intp* newdims;"
2780,1,7855b26, Luis Pedro Coelho <luis@luispedro.org>," Mon, 3 Dec 2012 11:06:02 +0000","ct: [PATCH] API Make PyArray_DATA return void*PyArray_DATA is documented as returning void*. Changing it to returnchar* breaks code such as (in C++)::    float* my_floats = static_cast<float*>(PyArray_DATA(my_array));PyArray_BYTES returns char*, but is otherwise the same function.",2,9,6,numpy/core/include/numpy/ndarraytypes.h,[u'13'],8,5," -1390,12 +1390,18 ; -1470,15 +1476,12 ;","PyArray_NDIM(const PyArrayObject *arr;PyArray_SETITEM(PyArrayObject *arr, char *itemptr, PyObject *v;"
2780,1,7855b26, Luis Pedro Coelho <luis@luispedro.org>," Mon, 3 Dec 2012 11:06:02 +0000","ct: [PATCH] API Make PyArray_DATA return void*PyArray_DATA is documented as returning void*. Changing it to returnchar* breaks code such as (in C++)::    float* my_floats = static_cast<float*>(PyArray_DATA(my_array));PyArray_BYTES returns char*, but is otherwise the same function.",2,9,6,numpy/core/src/multiarray/getset.c,[u'2'],1,1," -131,7 +131,7 ;","array_strides_set(PyArrayObject *self, PyObject *obj;"
2779,2,f8700f0, Charles Harris <charlesr.harris@gmail.com>," Sun, 2 Dec 2012 11:07:24 -0700",ct: [PATCH 1/2] ENH: Expose Euler-Mascheroni constant.This closes issue gh-2753.,1,2,0,numpy/core/src/umath/umathmodule.c,[u'2'],2,0," -384,6 +384,8 ;",PyMODINIT_FUNC initumath(void;
2779,2,86d7845, Charles Harris <charlesr.harris@gmail.com>," Sun, 2 Dec 2012 11:12:15 -0700",ct: [PATCH 2/2] MAINT: Use NPY_E to expose 'e'.Previously 'e' was defined as exp(1.),1,0,0,numpy/core/src/umath/umathmodule.c,[u'2'],1,1," -382,7 +382,7 ;",PyMODINIT_FUNC initumath(void;
2777,1,300783c, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 1 Dec 2012 21:44:49 +0100","ct: [PATCH] BUG: Fix bad memory access for 0-sized outputs in numpy dotThis fixes a bug where bad memory was written to in non-blasnumpy if the output was a (0, N) array. Closes ""Issue gh-2775"".",2,16,13,numpy/core/src/multiarray/multiarraymodule.c,[u'19'],7,12," -862,6 +862,11 ; -876,16 +881,13 ; -994,10 +996,6 ; -1013,16 +1011,13 ;","PyArray_InnerProduct(PyObject *op1, PyObject *op2;PyArray_InnerProduct(PyObject *op1, PyObject *op2;PyArray_MatrixProduct2(PyObject *op1, PyObject *op2, PyArrayObject* out;PyArray_MatrixProduct2(PyObject *op1, PyObject *op2, PyArrayObject* out;"
2777,1,300783c, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 1 Dec 2012 21:44:49 +0100","ct: [PATCH] BUG: Fix bad memory access for 0-sized outputs in numpy dotThis fixes a bug where bad memory was written to in non-blasnumpy if the output was a (0, N) array. Closes ""Issue gh-2775"".",2,16,13,numpy/core/tests/test_regression.py,[u'10'],9,1," -209,7 +209,15 ;","def test_mem_dot(self,level=rlevel);"
2774,1,9c02535, endolith <endolith@gmail.com>," Fri, 30 Nov 2012 11:43:46 -0500",ct: [PATCH] Add note about definition list classifier formatand some other small changes,1,9,8,doc/HOWTO_DOCUMENT.rst.txt,[u'17'],9,8," -147,7 +147,7 ; -180,11 +180,12 ; -211,7 +212,7 ; -579,10 +580,10 ;",The sections of the docstring are;The sections of the docstring are;The sections of the docstring are;Common reST concept;
2773,6,048e448, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 30 Nov 2012 03:21:38 +0100",ct: [PATCH 1/6] BUG: Ensure clean strides for the buffer interface.,1,32,7,numpy/core/src/multiarray/buffer.c,[u'39'],31,7," -440,11 +440,13 ; -467,9 +469,32 ; -513,7 +538,7 ; -526,7 +551,7 ; -648,7 +673,7 ;","static PyObject *_buffer_info_cache = NULL;_buffer_info_new(PyArrayObject *arr;_buffer_info_free(_buffer_info_t *info;_buffer_get_info(PyObject *arr;array_getbuffer(PyObject *obj, Py_buffer *view, int flags;"
2773,6,0b55276, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 30 Nov 2012 03:22:22 +0100","ct: [PATCH 2/6] FIX: Ensure clean strides for FromArray if result is contiguousThis ensures that when FromArray is asked to ensure a contiguousarray, a view is returned when the strides do not match, even ifthe intput array was already contiguous.",1,39,6,numpy/core/src/multiarray/ctors.c,[u'45'],33,6," -917,10 +917,7 ; -1881,21 +1878,57 ;","PyArray_NewFromDescr(PyTypeObject *subtype, PyArray_Descr *descr, int nd;PyArray_FromArray(PyArrayObject *arr, PyArray_Descr *newtype, int flags;"
2773,6,a3047c6, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 30 Nov 2012 14:26:35 +0100","ct: [PATCH 3/6] FIX: Make python array creation functions return clean stridesWhen a contiguous array is explicitely requested, make sure thatstrides are cleaned up if necessary. This unfortunatly removessome shortcuts though.",1,24,10,numpy/core/src/multiarray/multiarraymodule.c,[u'34'],20,8," -1512,18 +1512,30 ; -1549,12 +1561,9 ; -1593,9 +1602,14 ; -1664,7 +1678,7 ;","PyArray_EquivTypenums(int typenum1, int typenum2;_prepend_ones(PyArrayObject *arr, int nd, int ndmin;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;"
2773,6,a195983, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 30 Nov 2012 14:27:43 +0100",ct: [PATCH 4/6] TST: Check that new requested contiguous arrays have clean strides.,1,45,0,numpy/core/tests/test_api.py,[u'45'],44,0," -234,5 +234,50 ;","def check_contig(a, ccontig, fcontig);"
2773,6,3ad8809, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 1 Dec 2012 23:58:31 +0100","ct: [PATCH 5/6] FIX: Do not special case strides of 0-sized arrays.After a shape[i] == 0, the strides will be 0 (while before it wastreated like shape[i] == 1). This removes the special case, on thedown side, the stride order is not as clear due to that.The same was true for the amount of memory is allocated for 0-sized arrays.",3,23,32,numpy/core/src/multiarray/buffer.c,[u'4'],2,2," -480,14 +480,14 ;","_buffer_info_new(PyArrayObject *arr, int flags;"
2773,6,3ad8809, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 1 Dec 2012 23:58:31 +0100","ct: [PATCH 5/6] FIX: Do not special case strides of 0-sized arrays.After a shape[i] == 0, the strides will be 0 (while before it wastreated like shape[i] == 1). This removes the special case, on thedown side, the stride order is not as clear due to that.The same was true for the amount of memory is allocated for 0-sized arrays.",3,23,32,numpy/core/src/multiarray/ctors.c,[u'18'],4,14," -3617,14 +3617,9 ; -3635,14 +3630,9 ;","_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;"
2773,6,3ad8809, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 1 Dec 2012 23:58:31 +0100","ct: [PATCH 5/6] FIX: Do not special case strides of 0-sized arrays.After a shape[i] == 0, the strides will be 0 (while before it wastreated like shape[i] == 1). This removes the special case, on thedown side, the stride order is not as clear due to that.The same was true for the amount of memory is allocated for 0-sized arrays.",3,23,32,numpy/core/tests/test_api.py,[u'33'],17,16," -248,7 +248,6 ; -258,21 +257,23 ;","def check_clean(a, order, check_view=False);def check_clean(a, order, check_view=False);"
2773,6,d686bc1, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 6 Dec 2012 14:04:35 +0100",ct: [PATCH 6/6] MAINT: Style and documentation fixes.,3,16,10,numpy/core/src/multiarray/buffer.c,[u'5'],4,1," -470,7 +470,10 ;","_buffer_info_new(PyArrayObject *arr, int flags;"
2773,6,d686bc1, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 6 Dec 2012 14:04:35 +0100",ct: [PATCH 6/6] MAINT: Style and documentation fixes.,3,16,10,numpy/core/src/multiarray/ctors.c,[u'4'],3,1," -1883,7 +1883,9 ;","PyArray_FromArray(PyArrayObject *arr, PyArray_Descr *newtype, int flags;"
2773,6,d686bc1, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 6 Dec 2012 14:04:35 +0100",ct: [PATCH 6/6] MAINT: Style and documentation fixes.,3,16,10,numpy/core/src/multiarray/multiarraymodule.c,[u'17'],9,8," -1522,8 +1522,10 ; -1561,9 +1563,6 ; -1603,7 +1602,7 ; -1612,7 +1611,8 ; -1625,7 +1625,8 ;","_prepend_ones(PyArrayObject *arr, int nd, int ndmin, NPY_ORDER order;_prepend_ones(PyArrayObject *arr, int nd, int ndmin, NPY_ORDER order;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;"
2772,1,e9beee6," ""Travis E. Oliphant"" <teoliphant@gmail.com>"," Thu, 29 Nov 2012 02:20:58 -0600",ct: [PATCH] BUG: Fix bad call of internal functionand fix usage of PyField_Names,1,10,11,numpy/core/src/multiarray/scalarapi.c,[u'21'],10,11," -502,7 +502,7 ; -561,16 +561,15 ;",PyArray_FieldNames(PyObject *fields;PyArray_DescrFromScalar(PyObject *sc;
2769,1,f3905dc," ""Nathaniel J. Smith"" <njs@pobox.com>"," Sun, 25 Nov 2012 21:09:13 +0000",ct: [PATCH] FIX: Use 'pip' for travis build.Closes gh-2768.,1,10,0,.travis.yml,[u'11'],10,1," -45,7 +45,16 ;",before_install;
2767,2,e33dbfc, Charles Harris <charlesr.harris@gmail.com>," Fri, 23 Nov 2012 16:44:05 -0700",ct: [PATCH 1/2] BUG: Import run_module_suite in test_matlib.pyThis is needed so test_matlib.py can be run by python.,1,0,0,numpy/tests/test_matlib.py,[u'2'],1,1," -1,6 +1,6 ;",;
2767,2,da5ee65, Charles Harris <charlesr.harris@gmail.com>," Fri, 23 Nov 2012 17:16:35 -0700",ct: [PATCH 2/2] BUG: Remove print statement in test_endian_recarray.This print statement was responsible for the annoying 1 thatshowed up in the test output stream.,1,0,2,numpy/core/tests/test_regression.py,[u'2'],0,2," -203,10 +203,8 ;","def test_endian_recarray(self,level=rlevel);"
2766,2,649c908, Gabriel <g2p.code@gmail.com>," Fri, 23 Nov 2012 23:48:47 +0100","ct: [PATCH 1/2] Assume we can use sys.stdout.fileno() and friends.The workaround shouldn't be necessary in a recent python shell.Tested in python, ipython.In fact, distutils is almost never imported and run manually from aninteractive shell.This removes the use of `sys.__stdout__`, which broke with distribute0.6.30 on Python 3.",1,5,7,numpy/distutils/exec_command.py,[u'12'],5,7," -194,7 +194,7 ; -348,12 +348,10 ;","def exec_command( command;def _exec_command( command, use_shell=None, use_tee = None, **env );"
2766,2,df2958e, Gabriel <g2p.code@gmail.com>," Sat, 24 Nov 2012 01:49:39 +0100",ct: [PATCH 2/2] Code cleanup,1,0,0,numpy/distutils/exec_command.py,[u'2'],1,1," -194,7 +194,7 ;",def exec_command( command;
2765,4,38c150c, Charles Harris <charlesr.harris@gmail.com>," Fri, 23 Nov 2012 09:33:05 -0700","ct: [PATCH 1/4] BUG: gh-2757, masked array var method should zero masked out parameter.When a is a 1-d masked array with all values masked and b is a 0-d maskedarray, then a.var(out=b) fails to set the underlying masked value of b,causing an invalid value warning to be raised in a.std(out=b) whenever bcontained a masked negative number. This fix sets the underlying value to0, which is consistent with the n-d case. A better fix might be to add anout parameter to the masked array ufuncs, but that is a bigger project.",1,0,0,numpy/ma/core.py,[u'1'],1,0," -4749,6 +4749,7 ;","def var(self, axis=None, dtype=None, out=None, ddof=0);"
2765,4,7678c98, Charles Harris <charlesr.harris@gmail.com>," Fri, 23 Nov 2012 09:46:40 -0700",ct: [PATCH 2/4] TST: Add test for gh-2757.,1,9,0,numpy/ma/tests/test_regression.py,[u'9'],9,0," -1,5 +1,6 ; -50,5 +51,13 ;",;def test_set_fill_value_unicode_py3(self);
2765,4,65ed5eb, Charles Harris <charlesr.harris@gmail.com>," Fri, 23 Nov 2012 10:14:39 -0700",ct: [PATCH 3/4] MAINT: Avoid unneeded call in masked array std method.The square root of the variance was taken twice when the out parameterwas specified.,1,0,0,numpy/ma/core.py,[u'2'],1,1," -4774,10 +4774,10 ;","def std(self, axis=None, dtype=None, out=None, ddof=0);"
2765,4,1871820, Charles Harris <charlesr.harris@gmail.com>," Fri, 23 Nov 2012 10:19:24 -0700","ct: [PATCH 4/4] MAINT: In test_varstd_specialcases out parameters should be 0-d.The original worked, but that is because the masked array methodsare not properly checking dimensions in this case. That shouldalso be fixed at some point.",1,2,2,numpy/ma/tests/test_core.py,[u'4'],2,2," -2718,8 +2718,8 ;",def test_varstd(self);
2760,1,e0fa00e, Richard Hattersley <rhattersley@gmail.com>," Thu, 22 Nov 2012 16:02:05 +0000",ct: [PATCH] A quicker way to set mask values.,1,10,0,numpy/ma/core.py,[u'10'],10,0," -3087,6 +3087,11 ; -3116,6 +3121,11 ;","def __setmask__(self, mask, copy=False);def __setmask__(self, mask, copy=False);"
2758,1,9f1b872, Ralf Gommers <ralf.gommers@googlemail.com>," Wed, 21 Nov 2012 22:08:52 +0100","ct: [PATCH] TST: also filter Cython warnings in NoseTester.  See PR-432.There a resetwarnings() call, so need to add back these filters.",1,2,0,numpy/testing/nosetester.py,[u'2'],2,0," -365,6 +365,8 ;","def test(self, label='fast', verbose=1, extra_argv=None;"
2754,1,bdfae97, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 21 Nov 2012 15:33:32 +0100",ct: [PATCH] BUG: Incorrect type in _attempt_nocopy_reshapeThis caused a segmentation fault for some large reshapes as reportedby Terry J. Ligocki on the mailing list.,1,0,0,numpy/core/src/multiarray/shape.c,[u'2'],1,1," -355,8 +355,8 ;","_attempt_nocopy_reshape(PyArrayObject *self, int newnd, npy_intp* newdims;"
2751,1,781292a," ""Bradley M. Froehle"" <brad.froehle@gmail.com>"," Sun, 18 Nov 2012 14:26:18 -0800","ct: [PATCH] ENH: Respect blas_opt and lapack_opt groups in site.cfg.Previously blas_opt and lapack_opt would only be merged into theautodetected BLAS and LAPACK libraries. This prevented using customLAPACK and BLAS implementation if a system installed version ofATLAS (or similar) was present.Now the presence of a blas_opt or lapack_opt section completelyoverrides the respective autodetection mechanisms, as the site.cfgdocumentation would already lead you to believe.Closes #2728.",1,12,0,numpy/distutils/system_info.py,[u'12'],12,0," -1340,10 +1340,16 ; -1429,10 +1435,16 ;",def get_atlas_version(**config);def calc_info(self);
2749,3,ab13a65, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 19:31:19 +0200",ct: [PATCH 1/3] ENH: f2py: generate docstrings in Numpy docstring format,5,53,22,numpy/f2py/capi_maps.py,[u'16'],8,8," -367,26 +367,26 ;","def getpydocsign(a,var);"
2749,3,ab13a65, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 19:31:19 +0200",ct: [PATCH 1/3] ENH: f2py: generate docstrings in Numpy docstring format,5,53,22,numpy/f2py/rules.py,[u'27'],14,13," -259,7 +259,7 ; -351,10 +351,10 ; -482,7 +482,7 ; -618,7 +618,7 ; -698,9 +698,9 ; -732,7 +732,7 ; -990,7 +990,7 ; -1004,7 +1004,7 ; -1322,6 +1322,7 ;",";;;;;;;;def buildmodule(m,um);"
2749,3,ab13a65, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 19:31:19 +0200",ct: [PATCH 1/3] ENH: f2py: generate docstrings in Numpy docstring format,5,53,22,numpy/f2py/src/fortranobject.c,[u'2'],1,1," -126,9 +126,9 ;",fortran_doc (FortranDataDef def) ;
2749,3,ab13a65, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 19:31:19 +0200",ct: [PATCH 1/3] ENH: f2py: generate docstrings in Numpy docstring format,5,53,22,numpy/f2py/tests/test_callback.py,[u'25'],25,0," -38,6 +38,31 ;",def test_all(self);
2749,3,ab13a65, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 19:31:19 +0200",ct: [PATCH 1/3] ENH: f2py: generate docstrings in Numpy docstring format,5,53,22,numpy/f2py/tests/test_mixed.py,[u'5'],5,0," -20,6 +20,11 ;",def test_all(self);
2749,3,4b500dd, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 20:24:37 +0200",ct: [PATCH 2/3] ENH: f2py: add 'Wrapper for ...' text to the docstring,3,4,2,numpy/f2py/rules.py,[u'2'],1,1," -259,7 +259,7 ;",;
2749,3,4b500dd, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 20:24:37 +0200",ct: [PATCH 2/3] ENH: f2py: add 'Wrapper for ...' text to the docstring,3,4,2,numpy/f2py/tests/test_callback.py,[u'2'],2,0," -43,6 +43,8 ;",def test_docstring(self);
2749,3,4b500dd, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 20:24:37 +0200",ct: [PATCH 2/3] ENH: f2py: add 'Wrapper for ...' text to the docstring,3,4,2,numpy/f2py/tests/test_mixed.py,[u'2'],1,1," -23,7 +23,7 ;",def test_all(self);
2749,3,7b3e6fa, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 20:52:08 +0200",ct: [PATCH 3/3] TST: f2py: rewrite strings to be easier to read,2,39,26,numpy/f2py/tests/test_callback.py,[u'52'],21,18," -2,6 +2,7 ; -40,30 +41,33 ;",;def test_all(self);
2749,3,7b3e6fa, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 20:52:08 +0200",ct: [PATCH 3/3] TST: f2py: rewrite strings to be easier to read,2,39,26,numpy/f2py/tests/test_mixed.py,[u'13'],8,2," -5,6 +5,7 ; -22,8 +23,16 ;",;def test_all(self);
2748,1,e1a67c3, Pauli Virtanen <pav@iki.fi>," Sat, 17 Nov 2012 14:28:47 +0200","ct: [PATCH] BUG: core: wrap npy_math.h into extern ""C"" so that it works correctly in C++",1,8,0,numpy/core/include/numpy/npy_math.h,[u'8'],8,0," -1,6 +1,10 ; -432,4 +436,8 ;",;void npy_set_floatstatus_overflow(void);
2747,2,0196aed, Michael Droettboom <mdboom@gmail.com>," Thu, 15 Nov 2012 13:45:45 -0500","ct: [PATCH 1/2] Fixes #2432.  Rather than creating a new data array and assigning to it (which doesn't work when it is a recarray containing object fields), just create a copy with the np.array constructor.",1,0,2,numpy/ma/core.py,[u'3'],1,2," -5509,8 +5509,7 ;",class mvoid(MaskedArray);
2747,2,457b78f, Michael Droettboom <mdboom@gmail.com>," Mon, 3 Dec 2012 09:29:02 -0500",ct: [PATCH 2/2] Add a test,1,12,0,numpy/ma/tests/test_mrecords.py,[u'12'],12,0," -502,6 +502,18 ;",def test_addfield(self);
2746,3,e4fe789, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 11:32:14 +0100","ct: [PATCH 1/3] FIX: base always refers to the original subclassCloses #470The use case is that if b is a memmap, 'np.asarray(b).base' should be amemmap, and thus we put is to b in such a situation.",2,6,4,numpy/core/src/multiarray/arrayobject.c,[u'6'],3,3," -168,10 +168,10 ;","PyArray_SetBaseObject(PyArrayObject *arr, PyObject *obj;"
2746,3,e4fe789, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 11:32:14 +0100","ct: [PATCH 1/3] FIX: base always refers to the original subclassCloses #470The use case is that if b is a memmap, 'np.asarray(b).base' should be amemmap, and thus we put is to b in such a situation.",2,6,4,numpy/core/tests/test_memmap.py,[u'4'],3,1," -3,7 +3,7 ; -112,6 +112,8 ;",;def test_view(self);
2746,3,b3bcda2, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 13:40:19 +0100",ct: [PATCH 2/3] COMMENT: fix grammar in comment,1,2,2,numpy/core/src/multiarray/arrayobject.c,[u'4'],2,2," -168,8 +168,8 ;","PyArray_SetBaseObject(PyArrayObject *arr, PyObject *obj;"
2746,3,69d57d0, GaelVaroquaux <gael.varoquaux@normalesup.org>," Thu, 15 Nov 2012 14:21:52 +0100",ct: [PATCH 3/3] MISC: fix whitespace in C file,1,2,2,numpy/core/src/multiarray/arrayobject.c,[u'4'],2,2," -103,7 +103,7 ; -169,7 +169,7 ;","PyArray_SetUpdateIfCopyBase(PyArrayObject *arr, PyArrayObject *base;PyArray_SetBaseObject(PyArrayObject *arr, PyObject *obj;"
2745,1,2d841a8, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Wed, 14 Nov 2012 15:04:55 -0800","ct: [PATCH] TST: Catch possible warningsPreviously the test sometimes fails with the following error:======================================================================ERROR: Test a special case for var----------------------------------------------------------------------Traceback (most recent call last):  File ""/home/travis/virtualenv/python3.2/lib/python3.2/site-packages/numpy/ma/tests/test_core.py"", line 2731, in test_varstd_specialcases    _ = method(out=mout)  File ""/home/travis/virtualenv/python3.2/lib/python3.2/site-packages/numpy/ma/core.py"", line 4778, in std    np.power(out, 0.5, out=out, casting='unsafe')RuntimeWarning: invalid value encountered in power----------------------------------------------------------------------Now we catch it, as recommended by the thread:http://old.nabble.com/Should-abs(-nan-)-be-supported--td34389839.html",1,14,2,numpy/ma/tests/test_core.py,[u'16'],14,2," -2728,11 +2728,23 ;",def test_varstd_specialcases(self);
2744,1,ddbb4bd, Stefan van der Walt <stefan@sun.ac.za>," Wed, 14 Nov 2012 13:56:24 -0800",ct: [PATCH] PKG: Fix minor typo in setup.py.,1,0,0,setup.py,[u'2'],1,1," -51,7 +51,7 ;",;
2742,2,9fc5e63, Frederic <nouiz@nouiz.org>," Tue, 6 Nov 2012 14:18:12 -0500","ct: [PATCH 1/2] BUG: Remove pointer cast from the PyArray_BYTES macro.This fixes a compilation problem encountered with numpy 1.7 when thePyArray_BYTES macro was used as an lvalue in Theano. The macro worked as anlvalue in 1.6 and in 1.7 only the struct name was changed, which makes theproblem a bit of a mystery, but Theano compiles with this fix.",1,0,0,numpy/core/include/numpy/ndarraytypes.h,[u'2'],1,1," -1476,7 +1476,7 ;","PyArray_SETITEM(PyArrayObject *arr, char *itemptr, PyObject *v;"
2742,2,abf0489, Charles Harris <charlesr.harris@gmail.com>," Tue, 6 Nov 2012 18:33:32 -0700",ct: [PATCH 2/2] BUG: Remove pointer cast from the PyArray_DATA macro.This lets PyArray_DATA be used as an lvalue as some compilers raised anerror with the previous version. The type is now determined by the type ofthe struct member and is char*.  PyArray_BYTES had the same problem whenused as an lvalue in Theano and the same fix is used here.  This problemneeds a bigger fix at some point as the function equivalent of the macrodoes not return an lvalue.,1,2,2,numpy/core/include/numpy/ndarraytypes.h,[u'4'],2,2," -1476,8 +1476,8 ;","PyArray_SETITEM(PyArrayObject *arr, char *itemptr, PyObject *v;"
2741,2,bab0e45, Sebastian Berg <sebastian@sipsolutions.net>," Mon, 1 Oct 2012 19:24:41 +0200","ct: [PATCH 1/2] BUG: Fix complex to bool conversion in lowlevel_strided_loopsCloses ""Ticket 2218"".",1,10,2,numpy/core/src/multiarray/lowlevel_strided_loops.c.src,[u'12'],10,2," -811,9 +811,17 ;",static voi;
2741,2,dc0ca35, Sebastian Berg <sebastian@sipsolutions.net>," Mon, 1 Oct 2012 19:32:26 +0200",ct: [PATCH 2/2] TST: Complex to bool conversion (Ticket 2218),1,8,0,numpy/core/tests/test_regression.py,[u'8'],8,0," -1459,6 +1459,14 ;",def test_complex_scalar_complex_cast(self);
2740,5,dc981d0, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 16:39:02 +0200",ct: [PATCH 1/5] DOC: document in dev-guide how to write a good commit message.,1,28,0,doc/source/dev/gitwash/development_workflow.rst,[u'28'],25,0," -150,6 +150,34 ;",In more detai;
2740,5,80bb924, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 16:52:02 +0200","ct: [PATCH 2/5] DOC: a few edits to make ""Development Workflow"" in the dev guide clearer.",1,13,12,doc/source/dev/gitwash/development_workflow.rst,[u'25'],13,12," -54,6 +54,10 ; -74,16 +78,11 ; -143,9 +142,11 ; -209,9 +210,9 ;","In short;as clear as possible;In more detai;Then, the feature branch:;"
2740,5,f0f366c, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 17:11:29 +0200","ct: [PATCH 3/5] DOC: remove section ""Patching"" from dev-guide.This section is outdated, and following it pretty much ensures that yourpatches will languish in Trac.",4,6,133,doc/source/dev/gitwash/development_setup.rst,[u'4'],1,0," -2,6 +2,10 ;",;
2740,5,f0f366c, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 17:11:29 +0200","ct: [PATCH 3/5] DOC: remove section ""Patching"" from dev-guide.This section is outdated, and following it pretty much ensures that yourpatches will languish in Trac.",4,6,133,doc/source/dev/gitwash/following_latest.rst,[u'2'],1,0," -6,6 +6,8 ;",;
2740,5,f0f366c, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 17:11:29 +0200","ct: [PATCH 3/5] DOC: remove section ""Patching"" from dev-guide.This section is outdated, and following it pretty much ensures that yourpatches will languish in Trac.",4,6,133,doc/source/dev/gitwash/index.rst,[u'1'],0,1," -10,7 +10,6 ;",Contents;
2740,5,f0f366c, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 17:11:29 +0200","ct: [PATCH 3/5] DOC: remove section ""Patching"" from dev-guide.This section is outdated, and following it pretty much ensures that yourpatches will languish in Trac.",4,6,133,doc/source/dev/gitwash/patching.rst,[u'132'],0,27," -1,132 +0,0 ;",;
2740,5,674eacf, Ralf Gommers <ralf.gommers@googlemail.com>," Sat, 22 Sep 2012 17:28:19 +0200",ct: [PATCH 4/5] DOC: one more edit to the dev-guide.Recommend to update master before creating your feature branch.Thanks to Nicky van Foreest for feedback on the dev-guide.,1,7,0,doc/source/dev/gitwash/development_workflow.rst,[u'8'],7,1," -16,7 +16,8 ; -78,6 +79,11 ;",Basic workflo;as clear as possible;
2740,5,891a665, Ralf Gommers <ralf.gommers@googlemail.com>," Sun, 23 Sep 2012 11:56:38 +0200",ct: [PATCH 5/5] DOC: expand sections on commit messages and merging/rebasing in the devguide.This commit address comments from Charles on PR #455.,1,16,2,doc/source/dev/gitwash/development_workflow.rst,[u'18'],16,2," -152,11 +152,14 ; -170,6 +173,12 ; -251,6 +260,11 ;",In more detai;Commit messages should be clear and follow a few basic rules.  Example:;If you forgot to make a backup branch:;
2739,1,48beebc, rgommers <ralf.gommers@googlemail.com>," Mon, 8 Nov 2010 21:24:59 +0800",ct: [PATCH] TST: mark longdouble tests for spacing/nextafter as knownfail on PPC.See #1664.Thanks to Matthew Brett for suggesting this improved detection of PPC.Conflicts:	numpy/core/tests/test_umath.py,1,9,6,numpy/core/tests/test_umath.py,[u'15'],9,6," -6,6 +6,11 ; -1112,9 +1117,8 ; -1139,9 +1143,8 ;",;def test_nextafter();def test_spacing();
2737,1,a757cb5, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Tue, 13 Nov 2012 18:33:38 -0800",ct: [PATCH] DOC: document the change in .baseFixes gh-438. Based on Nathan's comments in gh-2737.,1,27,0,doc/release/1.7.0-notes.rst,[u'27'],27,0," -181,6 +181,33 ;",objects. For example the expression (3 and 'test') produces the strin;
2736,1,f6cab0a, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Tue, 13 Nov 2012 17:37:50 -0800","ct: [PATCH] FIX: Mark a tests knownfail on HurdFixes gh-415. This test raises ""Function not implemented"" on Hurd:======================================================================ERROR: test_flush (test_memmap.TestMemmap)----------------------------------------------------------------------Traceback (most recent call last):  File ""/build/buildd-python-numpy_1.7.0~b2-1-hurd-i386-Ws9GSv/python-numpy-1.7.0~b2/debian/tmp/usr/lib/python3/dist-packages/numpy/core/tests/test_memmap.py"", line 72, in test_flush    fp.flush()  File ""/build/buildd-python-numpy_1.7.0~b2-1-hurd-i386-Ws9GSv/python-numpy-1.7.0~b2/debian/tmp/usr/lib/python3/dist-packages/numpy/core/memmap.py"", line 301, in flush    self.base.flush()mmap.error: [Errno 1073741902] Function not implementedWhich seems like a Hurd issue:http://web.archiveorange.com/archive/v/dpz3Spjqy0ESHmXKVt7chttp://lists.gnu.org/archive/html/bug-hurd/2002-11/msg00243.htmlSo we mark it as knownfail on that platform.",1,2,0,numpy/core/tests/test_memmap.py,[u'2'],2,0," -1,3 +1,4 ; -64,6 +65,7 ;",;def test_filename_fileobj(self);
2735,2,8c99ef1, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 00:02:50 +0100","ct: [PATCH 1/2] REV: 8daf144 and following. Strides must be clean to be contiguousThis reverts mostly 8daf144 and c48156d. It leaves some small changesfrom the original behavior. Size 1 arrays are both C- and F-contiguous,and size 0 array can one, both or neither, however it is a bit stricterenforcing strides are clean including the (first) 0 dimension.",6,52,64,numpy/core/include/numpy/ndarraytypes.h,[u'6'],2,3," -756,9 +756,9 ;","typedef int (PyArray_FinalizeFunc)(PyArrayObject *, PyObject *);"
2735,2,8c99ef1, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 00:02:50 +0100","ct: [PATCH 1/2] REV: 8daf144 and following. Strides must be clean to be contiguousThis reverts mostly 8daf144 and c48156d. It leaves some small changesfrom the original behavior. Size 1 arrays are both C- and F-contiguous,and size 0 array can one, both or neither, however it is a bit stricterenforcing strides are clean including the (first) 0 dimension.",6,52,64,numpy/core/src/multiarray/ctors.c,[u'33'],4,19," -3565,33 +3565,15 ; -3602,14 +3584,9 ;","_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;"
2735,2,8c99ef1, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 00:02:50 +0100","ct: [PATCH 1/2] REV: 8daf144 and following. Strides must be clean to be contiguousThis reverts mostly 8daf144 and c48156d. It leaves some small changesfrom the original behavior. Size 1 arrays are both C- and F-contiguous,and size 0 array can one, both or neither, however it is a bit stricterenforcing strides are clean including the (first) 0 dimension.",6,52,64,numpy/core/src/multiarray/flagsobject.c,[u'39'],15,13," -90,8 +90,13 ; -104,18 +109,15 ; -128,13 +130,14 ;","PyArray_UpdateFlags(PyArrayObject *ret, int flagmask;_UpdateContiguousFlags(PyArrayObject *ap;_UpdateContiguousFlags(PyArrayObject *ap;"
2735,2,8c99ef1, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 00:02:50 +0100","ct: [PATCH 1/2] REV: 8daf144 and following. Strides must be clean to be contiguousThis reverts mostly 8daf144 and c48156d. It leaves some small changesfrom the original behavior. Size 1 arrays are both C- and F-contiguous,and size 0 array can one, both or neither, however it is a bit stricterenforcing strides are clean including the (first) 0 dimension.",6,52,64,numpy/core/src/multiarray/multiarraymodule.c,[u'14'],7,3," -1517,18 +1517,26 ; -1669,7 +1677,7 ;","PyArray_EquivTypenums(int typenum1, int typenum2;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;"
2735,2,8c99ef1, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 00:02:50 +0100","ct: [PATCH 1/2] REV: 8daf144 and following. Strides must be clean to be contiguousThis reverts mostly 8daf144 and c48156d. It leaves some small changesfrom the original behavior. Size 1 arrays are both C- and F-contiguous,and size 0 array can one, both or neither, however it is a bit stricterenforcing strides are clean including the (first) 0 dimension.",6,52,64,numpy/core/src/multiarray/shape.c,[u'9'],4,3," -215,8 +215,9 ; -1076,8 +1077,6 ; -1100,4 +1099,6 ;","PyArray_Newshape(PyArrayObject *self, PyArray_Dims *newdims;build_shape_string(npy_intp n, npy_intp *vals;PyArray_RemoveAxesInPlace(PyArrayObject *arr, npy_bool *flags;"
2735,2,8c99ef1, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 00:02:50 +0100","ct: [PATCH 1/2] REV: 8daf144 and following. Strides must be clean to be contiguousThis reverts mostly 8daf144 and c48156d. It leaves some small changesfrom the original behavior. Size 1 arrays are both C- and F-contiguous,and size 0 array can one, both or neither, however it is a bit stricterenforcing strides are clean including the (first) 0 dimension.",6,52,64,numpy/core/tests/test_api.py,[u'15'],5,6," -204,7 +204,6 ; -214,8 +213,8 ; -224,11 +223,11 ;","def check_copy_result(x, y, ccontig, fcontig, strides=False);def check_contig(a, ccontig, fcontig);def check_contig(a, ccontig, fcontig);"
2735,2,fa09b2d, Sebastian Berg <sebastian@sipsolutions.net>," Wed, 14 Nov 2012 10:24:01 +0100",ct: [PATCH 2/2] BUG: Fix small issue with flags setting in ctors.,1,2,3,numpy/core/src/multiarray/ctors.c,[u'5'],2,3," -3572,8 +3572,7 ; -3586,7 +3585,7 ;","_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;"
2734,1,2654ede, =?UTF-8?q?Ond=C5=99ej=20=C4=8Cert=C3=ADk?= <ondrej.certik@gmail.com>," Tue, 13 Nov 2012 08:35:59 -0800","ct: [PATCH] FIX: Python 3.2 debug assertionFixes gh-646, gh-2731. The patch was originally attached to gh-646 by ""skrah"".",1,16,0,numpy/core/src/multiarray/common.c,[u'16'],16,0," -174,7 +174,15 ; -218,7 +226,15 ;","PyArray_DTypeFromObjectHelper(PyObject *obj, int maxdims;PyArray_DTypeFromObjectHelper(PyObject *obj, int maxdims;"
2733,2,4171e50, Thomas Robitaille <thomas.robitaille@gmail.com>," Tue, 13 Nov 2012 15:51:08 +0100",ct: [PATCH 1/2] Fix setting of fill_value for string columns in Python 3,2,6,0,numpy/ma/core.py,[u'2'],1,1," -414,7 +414,7 ;","def _check_fill_value(fill_value, ndtype);"
2733,2,4171e50, Thomas Robitaille <thomas.robitaille@gmail.com>," Tue, 13 Nov 2012 15:51:08 +0100",ct: [PATCH 1/2] Fix setting of fill_value for string columns in Python 3,2,6,0,numpy/ma/tests/test_regression.py,[u'5'],5,0," -44,6 +44,11 ;",def test_atleast_2d(self);
2733,2,15d1aa3, Thomas Robitaille <thomas.robitaille@gmail.com>," Tue, 20 Nov 2012 11:44:12 +0100",ct: [PATCH 2/2] Change test to use np.testing.assert_,1,0,0,numpy/ma/tests/test_regression.py,[u'2'],1,1," -48,7 +48,7 ;",def test_set_fill_value_unicode_py3(self);
2730,2,ea03777, Nicolas Scheffer <scheffer@speech.sri.com>," Mon, 12 Nov 2012 12:00:28 -0800","ct: [PATCH 1/2] ENH: Remove the need for temporary copies in numpy.dotin numpy core, modified the blas function call to handleC and F order arrays without the need for copy.This brings a significant speed up for matrix multiplicationAdded a full test for matrix multiplication in test_blasdot",2,76,4,numpy/core/blasdot/_dotblas.c,[u'18'],10,2," -769,8 +769,8 ; -779,7 +779,7 ; -800,6 +800,18 ;","dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;"
2730,2,ea03777, Nicolas Scheffer <scheffer@speech.sri.com>," Mon, 12 Nov 2012 12:00:28 -0800","ct: [PATCH 1/2] ENH: Remove the need for temporary copies in numpy.dotin numpy core, modified the blas function call to handleC and F order arrays without the need for copy.This brings a significant speed up for matrix multiplicationAdded a full test for matrix multiplication in test_blasdot",2,76,4,numpy/core/tests/test_blasdot.py,[u'62'],39,1," -88,4 +88,64 ;",def test_dot_3args_errors();
2730,2,e31eb4b, Nicolas Scheffer <nicolas.scheffer@sri.com>," Mon, 12 Nov 2012 21:40:38 -0800",ct: [PATCH 2/2] Removed trailing printf statement,1,0,0,numpy/core/blasdot/_dotblas.c,[u'1'],0,1," -770,7 +770,6 ;","dotblas_matrixproduct(PyObject *NPY_UNUSED(dummy), PyObject *args, PyObject* kw;"
2727,5,029f7dc, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 01:43:06 +0100",ct: [PATCH 1/5] ENH: make random.choice size argument default to None and allow tupleThe size argument to random.choice should work like it does for allother functions in random as well.,1,16,10,numpy/random/mtrand/mtrand.pyx,[u'26'],16,10," -916,7 +916,7 ; -929,8 +929,9 ; -1017,26 +1018,30 ; -1045,17 +1050,18 ;",cdef class RandomState;cdef class RandomState;cdef class RandomState;cdef class RandomState;
2727,5,b9a9000, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 01:44:33 +0100","ct: [PATCH 2/5] BUG: Do not sort new indices in random.choice.Random choice used np.unique to find new indices when replacewas False and p given. This is wrong since unique will sort theindices. This solves the bug, but likely not ideal.",1,3,2,numpy/random/mtrand/mtrand.pyx,[u'5'],3,2," -1049,8 +1049,9 ;",cdef class RandomState;
2727,5,21e701d, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 17:46:54 +0100",ct: [PATCH 3/5] BUG: Fix various problems in the previous commits.Thanks to @alan-isaac for pointing out the 0-d vs. scalar issue.,1,17,9,numpy/random/mtrand/mtrand.pyx,[u'26'],17,9," -1018,8 +1018,8 ; -1028,6 +1028,7 ; -1045,25 +1046,32 ;",cdef class RandomState;cdef class RandomState;cdef class RandomState;
2727,5,a36ae28, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 17:48:55 +0100",ct: [PATCH 4/5] TST: Add tests for new feature and fix in random.choice,1,27,0,numpy/random/tests/test_random.py,[u'28'],27,1," -138,7 +138,7 ; -161,6 +161,32 ;",def test_choice_nonuniform_noreplace(self);def test_choice_exceptions(self);
2727,5,106e2ce, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 17 Nov 2012 12:35:30 +0100",ct: [PATCH 5/5] MAINT: Regenerate mtrand.c,1,2828,2491,numpy/random/mtrand/mtrand.c,[u'5319'],22,20," -1,4 +1,4 ; -828,10 +828,8 ; -889,82 +887,82 ; -983,7 +981,8 ; -991,10 +990,12 ; -1018,6 +1019,7 ; -1073,6 +1075,7 ; -1212,9 +1215,7 ; -1275,7 +1276,8 ; -1314,6 +1316,7 ; -1321,9 +1324,11 ; -1334,6 +1339,7 ; -1391,6 +1397,8 ; -6683,7 +6691,7 ; -6695,16 +6703,16 ; -6771,13 +6779,18 ; -6787,16 +6800,20 ; -6809,19 +6826,19 ; -6834,46 +6851,46 ; -6882,50 +6899,50 ; -6935,65 +6952,65 ; -7002,128 +7019,128 ; -7131,27 +7148,27 ; -7160,508 +7177,678 ; -7673,87 +7860,199 ; -7763,18 +8062,25 ; -7797,8 +8103,8 ; -7834,7 +8140,7 ; -7851,7 +8157,7 ; -7880,7 +8186,7 ; -7889,7 +8195,7 ; -7898,7 +8204,7 ; -7908,7 +8214,7 ; -7916,7 +8222,7 ; -7925,7 +8231,7 ; -7934,45 +8240,45 ; -7980,14 +8286,14 ; -7996,20 +8302,20 ; -8017,7 +8323,7 ; -8058,7 +8364,7 ; -8079,18 +8385,18 ; -8098,9 +8404,9 ; -8110,7 +8416,7 ; -8118,12 +8424,12 ; -8164,7 +8470,7 ; -8185,18 +8491,18 ; -8204,9 +8510,9 ; -8216,7 +8522,7 ; -8224,14 +8530,14 ; -8269,7 +8575,7 ; -8305,7 +8611,7 ; -8322,7 +8628,7 ; -8347,7 +8653,7 ; -8357,7 +8663,7 ; -8368,7 +8674,7 ; -8382,7 +8688,7 ; -8390,11 +8696,11 ; -8405,7 +8711,7 ; -8441,7 +8747,7 ; -8466,7 +8772,7 ; -8479,7 +8785,7 ; -8499,7 +8805,7 ; -8507,7 +8813,7 ; -8541,7 +8847,7 ; -8578,7 +8884,7 ; -8595,7 +8901,7 ; -8623,7 +8929,7 ; -8632,7 +8938,7 ; -8641,7 +8947,7 ; -8651,7 +8957,7 ; -8661,23 +8967,23 ; -8685,7 +8991,7 ; -8694,7 +9000,7 ; -8703,50 +9009,50 ; -8754,40 +9060,40 ; -8795,7 +9101,7 ; -8832,7 +9138,7 ; -8858,7 +9164,7 ; -8867,7 +9173,7 ; -8884,7 +9190,7 ; -8912,7 +9218,7 ; -8921,7 +9227,7 ; -8930,7 +9236,7 ; -8940,7 +9246,7 ; -8950,23 +9256,23 ; -8976,23 +9282,23 ; -9000,7 +9306,7 ; -9009,7 +9315,7 ; -9018,50 +9324,50 ; -9069,57 +9375,57 ; -9127,40 +9433,40 ; -9168,7 +9474,7 ; -9205,7 +9511,7 ; -9236,7 +9542,7 ; -9251,7 +9557,7 ; -9277,7 +9583,7 ; -9286,7 +9592,7 ; -9296,7 +9602,7 ; -9306,23 +9612,23 ; -9330,7 +9636,7 ; -9339,7 +9645,7 ; -9348,39 +9654,39 ; -9388,40 +9694,40 ; -9429,7 +9735,7 ; -9463,7 +9769,7 ; -9488,7 +9794,7 ; -9501,7 +9807,7 ; -9521,7 +9827,7 ; -9529,7 +9835,7 ; -9560,7 +9866,7 ; -9589,7 +9895,7 ; -9604,7 +9910,7 ; -9630,7 +9936,7 ; -9639,7 +9945,7 ; -9649,7 +9955,7 ; -9659,23 +9965,23 ; -9683,7 +9989,7 ; -9692,7 +9998,7 ; -9701,39 +10007,39 ; -9741,40 +10047,40 ; -9782,7 +10088,7 ; -9819,7 +10125,7 ; -9854,7 +10160,7 ; -9871,7 +10177,7 ; -9899,7 +10205,7 ; -9908,7 +10214,7 ; -9917,7 +10223,7 ; -9927,7 +10233,7 ; -9937,23 +10243,23 ; -9963,23 +10269,23 ; -9987,7 +10293,7 ; -9996,7 +10302,7 ; -10005,52 +10311,52 ; -10058,59 +10364,59 ; -10118,40 +10424,40 ; -10159,7 +10465,7 ; -10196,7 +10502,7 ; -10222,7 +10528,7 ; -10231,7 +10537,7 ; -10248,7 +10554,7 ; -10276,7 +10582,7 ; -10285,7 +10591,7 ; -10294,7 +10600,7 ; -10304,7 +10610,7 ; -10314,23 +10620,23 ; -10340,23 +10646,23 ; -10364,7 +10670,7 ; -10373,7 +10679,7 ; -10382,52 +10688,52 ; -10435,59 +10741,59 ; -10495,40 +10801,40 ; -10536,7 +10842,7 ; -10574,7 +10880,7 ; -10601,12 +10907,12 ; -10615,7 +10921,7 ; -10634,7 +10940,7 ; -10664,7 +10970,7 ; -10673,7 +10979,7 ; -10682,7 +10988,7 ; -10691,7 +10997,7 ; -10701,7 +11007,7 ; -10711,23 +11017,23 ; -10737,23 +11043,23 ; -10763,23 +11069,23 ; -10788,14 +11094,14 ; -10804,7 +11110,7 ; -10813,65 +11119,65 ; -10879,59 +11185,59 ; -10939,59 +11245,59 ; -10999,40 +11305,40 ; -11041,14 +11347,14 ; -11085,7 +11391,7 ; -11114,7 +11420,7 ; -11129,7 +11435,7 ; -11155,7 +11461,7 ; -11164,7 +11470,7 ; -11174,7 +11480,7 ; -11184,23 +11490,23 ; -11208,7 +11514,7 ; -11217,7 +11523,7 ; -11226,39 +11532,39 ; -11266,40 +11572,40 ; -11307,7 +11613,7 ; -11343,7 +11649,7 ; -11369,7 +11675,7 ; -11378,7 +11684,7 ; -11395,7 +11701,7 ; -11423,7 +11729,7 ; -11432,7 +11738,7 ; -11441,7 +11747,7 ; -11451,7 +11757,7 ; -11461,23 +11767,23 ; -11487,23 +11793,23 ; -11512,14 +11818,14 ; -11528,7 +11834,7 ; -11537,52 +11843,52 ; -11590,59 +11896,59 ; -11650,40 +11956,40 ; -11692,14 +11998,14 ; -11734,7 +12040,7 ; -11759,7 +12065,7 ; -11772,7 +12078,7 ; -11792,7 +12098,7 ; -11800,7 +12106,7 ; -11831,7 +12137,7 ; -11860,7 +12166,7 ; -11875,7 +12181,7 ; -11901,7 +12207,7 ; -11910,7 +12216,7 ; -11920,7 +12226,7 ; -11930,23 +12236,23 ; -11954,7 +12260,7 ; -11963,7 +12269,7 ; -11972,39 +12278,39 ; -12012,40 +12318,40 ; -12053,7 +12359,7 ; -12089,7 +12395,7 ; -12115,7 +12421,7 ; -12124,7 +12430,7 ; -12141,7 +12447,7 ; -12169,7 +12475,7 ; -12178,7 +12484,7 ; -12187,7 +12493,7 ; -12197,7 +12503,7 ; -12207,23 +12513,23 ; -12231,7 +12537,7 ; -12240,7 +12546,7 ; -12249,52 +12555,52 ; -12302,40 +12608,40 ; -12343,7 +12649,7 ; -12379,7 +12685,7 ; -12408,7 +12714,7 ; -12423,7 +12729,7 ; -12449,7 +12755,7 ; -12458,7 +12764,7 ; -12468,7 +12774,7 ; -12478,23 +12784,23 ; -12502,7 +12808,7 ; -12511,7 +12817,7 ; -12520,39 +12826,39 ; -12560,40 +12866,40 ; -12601,7 +12907,7 ; -12636,7 +12942,7 ; -12665,7 +12971,7 ; -12680,7 +12986,7 ; -12706,7 +13012,7 ; -12715,7 +13021,7 ; -12725,7 +13031,7 ; -12735,23 +13041,23 ; -12759,7 +13065,7 ; -12768,7 +13074,7 ; -12777,39 +13083,39 ; -12817,40 +13123,40 ; -12858,7 +13164,7 ; -12893,7 +13199,7 ; -12922,7 +13228,7 ; -12937,7 +13243,7 ; -12963,7 +13269,7 ; -12972,7 +13278,7 ; -12982,7 +13288,7 ; -12992,23 +13298,23 ; -13016,7 +13322,7 ; -13025,7 +13331,7 ; -13034,39 +13340,39 ; -13074,40 +13380,40 ; -13115,7 +13421,7 ; -13153,7 +13459,7 ; -13190,7 +13496,7 ; -13207,7 +13513,7 ; -13235,7 +13541,7 ; -13244,7 +13550,7 ; -13253,7 +13559,7 ; -13263,7 +13569,7 ; -13273,23 +13579,23 ; -13297,7 +13603,7 ; -13306,7 +13612,7 ; -13315,52 +13621,52 ; -13368,40 +13674,40 ; -13409,7 +13715,7 ; -13448,7 +13754,7 ; -13485,7 +13791,7 ; -13502,7 +13808,7 ; -13530,7 +13836,7 ; -13539,7 +13845,7 ; -13548,7 +13854,7 ; -13558,7 +13864,7 ; -13568,23 +13874,23 ; -13592,7 +13898,7 ; -13601,7 +13907,7 ; -13610,52 +13916,52 ; -13663,40 +13969,40 ; -13704,7 +14010,7 ; -13743,7 +14049,7 ; -13780,7 +14086,7 ; -13797,7 +14103,7 ; -13825,7 +14131,7 ; -13834,7 +14140,7 ; -13843,7 +14149,7 ; -13853,7 +14159,7 ; -13863,23 +14169,23 ; -13887,7 +14193,7 ; -13896,7 +14202,7 ; -13905,52 +14211,52 ; -13958,40 +14264,40 ; -13999,7 +14305,7 ; -14038,7 +14344,7 ; -14075,7 +14381,7 ; -14092,7 +14398,7 ; -14120,7 +14426,7 ; -14129,7 +14435,7 ; -14138,7 +14444,7 ; -14148,7 +14454,7 ; -14158,23 +14464,23 ; -14182,7 +14488,7 ; -14191,7 +14497,7 ; -14200,52 +14506,52 ; -14253,40 +14559,40 ; -14294,7 +14600,7 ; -14331,7 +14637,7 ; -14362,7 +14668,7 ; -14377,7 +14683,7 ; -14403,7 +14709,7 ; -14412,7 +14718,7 ; -14422,7 +14728,7 ; -14432,23 +14738,23 ; -14456,7 +14762,7 ; -14465,7 +14771,7 ; -14474,39 +14780,39 ; -14514,40 +14820,40 ; -14555,7 +14861,7 ; -14591,7 +14897,7 ; -14617,7 +14923,7 ; -14626,7 +14932,7 ; -14643,7 +14949,7 ; -14671,7 +14977,7 ; -14680,7 +14986,7 ; -14689,7 +14995,7 ; -14699,7 +15005,7 ; -14709,23 +15015,23 ; -14735,23 +15041,23 ; -14759,7 +15065,7 ; -14768,7 +15074,7 ; -14777,52 +15083,52 ; -14830,58 +15136,58 ; -14889,40 +15195,40 ; -14930,7 +15236,7 ; -14968,7 +15274,7 ; -14995,12 +15301,12 ; -15009,7 +15315,7 ; -15028,7 +15334,7 ; -15058,7 +15364,7 ; -15067,7 +15373,7 ; -15076,7 +15382,7 ; -15085,7 +15391,7 ; -15095,7 +15401,7 ; -15105,23 +15411,23 ; -15131,23 +15437,23 ; -15157,23 +15463,23 ; -15182,14 +15488,14 ; -15198,7 +15504,7 ; -15207,63 +15513,63 ; -15271,57 +15577,57 ; -15329,57 +15635,57 ; -15387,40 +15693,40 ; -15429,14 +15735,14 ; -15474,7 +15780,7 ; -15500,7 +15806,7 ; -15509,7 +15815,7 ; -15526,7 +15832,7 ; -15554,7 +15860,7 ; -15563,7 +15869,7 ; -15572,7 +15878,7 ; -15582,7 +15888,7 ; -15592,23 +15898,23 ; -15618,22 +15924,22 ; -15643,23 +15949,23 ; -15667,7 +15973,7 ; -15676,7 +15982,7 ; -15685,50 +15991,50 ; -15736,57 +16042,57 ; -15794,57 +16100,57 ; -15852,40 +16158,40 ; -15893,7 +16199,7 ; -15930,7 +16236,7 ; -15956,7 +16262,7 ; -15965,7 +16271,7 ; -15982,7 +16288,7 ; -16010,7 +16316,7 ; -16019,7 +16325,7 ; -16028,7 +16334,7 ; -16038,7 +16344,7 ; -16048,23 +16354,23 ; -16074,22 +16380,22 ; -16099,23 +16405,23 ; -16124,14 +16430,14 ; -16140,7 +16446,7 ; -16149,50 +16455,50 ; -16200,57 +16506,57 ; -16258,57 +16564,57 ; -16316,40 +16622,40 ; -16358,14 +16664,14 ; -16402,7 +16708,7 ; -16433,7 +16739,7 ; -16448,7 +16754,7 ; -16474,7 +16780,7 ; -16483,7 +16789,7 ; -16493,66 +16799,66 ; -16560,7 +16866,7 ; -16569,7 +16875,7 ; -16578,37 +16884,37 ; -16616,59 +16922,59 ; -16676,40 +16982,40 ; -16717,7 +17023,7 ; -16752,7 +17058,7 ; -16781,7 +17087,7 ; -16796,7 +17102,7 ; -16822,7 +17128,7 ; -16831,7 +17137,7 ; -16841,7 +17147,7 ; -16851,23 +17157,23 ; -16875,7 +17181,7 ; -16884,7 +17190,7 ; -16893,39 +17199,39 ; -16933,40 +17239,40 ; -16974,7 +17280,7 ; -17009,7 +17315,7 ; -17038,7 +17344,7 ; -17053,7 +17359,7 ; -17079,7 +17385,7 ; -17088,7 +17394,7 ; -17098,7 +17404,7 ; -17108,23 +17414,23 ; -17134,23 +17440,23 ; -17158,7 +17464,7 ; -17167,7 +17473,7 ; -17176,39 +17482,39 ; -17216,59 +17522,59 ; -17276,40 +17582,40 ; -17317,7 +17623,7 ; -17354,7 +17660,7 ; -17381,12 +17687,12 ; -17395,7 +17701,7 ; -17414,7 +17720,7 ; -17445,7 +17751,7 ; -17454,7 +17760,7 ; -17463,7 +17769,7 ; -17472,7 +17778,7 ; -17482,122 +17788,122 ; -17606,14 +17912,14 ; -17622,7 +17928,7 ; -17631,63 +17937,63 ; -17695,57 +18001,57 ; -17753,57 +18059,57 ; -17811,62 +18117,62 ; -17874,11 +18180,11 ; -17886,40 +18192,40 ; -17928,14 +18234,14 ; -17973,7 +18279,7 ; -18002,7 +18308,7 ; -18017,7 +18323,7 ; -18043,7 +18349,7 ; -18052,7 +18358,7 ; -18062,7 +18368,7 ; -18072,23 +18378,23 ; -18098,23 +18404,23 ; -18122,7 +18428,7 ; -18131,7 +18437,7 ; -18140,39 +18446,39 ; -18180,59 +18486,59 ; -18240,40 +18546,40 ; -18281,7 +18587,7 ; -18317,7 +18623,7 ; -18343,7 +18649,7 ; -18352,7 +18658,7 ; -18369,7 +18675,7 ; -18408,24 +18714,24 ; -18433,24 +18739,24 ; -18458,7 +18764,7 ; -18468,14 +18774,14 ; -18483,7 +18789,7 ; -18495,63 +18801,63 ; -18559,63 +18865,63 ; -18628,14 +18934,14 ; -18647,120 +18953,120 ; -18769,35 +19075,35 ; -18805,19 +19111,19 ; -18830,7 +19136,7 ; -18846,15 +19152,15 ; -18864,7 +19170,7 ; -18872,7 +19178,7 ; -18882,36 +19188,36 ; -18919,7 +19225,7 ; -18927,19 +19233,19 ; -18950,25 +19256,25 ; -19019,7 +19325,7 ; -19045,7 +19351,7 ; -19054,7 +19360,7 ; -19065,13 +19371,13 ; -19107,30 +19413,30 ; -19139,7 +19445,7 ; -19149,23 +19455,23 ; -19175,16 +19481,16 ; -19194,7 +19500,7 ; -19204,16 +19510,16 ; -19227,21 +19533,21 ; -19249,19 +19555,19 ; -19269,14 +19575,14 ; -19286,7 +19592,7 ; -19295,7 +19601,7 ; -19304,7 +19610,7 ; -19315,7 +19621,7 ; -19324,7 +19630,7 ; -19333,7 +19639,7 ; -19343,7 +19649,7 ; -19352,11 +19658,11 ; -19365,7 +19671,7 ; -19375,7 +19681,7 ; -19387,7 +19693,7 ; -19398,7 +19704,7 ; -19408,7 +19714,7 ; -19420,7 +19726,7 ; -19430,7 +19736,7 ; -19473,7 +19779,7 ; -19502,7 +19808,7 ; -19517,7 +19823,7 ; -19554,30 +19860,30 ; -19586,7 +19892,7 ; -19596,16 +19902,16 ; -19615,7 +19921,7 ; -19625,16 +19931,16 ; -19648,21 +19954,21 ; -19670,24 +19976,24 ; -19695,14 +20001,14 ; -19712,7 +20018,7 ; -19721,7 +20027,7 ; -19730,7 +20036,7 ; -19739,7 +20045,7 ; -19750,7 +20056,7 ; -19759,7 +20065,7 ; -19769,7 +20075,7 ; -19778,7 +20084,7 ; -19788,7 +20094,7 ; -19797,11 +20103,11 ; -19811,7 +20117,7 ; -19821,7 +20127,7 ; -19831,7 +20137,7 ; -19873,7 +20179,7 ; -19900,36 +20206,36 ; -19937,35 +20243,35 ; -19973,7 +20279,7 ; -19984,7 +20290,7 ; -19993,40 +20299,40 ; -20039,7 +20345,7 ; -20050,7 +20356,7 ; -20059,23 +20365,23 ; -20115,7 +20421,7 ; -20136,19 +20442,19 ; -20159,28 +20465,28 ; -20190,24 +20496,24 ; -20216,27 +20522,27 ; -20637,9 +20943,7 ; -20700,7 +21004,8 ; -20739,6 +21044,7 ; -20746,9 +21052,11 ; -20759,6 +21067,7 ; -20932,98 +21241,98 ; -21031,1385 +21340,1413 ; -22610,7 +22947,7 ; -22620,878 +22957,878 ;",";static char __pyx_k_22[] = ""p must be 1-dimensional"";static char __pyx_k_198[] = ""\n        randint(low, high=None, size=None)\n\;static char __pyx_k__svd[] = ""svd"";static char __pyx_k__mode[] = ""mode"";static char __pyx_k__numpy[] = ""numpy"";static char __pyx_k__exponential[] = ""exponential"";static PyObject *__pyx_kp_u_277;static PyObject *__pyx_n_s__hypergeometric;static PyObject *__pyx_n_s__permutation;static PyObject *__pyx_n_s__randn;static PyObject *__pyx_n_s__shuffle;static PyObject *__pyx_k_tuple_23;static PyObject *__pyx_pf_6mtrand_11RandomState_22bytes(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_25choice(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_25choice(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_24choice(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_27uniform(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_26uniform(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_29rand(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_28rand(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_31randn(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_30randn(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_33random_integers(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_32random_integers(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_35standard_normal(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_34standard_normal(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_34standard_normal(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_37normal(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_36normal(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_39beta(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_38beta(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_41exponential(PyObject *__pyx_v;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_40exponential(struct __pyx_obj_;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_43standard_exponential(PyObjec;static PyObject *__pyx_pf_6mtrand_11RandomState_42standard_exponential(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_42standard_exponential(struct _;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_45standard_gamma(PyObject *__py;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_44standard_gamma(struct __pyx_o;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_47gamma(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_46gamma(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pw_6mtrand_11RandomState_49f(PyObject *__pyx_v_self, PyO;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pf_6mtrand_11RandomState_48f(struct __pyx_obj_6mtrand_Ra;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_51noncentral_f(PyObject *__pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_50noncentral_f(struct __pyx_obj;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_53chisquare(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_52chisquare(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pw_6mtrand_11RandomState_55noncentral_chisquare(PyObjec;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pf_6mtrand_11RandomState_54noncentral_chisquare(struct _;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pw_6mtrand_11RandomState_57standard_cauchy(PyObject *__p;static PyObject *__pyx_pf_6mtrand_11RandomState_56standard_cauchy(struct __pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_56standard_cauchy(struct __pyx_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_59standard_t(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_58standard_t(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_61vonmises(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_60vonmises(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_63pareto(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_62pareto(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_65weibull(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_64weibull(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_67power(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pf_6mtrand_11RandomState_66power(struct __pyx_obj_6mtran;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_69laplace(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_68laplace(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pw_6mtrand_11RandomState_71gumbel(PyObject *__pyx_v_self;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pf_6mtrand_11RandomState_70gumbel(struct __pyx_obj_6mtra;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_73logistic(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_72logistic(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_75lognormal(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_74lognormal(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_77rayleigh(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_76rayleigh(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_79wald(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_78wald(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_80triangular(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pw_6mtrand_11RandomState_83binomial(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_82binomial(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pw_6mtrand_11RandomState_85negative_binomial(PyObject *_;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pf_6mtrand_11RandomState_84negative_binomial(struct __py;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pw_6mtrand_11RandomState_87poisson(PyObject *__pyx_v_sel;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pf_6mtrand_11RandomState_86poisson(struct __pyx_obj_6mtr;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pw_6mtrand_11RandomState_89zipf(PyObject *__pyx_v_self, ;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pf_6mtrand_11RandomState_88zipf(struct __pyx_obj_6mtrand;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_91geometric(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_90geometric(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pw_6mtrand_11RandomState_93hypergeometric(PyObject *__py;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pf_6mtrand_11RandomState_92hypergeometric(struct __pyx_o;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pw_6mtrand_11RandomState_95logseries(PyObject *__pyx_v_s;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pf_6mtrand_11RandomState_94logseries(struct __pyx_obj_6m;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pw_6mtrand_11RandomState_97multivariate_normal(PyObject ;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pf_6mtrand_11RandomState_96multivariate_normal(struct __;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pw_6mtrand_11RandomState_99multinomial(PyObject *__pyx_v;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pf_6mtrand_11RandomState_98multinomial(struct __pyx_obj_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pw_6mtrand_11RandomState_101dirichlet(PyObject *__pyx_v_;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pf_6mtrand_11RandomState_100dirichlet(struct __pyx_obj_6;static PyObject *__pyx_pw_6mtrand_11RandomState_103shuffle(PyObject *__pyx_v_se;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pf_6mtrand_11RandomState_102shuffle(struct __pyx_obj_6mt;static PyObject *__pyx_pw_6mtrand_11RandomState_105permutation(PyObject *__pyx_;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static PyObject *__pyx_pf_6mtrand_11RandomState_104permutation(struct __pyx_obj;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static __Pyx_StringTabEntry __pyx_string_tab[] = ;static int __Pyx_InitCachedConstants(void) ;static int __Pyx_InitCachedConstants(void) ;PyMODINIT_FUNC PyInit_mtrand(void;PyMODINIT_FUNC PyInit_mtrand(void;"
2726,3,d8ead4c, peterjc <p.j.a.cock@googlemail.com>," Mon, 12 Nov 2012 11:50:18 +0000",ct: [PATCH 1/3] Include msvcr100 (MSVC v10 aka 2010) in msvc_runtime_library(),1,0,0,numpy/distutils/misc_util.py,[u'1'],1,0," -359,6 +359,7 ;",def msvc_runtime_library();
2726,3,1d498f5, peterjc <p.j.a.cock@googlemail.com>," Mon, 12 Nov 2012 11:55:05 +0000",ct: [PATCH 2/3] Cope with two digit major number in MSCV v10,1,4,0,numpy/distutils/mingw32ccompiler.py,[u'5'],4,1," -533,7 +533,10 ;",def check_embedded_msvcr_match_linked(msver);
2726,3,2452356, peterjc <p.j.a.cock@googlemail.com>," Mon, 12 Nov 2012 12:16:59 +0000",ct: [PATCH 3/3] Handle MSVC v10 in _MSVCRVER_TO_FULLVER,1,7,4,numpy/distutils/mingw32ccompiler.py,[u'11'],7,4," -461,13 +461,16 ;",def _build_import_library_x86();
2725,1,cde76b4, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 00:20:24 +0100",ct: [PATCH] ENH: Allow 0-d indexes in np.takeThe TakeFrom already supported this. This removes the check whichmade it not possible and adds some tests for take.Also add documentation and information to the release notes.,4,54,3,doc/release/1.8.0-notes.rst,[u'1'],1,0," -37,6 +37,7 ;",Change;
2725,1,cde76b4, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 00:20:24 +0100",ct: [PATCH] ENH: Allow 0-d indexes in np.takeThe TakeFrom already supported this. This removes the check whichmade it not possible and adds some tests for take.Also add documentation and information to the release notes.,4,54,3,numpy/core/fromnumeric.py,[u'9'],7,0," -57,6 +57,10 ; -96,6 +100,11 ;","def take(a, indices, axis=None, out=None, mode='raise');def take(a, indices, axis=None, out=None, mode='raise');"
2725,1,cde76b4, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 00:20:24 +0100",ct: [PATCH] ENH: Allow 0-d indexes in np.takeThe TakeFrom already supported this. This removes the check whichmade it not possible and adds some tests for take.Also add documentation and information to the release notes.,4,54,3,numpy/core/src/multiarray/item_selection.c,[u'4'],1,2," -44,13 +44,11 ;","PyArray_TakeFrom(PyArrayObject *self0, PyObject *indices0, int axis;"
2725,1,cde76b4, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 13 Nov 2012 00:20:24 +0100",ct: [PATCH] ENH: Allow 0-d indexes in np.takeThe TakeFrom already supported this. This removes the check whichmade it not possible and adds some tests for take.Also add documentation and information to the release notes.,4,54,3,numpy/core/tests/test_item_selection.py,[u'43'],30,0," -0,0 +1,43 ;",;
2723,1,bee8c4d, Pauli Virtanen <pav@iki.fi>," Sun, 11 Nov 2012 21:54:53 +0200",ct: [PATCH] BUG: fix Python 2.4 build with NPY_SEPARATE_COMPILATION,1,0,0,numpy/core/src/umath/reduction.c,[u'2'],1,1," -21,7 +21,7 ;",;
2722,1,7c90615, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 9 Nov 2012 23:33:55 +0100",ct: [PATCH] BUG: Update aligned flag when setting strides attribute.,2,9,0,numpy/core/src/multiarray/getset.c,[u'3'],2,1," -149,7 +149,8 ;","array_strides_set(PyArrayObject *self, PyObject *obj;"
2722,1,7c90615, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 9 Nov 2012 23:33:55 +0100",ct: [PATCH] BUG: Update aligned flag when setting strides attribute.,2,9,0,numpy/core/tests/test_regression.py,[u'7'],7,0," -1649,6 +1649,13 ;",def test_fields_strides(self);
2721,1,c6f27b0, Alexander Belopolsky <abalkin@enlnt.com>," Fri, 9 Nov 2012 14:23:49 -0500",ct: [PATCH] Fixed a mistake in linalg.eig() documentation.,1,0,0,numpy/linalg/linalg.py,[u'2'],1,1," -946,7 +946,7 ;",def eig(a);
2717,1,6c948c5, Christian Brueffer <christian@brueffer.de>," Fri, 9 Nov 2012 15:00:06 +0800",ct: [PATCH] Fix typos.,1,7,7,INSTALL.txt,[u'14'],7,7," -60,7 +60,7 ; -74,8 +74,8 ; -91,8 +91,8 ; -111,7 +111,7 ; -127,7 +127,7 ;","How to check the ABI of blas/lapack/atla;You can install the necessary packages for optimized ATLAS with this command;You can install the necessary packages for optimized ATLAS with this command;http://mingw-w64.sourceforge.net;fragile, and often segfault on invalid C code). The main drawback is that n;"
2716,1,1b13f2d, Amarnath <me@vaamarnath.co.in>," Thu, 8 Nov 2012 21:30:41 +0530",ct: [PATCH] Fix for cov() failing when a complex input matrix is given,1,2,2,numpy/lib/function_base.py,[u'4'],2,2," -2027,7 +2027,7 ; -2042,7 +2042,7 ;","def cov(m, y=None, rowvar=1, bias=0, ddof=None);def cov(m, y=None, rowvar=1, bias=0, ddof=None);"
2712,1,e841e85, timmie <timmichelsen@gmx-topmail.de>," Wed, 7 Nov 2012 15:00:53 +0100",ct: [PATCH] minor typo,1,0,0,doc/example.py,[u'2'],1,1," -34,7 +34,7 ;",;
2710,10,3b559fd, John Salvatier <jsalvatier@gmail.com>," Tue, 6 Nov 2012 14:48:53 -0800",ct: [PATCH 01/10] added a fix for 1d iteration which was failing and a test to test that case,2,12,0,numpy/core/src/multiarray/mapping.c,[u'6'],6,0," -2038,6 +2038,9 ; -2045,6 +2048,9 ;","PyArray_MapIterArray(PyArrayObject * a, PyObject * index;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2710,10,3b559fd, John Salvatier <jsalvatier@gmail.com>," Tue, 6 Nov 2012 14:48:53 -0800",ct: [PATCH 01/10] added a fix for 1d iteration which was failing and a test to test that case,2,12,0,numpy/core/tests/test_multiarray.py,[u'6'],6,0," -2894,6 +2894,12 ;",def test_mapiter(self);
2710,10,0db7a4a, John Salvatier <jsalvatier@gmail.com>," Fri, 9 Nov 2012 17:49:50 -0800",ct: [PATCH 02/10] tabs -> spaces,1,5,5,numpy/core/tests/test_multiarray.py,[u'10'],5,5," -2894,11 +2894,11 ;",def test_mapiter(self);
2710,10,b86deb7, John Salvatier <jsalvatier@gmail.com>," Mon, 19 Nov 2012 19:18:27 -0800",ct: [PATCH 03/10] gave PyArray_MapIterBind an error code on exit,1,12,9,numpy/core/src/multiarray/mapping.c,[u'21'],12,9," -1064,7 +1064,9 ; -1328,7 +1330,9 ; -1697,7 +1701,7 ; -1711,12 +1715,12 ; -1845,14 +1849,14 ; -2047,8 +2051,7 ;","array_subscript(PyArrayObject *self, PyObject *op;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;PyArray_MapIterNext(PyArrayMapIterObject *mit;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2710,10,14c7faa, John Salvatier <jsalvatier@gmail.com>," Mon, 19 Nov 2012 19:39:24 -0800",ct: [PATCH 04/10] wrong error check,2,5,5,numpy/core/src/multiarray/mapping.c,[u'8'],4,4," -1064,7 +1064,7 ; -1330,7 +1330,7 ; -1720,7 +1720,7 ; -2051,7 +2051,7 ;","array_subscript(PyArrayObject *self, PyObject *op;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2710,10,14c7faa, John Salvatier <jsalvatier@gmail.com>," Mon, 19 Nov 2012 19:39:24 -0800",ct: [PATCH 04/10] wrong error check,2,5,5,numpy/core/src/multiarray/mapping.h,[u'2'],1,1," -53,7 +53,7 ;",PyArray_MapIterReset(PyArrayMapIterObject *mit);
2710,10,9c02535, endolith <endolith@gmail.com>," Fri, 30 Nov 2012 11:43:46 -0500",ct: [PATCH 05/10] Add note about definition list classifier formatand some other small changes,1,9,8,doc/HOWTO_DOCUMENT.rst.txt,[u'17'],9,8," -147,7 +147,7 ; -180,11 +180,12 ; -211,7 +212,7 ; -579,10 +580,10 ;",The sections of the docstring are;The sections of the docstring are;The sections of the docstring are;Common reST concept;
2710,10,da7770c, John Salvatier <jsalvatier@gmail.com>," Tue, 6 Nov 2012 14:48:53 -0800",ct: [PATCH 06/10] added a fix for 1d iteration which was failing and a test to test that case,2,12,0,numpy/core/src/multiarray/mapping.c,[u'6'],6,0," -2038,6 +2038,9 ; -2045,6 +2048,9 ;","PyArray_MapIterArray(PyArrayObject * a, PyObject * index;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2710,10,da7770c, John Salvatier <jsalvatier@gmail.com>," Tue, 6 Nov 2012 14:48:53 -0800",ct: [PATCH 06/10] added a fix for 1d iteration which was failing and a test to test that case,2,12,0,numpy/core/tests/test_multiarray.py,[u'6'],6,0," -2894,6 +2894,12 ;",def test_mapiter(self);
2710,10,a82639f, John Salvatier <jsalvatier@gmail.com>," Fri, 9 Nov 2012 17:49:50 -0800",ct: [PATCH 07/10] tabs -> spaces,1,5,5,numpy/core/tests/test_multiarray.py,[u'10'],5,5," -2894,11 +2894,11 ;",def test_mapiter(self);
2710,10,663b3ec, John Salvatier <jsalvatier@gmail.com>," Mon, 19 Nov 2012 19:18:27 -0800",ct: [PATCH 08/10] gave PyArray_MapIterBind an error code on exit,1,12,9,numpy/core/src/multiarray/mapping.c,[u'21'],12,9," -1064,7 +1064,9 ; -1328,7 +1330,9 ; -1697,7 +1701,7 ; -1711,12 +1715,12 ; -1845,14 +1849,14 ; -2047,8 +2051,7 ;","array_subscript(PyArrayObject *self, PyObject *op;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;PyArray_MapIterNext(PyArrayMapIterObject *mit;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2710,10,b3bf8ea, John Salvatier <jsalvatier@gmail.com>," Mon, 19 Nov 2012 19:39:24 -0800",ct: [PATCH 09/10] wrong error check,2,5,5,numpy/core/src/multiarray/mapping.c,[u'8'],4,4," -1064,7 +1064,7 ; -1330,7 +1330,7 ; -1720,7 +1720,7 ; -2051,7 +2051,7 ;","array_subscript(PyArrayObject *self, PyObject *op;array_ass_sub(PyArrayObject *self, PyObject *ind, PyObject *op;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2710,10,b3bf8ea, John Salvatier <jsalvatier@gmail.com>," Mon, 19 Nov 2012 19:39:24 -0800",ct: [PATCH 09/10] wrong error check,2,5,5,numpy/core/src/multiarray/mapping.h,[u'2'],1,1," -53,7 +53,7 ;",PyArray_MapIterReset(PyArrayMapIterObject *mit);
2710,10,3fcbdf8, John Salvatier <jsalvatier@gmail.com>," Sat, 1 Dec 2012 16:42:24 -0800",ct: [PATCH 10/10] removed fancy check and added more informative message,1,8,7,numpy/core/src/multiarray/mapping.c,[u'15'],8,7," -2037,15 +2037,16 ;","PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2709,1,d897a98, Frederic <nouiz@nouiz.org>," Tue, 6 Nov 2012 14:18:12 -0500","ct: [PATCH] Fix a compilation problem introduced with numpy 1.7.The problem is strange, the line I change didn't changed in numpy 1.7,but this fix the compilation of Theano with master.",1,0,0,numpy/core/include/numpy/ndarraytypes.h,[u'2'],1,1," -1477,7 +1477,7 ;","PyArray_SETITEM(PyArrayObject *arr, char *itemptr, PyObject *v;"
2707,1,58c1bf7, Ralf Gommers <ralf.gommers@googlemail.com>," Mon, 5 Nov 2012 20:47:23 +0100",ct: [PATCH] BUG: fix download link in setup.py (which is shown on PyPi).Closes Trac ticket 2243.,1,3,3,setup.py,[u'6'],3,3," -48,14 +48,14 ;",;
2706,10,b1d8060, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:11:02 -0700",ct: [PATCH 01/10] gave MapIter an API,5,29,3,numpy/core/code_generators/cversions.txt,[u'3'],3,0," -11,3 +11,6 ;",;
2706,10,b1d8060, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:11:02 -0700",ct: [PATCH 01/10] gave MapIter an API,5,29,3,numpy/core/code_generators/genapi.py,[u'1'],1,0," -41,6 +41,7 ;",;
2706,10,b1d8060, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:11:02 -0700",ct: [PATCH 01/10] gave MapIter an API,5,29,3,numpy/core/code_generators/numpy_api.py,[u'4'],4,0," -69,6 +69,7 ; -328,6 +329,9 ;",;;
2706,10,b1d8060, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:11:02 -0700",ct: [PATCH 01/10] gave MapIter an API,5,29,3,numpy/core/setup_common.py,[u'2'],1,1," -29,7 +29,7 ;",;
2706,10,b1d8060, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:11:02 -0700",ct: [PATCH 01/10] gave MapIter an API,5,29,3,numpy/core/src/multiarray/mapping.c,[u'22'],20,2," -166,7 +166,10 ; -1628,7 +1631,7 ; -2028,6 +2031,21 ;","array_ass_big_item(PyArrayObject *self, npy_intp i, PyObject *v;PyArray_MapIterReset(PyArrayMapIterObject *mit;PyArray_MapIterNew(PyObject *indexobj, int oned, int fancy;"
2706,10,5f38b99, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:52:04 -0700",ct: [PATCH 02/10] changed the name of _swap_axes,3,6,7,numpy/core/code_generators/cversions.txt,[u'3'],1,2," -12,5 +12,4 ;",;
2706,10,5f38b99, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:52:04 -0700",ct: [PATCH 02/10] changed the name of _swap_axes,3,6,7,numpy/core/code_generators/numpy_api.py,[u'4'],2,2," -69,7 +69,7 ; -329,7 +329,7 ;",;;
2706,10,5f38b99, John Salvatier <jsalvatier@gmail.com>," Mon, 6 Aug 2012 18:52:04 -0700",ct: [PATCH 02/10] changed the name of _swap_axes,3,6,7,numpy/core/src/multiarray/mapping.c,[u'6'],3,3," -170,7 +170,7 ; -300,7 +300,7 ; -329,7 +329,7 ;","array_ass_big_item(PyArrayObject *self, npy_intp i, PyObject *v;PyArray_GetMap(PyArrayMapIterObject *mit;PyArray_SetMap(PyArrayMapIterObject *mit, PyObject *op;"
2706,10,ca1373b, John Salvatier <jsalvatier@gmail.com>," Fri, 10 Aug 2012 16:21:16 -0700",ct: [PATCH 03/10] removed expsure of mapiter type,1,0,0,numpy/core/code_generators/numpy_api.py,[u'1'],0,1," -69,7 +69,6 ;",;
2706,10,13bc468, John Salvatier <jsalvatier@gmail.com>," Fri, 10 Aug 2012 16:23:05 -0700",ct: [PATCH 04/10] changed error handling for clarity,1,5,3,numpy/core/src/multiarray/mapping.c,[u'8'],5,3," -2038,10 +2038,12 ;","PyArray_MapIterArray(PyArrayObject * a, PyObject * index, int oned, int fancy;"
2706,10,b6bcb83, John Salvatier <jsalvatier@gmail.com>," Mon, 13 Aug 2012 11:46:39 -0700",ct: [PATCH 05/10] eliminated oned and fancy arguments to MapIterArray,1,13,6,numpy/core/src/multiarray/mapping.c,[u'19'],13,6," -1902,11 +1902,6 ; -2034,9 +2029,16 ; -2048,6 +2050,11 ;","PyArray_MapIterNew(PyObject *indexobj, int oned, int fancy;PyArray_MapIterNew(PyObject *indexobj, int oned, int fancy;PyArray_MapIterArray(PyArrayObject * a, PyObject * index, int oned, int fancy;"
2706,10,bb18a54, John Salvatier <jsalvatier@gmail.com>," Mon, 13 Aug 2012 13:08:06 -0700",ct: [PATCH 06/10] added initial mapiter tests,2,149,0,numpy/core/src/multiarray/multiarray_tests.c.src,[u'134'],23,0," -428,6 +428,137 ; -441,6 +572,9 ;","test_pydatamem_seteventhook_end(PyObject* NPY_UNUSED(self), PyObject* NPY_UNUSE;static PyMethodDef Multiarray_TestsMethods[] = ;"
2706,10,bb18a54, John Salvatier <jsalvatier@gmail.com>," Mon, 13 Aug 2012 13:08:06 -0700",ct: [PATCH 06/10] added initial mapiter tests,2,149,0,numpy/core/tests/test_multiarray.py,[u'15'],3,0," -2825,6 +2825,21 ;",def test_mem_seteventhook(self);
2706,10,b3bb546, John Salvatier <jsalvatier@gmail.com>," Sun, 7 Oct 2012 09:54:41 -0700",ct: [PATCH 07/10] fixed tests,2,9,8,numpy/core/src/multiarray/multiarray_tests.c.src,[u'2'],1,1," -572,7 +572,7 ;",static PyMethodDef Multiarray_TestsMethods[] = ;
2706,10,b3bb546, John Salvatier <jsalvatier@gmail.com>," Sun, 7 Oct 2012 09:54:41 -0700",ct: [PATCH 07/10] fixed tests,2,9,8,numpy/core/tests/test_multiarray.py,[u'15'],8,7," -2831,13 +2831,14 ;",def test_mapiter(self);
2706,10,836c3d1, John Salvatier <jsalvatier@gmail.com>," Sun, 7 Oct 2012 10:17:18 -0700",ct: [PATCH 08/10] inplace passes tests,2,5,4,numpy/core/code_generators/numpy_api.py,[u'6'],3,3," -330,9 +330,9 ;",;
2706,10,836c3d1, John Salvatier <jsalvatier@gmail.com>," Sun, 7 Oct 2012 10:17:18 -0700",ct: [PATCH 08/10] inplace passes tests,2,5,4,numpy/core/tests/test_multiarray.py,[u'3'],2,1," -12,6 +12,7 ; -2847,7 +2848,7 ;",;def test_mapiter(self);
2706,10,93826b6, John Salvatier <jsalvatier@gmail.com>," Mon, 5 Nov 2012 10:30:56 -0800",ct: [PATCH 09/10] fixed a problem with 1d mapiter,1,6,0,numpy/core/src/multiarray/mapping.c,[u'6'],6,0," -2038,6 +2038,9 ; -2045,6 +2048,9 ;","PyArray_MapIterArray(PyArrayObject * a, PyObject * index;PyArray_MapIterArray(PyArrayObject * a, PyObject * index;"
2706,10,a3b3bd6, John Salvatier <jsalvatier@gmail.com>," Mon, 5 Nov 2012 11:11:13 -0800",ct: [PATCH 10/10] added a 1d test for mapiter,1,6,0,numpy/core/tests/test_multiarray.py,[u'6'],6,0," -2853,6 +2853,12 ;",def test_mapiter(self);
2703,6,3e99f32, Thomas Robitaille <thomas.robitaille@gmail.com>," Wed, 31 Oct 2012 19:57:15 +0100",ct: [PATCH 1/6] Don't reset the fill_value of a MaskedArray when calling view() with no dtype,1,4,0,numpy/ma/core.py,[u'5'],4,1," -2882,7 +2882,10 ;","def view(self, dtype=None, type=None);"
2703,6,2a43ed3, Thomas Robitaille <thomas.robitaille@gmail.com>," Tue, 20 Nov 2012 11:51:59 +0100","ct: [PATCH 2/6] Added a `fill_value` keyword to `MaskedArray.view`, and clarify the behavior in the docstring.",1,16,4,numpy/ma/core.py,[u'20'],16,4," -2852,7 +2852,16 ; -2882,10 +2891,13 ;","def __array_wrap__(self, obj, context=None);def view(self, dtype=None, type=None);"
2703,6,4bacc46, Thomas Robitaille <thomas.robitaille@gmail.com>," Tue, 20 Nov 2012 12:17:56 +0100","ct: [PATCH 3/6] Added test for fill_value behavior in MaskedArray.view, and use fill_value to set the fill value, rather than _fill_value, since using fill_value takes care of setting _fill_value to an array.",2,33,0,numpy/ma/core.py,[u'2'],1,1," -2897,7 +2897,7 ;","def view(self, dtype=None, type=None, fill_value=None);"
2703,6,4bacc46, Thomas Robitaille <thomas.robitaille@gmail.com>," Tue, 20 Nov 2012 12:17:56 +0100","ct: [PATCH 3/6] Added test for fill_value behavior in MaskedArray.view, and use fill_value to set the fill value, rather than _fill_value, since using fill_value takes care of setting _fill_value to an array.",2,33,0,numpy/ma/tests/test_core.py,[u'32'],32,0," -1554,6 +1554,38 ;",def test_fillvalue_as_arguments(self);
2703,6,ab66c25, Thomas Robitaille <thomas.robitaille@gmail.com>," Thu, 22 Nov 2012 18:57:34 +0100","ct: [PATCH 4/6] Clarified MaskedArray.view documentation, and added more tests",2,48,10,numpy/ma/core.py,[u'40'],34,6," -2854,14 +2854,42 ;","def __array_wrap__(self, obj, context=None);"
2703,6,ab66c25, Thomas Robitaille <thomas.robitaille@gmail.com>," Thu, 22 Nov 2012 18:57:34 +0100","ct: [PATCH 4/6] Clarified MaskedArray.view documentation, and added more tests",2,48,10,numpy/ma/tests/test_core.py,[u'18'],14,4," -1565,19 +1565,29 ;",def test_fillvalue_in_view(self);
2703,6,dba2499, Thomas Robitaille <thomas.robitaille@gmail.com>," Thu, 22 Nov 2012 20:51:41 +0100",ct: [PATCH 5/6] Improvements to ndarray.view docstring,2,9,6,numpy/add_newdocs.py,[u'10'],6,4," -4437,10 +4437,12 ;","def luf(lamdaexpr, *args, **kwargs);"
2703,6,dba2499, Thomas Robitaille <thomas.robitaille@gmail.com>," Thu, 22 Nov 2012 20:51:41 +0100",ct: [PATCH 5/6] Improvements to ndarray.view docstring,2,9,6,numpy/ma/core.py,[u'5'],3,2," -2862,8 +2862,9 ;","def view(self, dtype=None, type=None, fill_value=None);"
2703,6,dadf5b9, Thomas Robitaille <thomas.robitaille@gmail.com>," Thu, 22 Nov 2012 20:56:35 +0100",ct: [PATCH 6/6] Minor fix to fill_view test,1,0,0,numpy/ma/tests/test_core.py,[u'2'],1,1," -1593,7 +1593,7 ;",def test_fillvalue_in_view(self);
2702,2,237e816, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 1 Nov 2012 23:42:55 +0100","ct: [PATCH 1/2] BUG: Reshape of 0-sized arrays failed to work without copyThis also adds a check for order=Keeporder which is not supported.""closes Issue #2700""",2,12,5,numpy/core/src/multiarray/shape.c,[u'12'],7,5," -187,6 +187,11 ; -230,11 +235,8 ;","PyArray_Newshape(PyArrayObject *self, PyArray_Dims *newdims;PyArray_Newshape(PyArrayObject *self, PyArray_Dims *newdims;"
2702,2,237e816, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 1 Nov 2012 23:42:55 +0100","ct: [PATCH 1/2] BUG: Reshape of 0-sized arrays failed to work without copyThis also adds a check for order=Keeporder which is not supported.""closes Issue #2700""",2,12,5,numpy/core/tests/test_regression.py,[u'5'],5,0," -521,6 +521,11 ;","def test_reshape_zero_strides(self, level=rlevel);"
2702,2,0d275f1, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 1 Nov 2012 23:43:31 +0100",ct: [PATCH 2/2] MNT: Remove _check_zeros from NewShape_attempt_nocopy_reshape already handles this case fine. The onlypurpose would be to slightly speed up this special case.,1,36,92,numpy/core/src/multiarray/shape.c,[u'128'],11,27," -18,10 +18,6 ; -208,65 +204,48 ; -321,41 +300,6 ;",";PyArray_Newshape(PyArrayObject *self, PyArray_Dims *newdims;PyArray_Reshape(PyArrayObject *self, PyObject *shape;"
2701,8,29c8ae8, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 12:45:39 +0100","ct: [PATCH 1/8] BUG: Fix indexing 0-sized arrays using empty fancy-indexesDue to subspace creation for fancy indexing selecting the 0selement on every fancy dimension, this failed if the dimensionwas empty. Propagating check_index to disable the unnecessarycheck in this case.",3,17,12,numpy/core/src/multiarray/iterators.c,[u'6'],4,2," -97,7 +97,8 ; -136,7 +137,8 ;","NPY_NO_EXPORT in;parse_index(PyArrayObject *self, PyObject *op;"
2701,8,29c8ae8, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 12:45:39 +0100","ct: [PATCH 1/8] BUG: Fix indexing 0-sized arrays using empty fancy-indexesDue to subspace creation for fancy indexing selecting the 0selement on every fancy dimension, this failed if the dimensionwas empty. Propagating check_index to disable the unnecessarycheck in this case.",3,17,12,numpy/core/src/multiarray/iterators.h,[u'3'],2,1," -9,7 +9,8 ;",NPY_NO_EXPORT in;
2701,8,29c8ae8, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 12:45:39 +0100","ct: [PATCH 1/8] BUG: Fix indexing 0-sized arrays using empty fancy-indexesDue to subspace creation for fancy indexing selecting the 0selement on every fancy dimension, this failed if the dimensionwas empty. Propagating check_index to disable the unnecessarycheck in this case.",3,17,12,numpy/core/src/multiarray/mapping.c,[u'20'],11,9," -25,7 +25,7 ; -556,7 +556,7 ; -601,7 +601,7 ; -1222,7 +1222,7 ; -1256,9 +1256,10 ; -1301,7 +1302,7 ; -1839,12 +1840,13 ; -1852,7 +1854,7 ;",";fancy_indexing_check(PyObject *args;array_subscript_simple(PyArrayObject *self, PyObject *op;array_subscript_fromobject(PyArrayObject *self, PyObject *op;array_subscript(PyArrayObject *self, PyObject *op;array_ass_sub_simple(PyArrayObject *self, PyObject *ind, PyObject *op;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2701,8,18ee645, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 18:36:04 +0100","ct: [PATCH 2/8] ENH: Allow newaxis in combination with fancy indexing.This commit allows the use of None when also using fancy indexing.To achieve this mit->consec is used to note the denote thetransposition axis (which means that if its consecutive but at thestart, mit->consec==0, and no transposition is necessary).",2,31,21,numpy/core/include/numpy/ndarraytypes.h,[u'3'],1,1," -1275,7 +1275,8 ;",typedef struct ;
2701,8,18ee645, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 18:36:04 +0100","ct: [PATCH 2/8] ENH: Allow newaxis in combination with fancy indexing.This commit allows the use of None when also using fancy indexing.To achieve this mit->consec is used to note the denote thetransposition axis (which means that if its consecutive but at thestart, mit->consec==0, and no transposition is necessary).",2,31,21,numpy/core/src/multiarray/mapping.c,[u'49'],19,14," -226,7 +226,8 ; -303,9 +304,7 ; -338,11 +337,9 ; -1666,7 +1663,7 ; -1676,7 +1673,7 ; -1812,7 +1809,7 ; -1841,7 +1838,8 ; -1867,19 +1865,21 ; -1888,7 +1888,7 ; -1902,6 +1902,11 ; -1926,6 +1931,10 ;","PyArray_MapIterSwapAxes(PyArrayMapIterObject *mit, PyArrayObject **ret, int get;PyArray_GetMap(PyArrayMapIterObject *mit;PyArray_SetMap(PyArrayMapIterObject *mit, PyObject *op;_nonzero_indices(PyObject *myBool, PyArrayIterObject **iters;_convert_obj(PyObject *obj, PyArrayIterObject **iter;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2701,8,a35a7af, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 18:57:54 +0100",ct: [PATCH 3/8] BUG: Check for maximum dimension for fancy indexing.,1,10,0,numpy/core/src/multiarray/mapping.c,[u'11'],10,1," -1864,8 +1864,17 ;","PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2701,8,4bc6557, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 30 Oct 2012 19:14:04 +0100","ct: [PATCH 4/8] BUG: Do not ignore subspace unless it is true 0-dThis is  more important when allowing newaxis, but already beforelead to successful indexing when it should not be suspected.Also some maintenance.",1,17,15,numpy/core/src/multiarray/mapping.c,[u'32'],17,15," -1809,7 +1809,7 ; -1825,14 +1825,6 ; -1859,26 +1851,36 ; -1887,7 +1889,7 ;","PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2701,8,22fae03, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 1 Nov 2012 18:24:50 +0100",ct: [PATCH 5/8] MNT: Tiny cleanup for mapping.c and comments,2,12,9,numpy/core/include/numpy/ndarraytypes.h,[u'7'],5,2," -1275,8 +1275,11 ;",typedef struct ;
2701,8,22fae03, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 1 Nov 2012 18:24:50 +0100",ct: [PATCH 5/8] MNT: Tiny cleanup for mapping.c and comments,2,12,9,numpy/core/src/multiarray/mapping.c,[u'14'],7,7," -226,8 +226,7 ; -1899,7 +1898,9 ; -1914,8 +1915,8 ; -1943,8 +1944,7 ;","PyArray_MapIterSwapAxes(PyArrayMapIterObject *mit, PyArrayObject **ret, int get;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;PyArray_MapIterBind(PyArrayMapIterObject *mit, PyArrayObject *arr;"
2701,8,6115bba, Sebastian Berg <sebastian@sipsolutions.net>," Thu, 1 Nov 2012 18:25:15 +0100",ct: [PATCH 6/8] TST: Add fancy indexing test for tuple indexingThis is a first version of fancy indexing tests by mimicing thebehavoir in python. Note that error messages are not tested.,1,322,9,numpy/core/tests/test_indexing.py,[u'331'],36,2," -1,21 +1,13 ; -117,5 +109,326 ;",;def test_boolean_indexing_twodim(self);
2701,8,5b9da00, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 12 Apr 2013 17:31:57 +0200",ct: [PATCH 7/8] DOC: Advanced indexing using np.newaxesMention in release notes and remove documentation which maygive the idea it cannot be used with advanced indexing.,2,8,2,doc/release/1.8.0-notes.rst,[u'6'],6,0," -72,6 +72,12 ;",New `invert` argument to `in1d;
2701,8,5b9da00, Sebastian Berg <sebastian@sipsolutions.net>," Fri, 12 Apr 2013 17:31:57 +0200",ct: [PATCH 7/8] DOC: Advanced indexing using np.newaxesMention in release notes and remove documentation which maygive the idea it cannot be used with advanced indexing.,2,8,2,doc/source/reference/arrays.indexing.rst,[u'4'],2,2," -170,8 +170,8 ;",concepts to remember include;
2701,8,f9c9555, Sebastian Berg <sebastian@sipsolutions.net>," Sat, 4 May 2013 14:48:42 +0200","ct: [PATCH 8/8] MAINT: Remove unnecessary and wrong check for mapiterswapWith the slight modification of the MapIter API to allow newaxisin fancy indexes, the MapIterObject consec field is already theaxis to transpose to, and with a leading newaxis, even ifiteraxes[0] is 0, consec may not be 0.",1,3,5,numpy/core/src/multiarray/multiarray_tests.c.src,[u'8'],3,5," -471,11 +471,9 ;","map_increment(PyArrayMapIterObject *mit, PyObject *op, inplace_map_binop add_in;"
2699,2,8a9dc88, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 25 Oct 2012 15:32:25 -0400","ct: [PATCH 1/2] BUG: copy.(deep)copy should preserve F-contiguityCurrently, copy.deepcopy() on certain objects in scikit-learn resultsin the copied object being broken, as underlying methods depend onmembers being F-contiguous. I can think of no reason that F-contiguousarrays should not remain F-contiguous through a copy.copy/copy.deepcopy,therefore this alters the methods to use NPY_KEEPORDER when allocatingthe copy.",2,23,3,numpy/core/src/multiarray/methods.c,[u'16'],13,3," -1026,6 +1026,16 ; -1290,7 +1300,7 ; -2151,8 +2161,8 ;","array_copy(PyArrayObject *self, PyObject *args, PyObject *kwds;array_deepcopy(PyArrayObject *self, PyObject *args;NPY_NO_EXPORT PyMethodDef array_methods[] = ;"
2699,2,8a9dc88, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 25 Oct 2012 15:32:25 -0400","ct: [PATCH 1/2] BUG: copy.(deep)copy should preserve F-contiguityCurrently, copy.deepcopy() on certain objects in scikit-learn resultsin the copied object being broken, as underlying methods depend onmembers being F-contiguous. I can think of no reason that F-contiguousarrays should not remain F-contiguous through a copy.copy/copy.deepcopy,therefore this alters the methods to use NPY_KEEPORDER when allocatingthe copy.",2,23,3,numpy/core/tests/test_regression.py,[u'10'],10,0," -1784,5 +1784,15 ;",def test_searchsorted_wrong_dtype(self);
2699,2,3bdb8fa, David Warde-Farley <wardefar@iro.umontreal.ca>," Thu, 25 Oct 2012 18:57:53 -0400",ct: [PATCH 2/2] TST: expected behaviour of .copy(),1,24,0,numpy/core/tests/test_multiarray.py,[u'24'],24,0," -626,6 +626,30 ;",def test_sort(self);
2698,1,ea511fb, iedwards <iedwards.pub@gmail.com>," Thu, 25 Oct 2012 16:34:31 +0200",ct: [PATCH] Update doc/source/_templates/indexcontent.htmlResolves ticket: http://projects.scipy.org/numpy/ticket/2231,1,0,0,doc/source/_templates/indexcontent.html,[u'2'],1,1," -15,7 +15,7 ;",;
2697,1,6d1288e, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 13:16:10 +0200",ct: [PATCH] BUG: Avoid regression in np.insert for axis!=0 or NoneThis avoids a regression with insert failing where it workedbefore when inserting a full array with a scalar and axis!=0.See also Issue #378 and #452.,2,6,9,numpy/lib/function_base.py,[u'11'],3,8," -3598,14 +3598,9 ;","def insert(arr, obj, values, axis=None);"
2697,1,6d1288e, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 13:16:10 +0200",ct: [PATCH] BUG: Avoid regression in np.insert for axis!=0 or NoneThis avoids a regression with insert failing where it workedbefore when inserting a full array with a scalar and axis!=0.See also Issue #378 and #452.,2,6,9,numpy/lib/tests/test_function_base.py,[u'4'],3,1," -155,7 +155,9 ;",def test_multidim(self);
2696,1,e565afb, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 12:05:11 +0200","ct: [PATCH] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis changes CreateSortedStridedPerm to not use the shapefor special casing 1-dim axis. The cleanup does not seemto be useful in most cases and the current way is buggy.Also insert stride so that reduce with keepdims=1 willkeep contiguous arrays contiguous. ""Closes Issue #434""",5,12,21,numpy/core/src/multiarray/ctors.c,[u'1'],0,1," -1112,7 +1112,6 ;","PyArray_NewLikeArray(PyArrayObject *prototype, NPY_ORDER order;"
2696,1,e565afb, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 12:05:11 +0200","ct: [PATCH] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis changes CreateSortedStridedPerm to not use the shapefor special casing 1-dim axis. The cleanup does not seemto be useful in most cases and the current way is buggy.Also insert stride so that reduce with keepdims=1 willkeep contiguous arrays contiguous. ""Closes Issue #434""",5,12,21,numpy/core/src/multiarray/dtype_transfer.c,[u'6'],3,3," -3921,7 +3921,7 ; -4051,7 +4051,7 ; -4185,7 +4185,7 ;","PyArray_PrepareOneRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareTwoRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;"
2696,1,e565afb, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 12:05:11 +0200","ct: [PATCH] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis changes CreateSortedStridedPerm to not use the shapefor special casing 1-dim axis. The cleanup does not seemto be useful in most cases and the current way is buggy.Also insert stride so that reduce with keepdims=1 willkeep contiguous arrays contiguous. ""Closes Issue #434""",5,12,21,numpy/core/src/multiarray/shape.c,[u'18'],5,13," -849,7 +849,7 ; -861,9 +861,7 ; -874,8 +872,7 ; -883,12 +880,7 ; -1027,7 +1019,7 ;","int _npy_stride_sort_item_comparator(const void *a, const void *b;int _npy_stride_sort_item_comparator(const void *a, const void *b;int _npy_stride_sort_item_comparator(const void *a, const void *b;PyArray_CreateSortedStridePerm(int ndim, npy_intp *shape;PyArray_Ravel(PyArrayObject *arr, NPY_ORDER order;"
2696,1,e565afb, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 12:05:11 +0200","ct: [PATCH] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis changes CreateSortedStridedPerm to not use the shapefor special casing 1-dim axis. The cleanup does not seemto be useful in most cases and the current way is buggy.Also insert stride so that reduce with keepdims=1 willkeep contiguous arrays contiguous. ""Closes Issue #434""",5,12,21,numpy/core/src/umath/reduction.c,[u'4'],2,2," -51,7 +51,7 ; -60,7 +60,7 ;","allocate_reduce_result(PyArrayObject *arr, npy_bool *axis_flags;allocate_reduce_result(PyArrayObject *arr, npy_bool *axis_flags;"
2696,1,e565afb, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 12:05:11 +0200","ct: [PATCH] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis changes CreateSortedStridedPerm to not use the shapefor special casing 1-dim axis. The cleanup does not seemto be useful in most cases and the current way is buggy.Also insert stride so that reduce with keepdims=1 willkeep contiguous arrays contiguous. ""Closes Issue #434""",5,12,21,numpy/core/tests/test_api.py,[u'4'],2,2," -138,9 +138,9 ;",def test_copyto();
2694,12,b46f589, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 17:48:14 +0200","ct: [PATCH 01/12] ENH: Do not rely on clean strides for loops.In lowlevel_strided_loops.h, do not rely that the strides forcontiguous arrays are set nicely since they can be considered notimportant if an axis dimensions is zero.",1,18,28,numpy/core/src/private/lowlevel_strided_loops.h,[u'46'],10,15," -552,10 +552,10 ; -575,16 +575,12 ; -620,21 +616,15 ;","PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;"
2694,12,fb64bbf, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 17:56:36 +0200",ct: [PATCH 02/12] TST: Update ctypes tests for changed contiguous flags setting.This is unrelated to what is actually tested here.,1,2,2,numpy/tests/test_ctypeslib.py,[u'4'],2,2," -86,14 +86,14 ;",def test_shape(self);
2694,12,4b28147, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:34:04 +0200","ct: [PATCH 03/12] API: Change isfortran to f-contig and not c-contigThis was a check for 1-d arrays, this is the generalization tohigher dimension if we allow higher dimensioal arrays to be bothf- and c-contiguous.",2,6,5,numpy/core/include/numpy/ndarraytypes.h,[u'7'],4,3," -756,8 +756,9 ; -1370,7 +1371,7 ;","typedef int (PyArray_FinalizeFunc)(PyArrayObject *, PyObject *);PyArrayNeighborhoodIter_Next2D(PyArrayNeighborhoodIterObject* iter);"
2694,12,4b28147, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:34:04 +0200","ct: [PATCH 03/12] API: Change isfortran to f-contig and not c-contigThis was a check for 1-d arrays, this is the generalization tohigher dimension if we allow higher dimensioal arrays to be bothf- and c-contiguous.",2,6,5,numpy/core/numeric.py,[u'4'],2,2," -538,7 +538,7 ; -584,7 +584,7 ;","def require(a, dtype=None, requirements=None);def isfortran(a);"
2694,12,0e10f55, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:38:34 +0200","ct: [PATCH 04/12] BUG: Replace ISFORTRAN by IS_F_CONTIGUOUS.In a few places ISFORTRAN was used to check for f-contiguouity.This is incorrect, since ISFORTRAN never evaluated to True ifthe array was also c-contiguous.",3,6,6,numpy/core/src/multiarray/convert.c,[u'4'],2,2," -265,8 +265,8 ;","PyArray_ToString(PyArrayObject *self, NPY_ORDER order;"
2694,12,0e10f55, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:38:34 +0200","ct: [PATCH 04/12] BUG: Replace ISFORTRAN by IS_F_CONTIGUOUS.In a few places ISFORTRAN was used to check for f-contiguouity.This is incorrect, since ISFORTRAN never evaluated to True ifthe array was also c-contiguous.",3,6,6,numpy/core/src/multiarray/multiarraymodule.c,[u'4'],2,2," -1566,8 +1566,8 ;","_prepend_ones(PyArrayObject *arr, int nd, int ndmin, NPY_ORDER order;"
2694,12,0e10f55, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:38:34 +0200","ct: [PATCH 04/12] BUG: Replace ISFORTRAN by IS_F_CONTIGUOUS.In a few places ISFORTRAN was used to check for f-contiguouity.This is incorrect, since ISFORTRAN never evaluated to True ifthe array was also c-contiguous.",3,6,6,numpy/core/src/multiarray/shape.c,[u'4'],2,2," -1015,10 +1015,10 ;","PyArray_Ravel(PyArrayObject *arr, NPY_ORDER order;"
2694,12,44f83e2, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:39:29 +0200",ct: [PATCH 05/12] TST: Test order='F' combined with C/F-contiguous arrays.Both ravel and asarray misbehaved on 1D (or more generallyC and F-contiguous arrays if order='F' was specified. Speedtest for .tostring seems not feasably.,1,10,0,numpy/core/tests/test_regression.py,[u'10'],10,0," -61,6 +61,16 ;","def test_zeros_order(self,level=rlevel);"
2694,12,c48156d, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:50:28 +0200",ct: [PATCH 06/12] API: Change Flags Updateing to allow C-/F-contiguous arraysThis changes UpdateFlags to ignore 1-dimensional axis whensetting C-/F-contiguous flags. Updates both flags always now.,1,45,62,numpy/core/src/multiarray/flagsobject.c,[u'107'],14,18," -15,11 +15,8 ; -62,28 +59,9 ; -110,66 +88,71 ;",";PyArray_NewFlagsObject(PyObject *obj;PyArray_UpdateFlags(PyArrayObject *ret, int flagmask;"
2694,12,8daf144, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 18:53:23 +0200",ct: [PATCH 07/12] API: ctors changed so that contiguous flags ignore 1-dim axisThis changes ctors.c so that new arrays are created in such a waythat they are both C- and F-contiguous if possible. Also fixessome corner cases for 0-sized arrays.,1,30,10,numpy/core/src/multiarray/ctors.c,[u'40'],29,10," -1825,9 +1825,6 ; -1837,9 +1834,8 ; -3570,14 +3566,33 ; -3588,9 +3603,14 ;","PyArray_FromArray(PyArrayObject *arr, PyArray_Descr *newtype, int flags;PyArray_FromArray(PyArrayObject *arr, PyArray_Descr *newtype, int flags;_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;_array_fill_strides(npy_intp *strides, npy_intp *dims, int nd, size_t itemsize;"
2694,12,a0891ab, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 19:03:35 +0200",ct: [PATCH 08/12] MNT: Remove unnecessary stride/flags cleanup.This code is unnecessary with changed flags behavior. It wouldonly serve the purpose of making strides look nicer for theuser.The UpdateFlags was only required since 1-dim axis being removedmight change contiguous flags. But this cannot happen now.,2,5,40,numpy/core/src/multiarray/multiarraymodule.c,[u'14'],3,10," -1517,26 +1517,18 ; -1677,7 +1669,7 ;","PyArray_EquivTypenums(int typenum1, int typenum2;_array_fromobject(PyObject *NPY_UNUSED(ignored), PyObject *args, PyObject *kws;"
2694,12,a0891ab, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 19:03:35 +0200",ct: [PATCH 08/12] MNT: Remove unnecessary stride/flags cleanup.This code is unnecessary with changed flags behavior. It wouldonly serve the purpose of making strides look nicer for theuser.The UpdateFlags was only required since 1-dim axis being removedmight change contiguous flags. But this cannot happen now.,2,5,40,numpy/core/src/multiarray/shape.c,[u'31'],2,26," -267,32 +267,6 ; -1164,6 +1138,8 ; -1186,7 +1162,4 ;","PyArray_Newshape(PyArrayObject *self, PyArray_Dims *newdims;build_shape_string(npy_intp n, npy_intp *vals;PyArray_RemoveAxesInPlace(PyArrayObject *arr, npy_bool *flags;"
2694,12,dc4e38b, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 23:18:27 +0200","ct: [PATCH 09/12] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis reverts changes done to CreateSortedStridePerm in commit9194b3af. The problem is that it would fail for 3x1x3 Fortran orderarray for example. And special handleing seems unnecessary at leastafter 1-dim axis not mattering for contiguous flags.This ""closes Issue #434""",5,11,20,numpy/core/src/multiarray/ctors.c,[u'1'],0,1," -1112,7 +1112,6 ;","PyArray_NewLikeArray(PyArrayObject *prototype, NPY_ORDER order;"
2694,12,dc4e38b, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 23:18:27 +0200","ct: [PATCH 09/12] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis reverts changes done to CreateSortedStridePerm in commit9194b3af. The problem is that it would fail for 3x1x3 Fortran orderarray for example. And special handleing seems unnecessary at leastafter 1-dim axis not mattering for contiguous flags.This ""closes Issue #434""",5,11,20,numpy/core/src/multiarray/dtype_transfer.c,[u'6'],3,3," -3921,7 +3921,7 ; -4051,7 +4051,7 ; -4185,7 +4185,7 ;","PyArray_PrepareOneRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareTwoRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;"
2694,12,dc4e38b, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 23:18:27 +0200","ct: [PATCH 09/12] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis reverts changes done to CreateSortedStridePerm in commit9194b3af. The problem is that it would fail for 3x1x3 Fortran orderarray for example. And special handleing seems unnecessary at leastafter 1-dim axis not mattering for contiguous flags.This ""closes Issue #434""",5,11,20,numpy/core/src/multiarray/shape.c,[u'18'],5,13," -823,7 +823,7 ; -835,9 +835,7 ; -848,8 +846,7 ; -857,12 +854,7 ; -1001,7 +993,7 ;","int _npy_stride_sort_item_comparator(const void *a, const void *b;int _npy_stride_sort_item_comparator(const void *a, const void *b;int _npy_stride_sort_item_comparator(const void *a, const void *b;PyArray_CreateSortedStridePerm(int ndim, npy_intp *shape;PyArray_Ravel(PyArrayObject *arr, NPY_ORDER order;"
2694,12,dc4e38b, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 23:18:27 +0200","ct: [PATCH 09/12] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis reverts changes done to CreateSortedStridePerm in commit9194b3af. The problem is that it would fail for 3x1x3 Fortran orderarray for example. And special handleing seems unnecessary at leastafter 1-dim axis not mattering for contiguous flags.This ""closes Issue #434""",5,11,20,numpy/core/src/umath/reduction.c,[u'2'],1,1," -51,7 +51,7 ;","allocate_reduce_result(PyArrayObject *arr, npy_bool *axis_flags;"
2694,12,dc4e38b, Sebastian Berg <sebastian@sipsolutions.net>," Sun, 21 Oct 2012 23:18:27 +0200","ct: [PATCH 09/12] BUG: Fix bug with size 1-dims in CreateSortedStridePermThis reverts changes done to CreateSortedStridePerm in commit9194b3af. The problem is that it would fail for 3x1x3 Fortran orderarray for example. And special handleing seems unnecessary at leastafter 1-dim axis not mattering for contiguous flags.This ""closes Issue #434""",5,11,20,numpy/core/tests/test_api.py,[u'4'],2,2," -138,9 +138,9 ;",def test_copyto();
2694,12,dbe4468, Sebastian Berg <sebastian@sipsolutions.net>," Mon, 22 Oct 2012 13:25:41 +0200",ct: [PATCH 10/12] TST: Check if contiguous flags are correct in various situations,1,32,0,numpy/core/tests/test_api.py,[u'32'],32,0," -202,5 +202,37 ;","def check_copy_result(x, y, ccontig, fcontig, strides=False);"
2694,12,4d741d2, Sebastian Berg <sebastian@sipsolutions.net>," Mon, 22 Oct 2012 14:10:40 +0200",ct: [PATCH 11/12] MNT: Minor cleanups in comments and lowlevel_strided_loops.,3,10,9,numpy/core/include/numpy/ndarraytypes.h,[u'2'],1,1," -757,7 +757,7 ;","typedef int (PyArray_FinalizeFunc)(PyArrayObject *, PyObject *);"
2694,12,4d741d2, Sebastian Berg <sebastian@sipsolutions.net>," Mon, 22 Oct 2012 14:10:40 +0200",ct: [PATCH 11/12] MNT: Minor cleanups in comments and lowlevel_strided_loops.,3,10,9,numpy/core/src/multiarray/flagsobject.c,[u'5'],3,2," -88,9 +88,10 ;","PyArray_UpdateFlags(PyArrayObject *ret, int flagmask;"
2694,12,4d741d2, Sebastian Berg <sebastian@sipsolutions.net>," Mon, 22 Oct 2012 14:10:40 +0200",ct: [PATCH 11/12] MNT: Minor cleanups in comments and lowlevel_strided_loops.,3,10,9,numpy/core/src/private/lowlevel_strided_loops.h,[u'12'],6,6," -554,7 +554,7 ; -577,10 +577,10 ; -618,13 +618,13 ;","PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;PyArray_PrepareThreeRawArrayIter(int ndim, npy_intp *shape;"
2694,12,02ebf8b, Sebastian Berg <sebastian@sipsolutions.net>," Tue, 23 Oct 2012 14:32:30 +0200",ct: [PATCH 12/12] MNT: Remove unnecessary special cases in _UpdateContiguousFlagsRemove unnecessary special cases for 0 and 1-d arrays as suggestedby njsmith.,1,0,16,numpy/core/src/multiarray/flagsobject.c,[u'16'],0,16," -101,23 +101,7 ;",_UpdateContiguousFlags(PyArrayObject *ap;
2693,3,dc2e3b7, Guillaume Gay <guillaume@mitotic-machine.org>," Mon, 22 Oct 2012 12:50:56 +0300",ct: [PATCH 1/3] Correct `linalg.solve` doc stringFixes issue 2692,1,2,2,numpy/linalg/linalg.py,[u'4'],2,2," -299,8 +299,8 ;","def solve(a, b);"
2693,3,f88e07a, Guillaume Gay <guillaume@mitotic-machine.org>," Mon, 22 Oct 2012 19:00:57 +0300",ct: [PATCH 2/3] Taking njsmith comment into account,1,2,2,numpy/linalg/linalg.py,[u'4'],2,2," -299,8 +299,8 ;","def solve(a, b);"
2693,3,25f5363, Guillaume Gay <guillaume@mitotic-machine.org>," Mon, 22 Oct 2012 19:03:27 +0300",ct: [PATCH 3/3] Fixed parenthesis typo,1,0,0,numpy/linalg/linalg.py,[u'2'],1,1," -299,7 +299,7 ;","def solve(a, b);"
2691,1,840cbbe, Stefan van der Walt <stefan@sun.ac.za>," Mon, 26 Nov 2012 11:19:17 -0800",ct: [PATCH] DOC: Further tweaks to histogram2d docstring.,1,11,9,numpy/lib/twodim_base.py,[u'20'],11,9," -521,17 +521,19 ; -560,8 +562,8 ; -572,7 +574,7 ;","def histogram2d(x, y, bins=10, range=None, normed=False, weights=None);def histogram2d(x, y, bins=10, range=None, normed=False, weights=None);def histogram2d(x, y, bins=10, range=None, normed=False, weights=None);"
